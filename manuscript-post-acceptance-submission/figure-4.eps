%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: figure-4.pdf
%%Creator: Adobe Acrobat 10.1.14
%%For: choderaj
%%CreationDate: 1/21/16, 5:36 PM
%%BoundingBox: 0 0 271 216
%%HiResBoundingBox: 0 0 271 215.4600
%%CropBox: 0 0 271 215.4600
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$None SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_AGM_Core/driver_media_override gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 753 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.2-c001 63.139439, 2010/09/27-13:37:26        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdfx="http://ns.adobe.com/pdfx/1.3/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreateDate="2016-01-21T15:43:30-05:00"
   xmp:CreatorTool="TeX"
   xmp:ModifyDate="2016-01-21T15:43:30-05:00"
   pdfx:PTEX.Fullbanner="This is pdfTeX, Version 3.14159265-2.6-1.40.16 (TeX Live 2015) kpathsea version 6.2.1"
   pdf:Producer="pdfTeX-1.40.16"
   pdf:Trapped="False"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/driver_media_override gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -215.46 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 215.46 li
271 215.46 li
271 0 li
cp
clp
.499968 203.005 mo
270.508 203.005 li
270.508 .499088 li
.499968 .499088 li
.499968 203.005 li
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
20.8048 160.404 mo
239.487 160.404 li
239.487 18.7246 li
20.8048 18.7246 li
20.8048 160.404 li
f
239.487 160.404 mo
239.487 160.404 li
1 /0 /CSD get_res sepcs
.85 sep
f
.857168 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
239.487 160.404 mo
239.487 160.404 li
@
239.487 18.7246 mo
239.487 18.7246 li
f
239.487 18.7246 mo
239.487 18.7246 li
@
237.846 169.522 mo
237.846 168.802 237.915 168.219 238.069 167.774 cv
238.215 167.328 238.438 166.985 238.729 166.745 cv
239.021 166.505 239.398 166.385 239.843 166.385 cv
240.169 166.385 240.461 166.454 240.709 166.591 cv
240.949 166.728 241.155 166.916 241.318 167.165 cv
241.481 167.414 241.609 167.714 241.703 168.074 cv
241.789 168.434 241.841 168.922 241.841 169.522 cv
241.841 170.242 241.763 170.825 241.618 171.271 cv
241.472 171.717 241.249 172.051 240.958 172.291 cv
240.666 172.531 240.289 172.642 239.843 172.642 cv
239.243 172.642 238.781 172.437 238.446 172.017 cv
238.043 171.511 237.846 170.679 237.846 169.522 cv
238.618 169.522 mo
238.618 170.534 238.729 171.202 238.969 171.537 cv
239.201 171.871 239.492 172.034 239.843 172.034 cv
240.186 172.034 240.469 171.871 240.709 171.537 cv
240.949 171.202 241.069 170.534 241.069 169.522 cv
241.069 168.511 240.949 167.842 240.709 167.508 cv
240.469 167.182 240.178 167.011 239.835 167.011 cv
239.483 167.011 239.209 167.156 239.003 167.448 cv
238.746 167.825 238.618 168.519 238.618 169.522 cv
f
f
195.75 160.404 mo
195.75 160.404 li
@
195.75 18.7246 mo
195.75 18.7246 li
f
195.75 18.7246 mo
195.75 18.7246 li
@
195.625 171.828 mo
195.625 172.548 li
191.571 172.548 li
191.562 172.368 191.597 172.197 191.665 172.025 cv
191.768 171.751 191.931 171.485 192.154 171.211 cv
192.377 170.945 192.711 170.637 193.14 170.277 cv
193.808 169.737 194.254 169.308 194.494 168.982 cv
194.725 168.665 194.845 168.365 194.845 168.074 cv
194.845 167.782 194.734 167.525 194.52 167.319 cv
194.305 167.114 194.031 167.011 193.688 167.011 cv
193.328 167.011 193.037 167.122 192.823 167.337 cv
192.6 167.559 192.488 167.859 192.488 168.245 cv
191.717 168.159 li
191.768 167.585 191.965 167.148 192.308 166.839 cv
192.651 166.539 193.123 166.385 193.705 166.385 cv
194.288 166.385 194.76 166.556 195.103 166.882 cv
195.445 167.208 195.617 167.611 195.617 168.091 cv
195.617 168.339 195.565 168.579 195.463 168.819 cv
195.36 169.059 195.197 169.308 194.965 169.565 cv
194.734 169.831 194.348 170.191 193.808 170.645 cv
193.354 171.022 193.063 171.279 192.934 171.417 cv
192.805 171.554 192.703 171.691 192.617 171.828 cv
195.625 171.828 li
f
196.44 169.522 mo
196.44 168.802 196.508 168.219 196.663 167.774 cv
196.808 167.328 197.031 166.985 197.323 166.745 cv
197.614 166.505 197.991 166.385 198.437 166.385 cv
198.763 166.385 199.054 166.454 199.303 166.591 cv
199.543 166.728 199.748 166.916 199.911 167.165 cv
200.074 167.414 200.203 167.714 200.297 168.074 cv
200.383 168.434 200.434 168.922 200.434 169.522 cv
200.434 170.242 200.357 170.825 200.211 171.271 cv
200.066 171.717 199.843 172.051 199.551 172.291 cv
199.26 172.531 198.883 172.642 198.437 172.642 cv
197.837 172.642 197.374 172.437 197.04 172.017 cv
196.637 171.511 196.44 170.679 196.44 169.522 cv
197.211 169.522 mo
197.211 170.534 197.323 171.202 197.563 171.537 cv
197.794 171.871 198.086 172.034 198.437 172.034 cv
198.78 172.034 199.063 171.871 199.303 171.537 cv
199.543 171.202 199.663 170.534 199.663 169.522 cv
199.663 168.511 199.543 167.842 199.303 167.508 cv
199.063 167.182 198.771 167.011 198.428 167.011 cv
198.077 167.011 197.803 167.156 197.597 167.448 cv
197.34 167.825 197.211 168.519 197.211 169.522 cv
f
f
152.014 160.404 mo
152.014 160.404 li
@
152.014 18.7246 mo
152.014 18.7246 li
f
152.014 18.7246 mo
152.014 18.7246 li
@
150.279 172.548 mo
150.279 171.082 li
147.622 171.082 li
147.622 170.388 li
150.416 166.411 li
151.034 166.411 li
151.034 170.388 li
151.865 170.388 li
151.865 171.082 li
151.034 171.082 li
151.034 172.548 li
150.279 172.548 li
150.279 170.388 mo
150.279 167.619 li
148.359 170.388 li
150.279 170.388 li
f
152.636 169.522 mo
152.636 168.802 152.705 168.219 152.859 167.774 cv
153.005 167.328 153.228 166.985 153.519 166.745 cv
153.811 166.505 154.188 166.385 154.634 166.385 cv
154.959 166.385 155.251 166.454 155.499 166.591 cv
155.739 166.728 155.945 166.916 156.108 167.165 cv
156.271 167.414 156.399 167.714 156.494 168.074 cv
156.579 168.434 156.631 168.922 156.631 169.522 cv
156.631 170.242 156.554 170.825 156.408 171.271 cv
156.262 171.717 156.039 172.051 155.748 172.291 cv
155.456 172.531 155.079 172.642 154.634 172.642 cv
154.034 172.642 153.571 172.437 153.236 172.017 cv
152.834 171.511 152.636 170.679 152.636 169.522 cv
153.408 169.522 mo
153.408 170.534 153.519 171.202 153.759 171.537 cv
153.991 171.871 154.282 172.034 154.634 172.034 cv
154.976 172.034 155.259 171.871 155.499 171.537 cv
155.739 171.202 155.859 170.534 155.859 169.522 cv
155.859 168.511 155.739 167.842 155.499 167.508 cv
155.259 167.182 154.968 167.011 154.625 167.011 cv
154.274 167.011 153.999 167.156 153.794 167.448 cv
153.536 167.825 153.408 168.519 153.408 169.522 cv
f
f
108.278 160.404 mo
108.278 160.404 li
@
108.278 18.7246 mo
108.278 18.7246 li
f
108.278 18.7246 mo
108.278 18.7246 li
@
108.143 167.911 mo
107.389 167.971 li
107.32 167.679 107.226 167.465 107.106 167.328 cv
106.9 167.122 106.643 167.011 106.352 167.011 cv
106.112 167.011 105.898 167.079 105.718 167.208 cv
105.478 167.379 105.297 167.637 105.16 167.962 cv
105.023 168.297 104.946 168.768 104.946 169.385 cv
105.126 169.111 105.349 168.914 105.615 168.777 cv
105.872 168.639 106.146 168.571 106.438 168.571 cv
106.935 168.571 107.363 168.759 107.715 169.128 cv
108.066 169.497 108.246 169.977 108.246 170.559 cv
108.246 170.945 108.16 171.305 107.998 171.631 cv
107.826 171.965 107.603 172.214 107.312 172.385 cv
107.02 172.557 106.695 172.642 106.326 172.642 cv
105.692 172.642 105.186 172.42 104.792 171.957 cv
104.397 171.502 104.2 170.739 104.2 169.677 cv
104.2 168.494 104.415 167.637 104.852 167.088 cv
105.229 166.625 105.743 166.385 106.395 166.385 cv
106.875 166.385 107.278 166.522 107.586 166.796 cv
107.895 167.071 108.075 167.439 108.143 167.911 cv
105.066 170.559 mo
105.066 170.817 105.117 171.065 105.229 171.305 cv
105.332 171.545 105.486 171.725 105.692 171.845 cv
105.889 171.974 106.095 172.034 106.318 172.034 cv
106.626 172.034 106.9 171.905 107.132 171.648 cv
107.355 171.391 107.475 171.048 107.475 170.602 cv
107.475 170.182 107.355 169.848 107.132 169.599 cv
106.909 169.359 106.626 169.231 106.283 169.231 cv
105.94 169.231 105.658 169.359 105.417 169.599 cv
105.177 169.848 105.066 170.165 105.066 170.559 cv
f
109 169.522 mo
109 168.802 109.069 168.219 109.223 167.774 cv
109.369 167.328 109.592 166.985 109.883 166.745 cv
110.175 166.505 110.552 166.385 110.998 166.385 cv
111.323 166.385 111.615 166.454 111.863 166.591 cv
112.103 166.728 112.309 166.916 112.472 167.165 cv
112.635 167.414 112.763 167.714 112.858 168.074 cv
112.943 168.434 112.995 168.922 112.995 169.522 cv
112.995 170.242 112.918 170.825 112.772 171.271 cv
112.626 171.717 112.403 172.051 112.112 172.291 cv
111.821 172.531 111.443 172.642 110.998 172.642 cv
110.398 172.642 109.935 172.437 109.6 172.017 cv
109.198 171.511 109 170.679 109 169.522 cv
109.772 169.522 mo
109.772 170.534 109.883 171.202 110.123 171.537 cv
110.355 171.871 110.646 172.034 110.998 172.034 cv
111.341 172.034 111.623 171.871 111.863 171.537 cv
112.103 171.202 112.223 170.534 112.223 169.522 cv
112.223 168.511 112.103 167.842 111.863 167.508 cv
111.623 167.182 111.332 167.011 110.989 167.011 cv
110.638 167.011 110.363 167.156 110.158 167.448 cv
109.9 167.825 109.772 168.519 109.772 169.522 cv
f
f
64.5412 160.404 mo
64.5412 160.404 li
@
64.5412 18.7246 mo
64.5412 18.7246 li
f
64.5412 18.7246 mo
64.5412 18.7246 li
@
61.6721 169.222 mo
61.355 169.111 61.1235 168.948 60.9692 168.734 cv
60.815 168.528 60.7464 168.271 60.7464 167.971 cv
60.7464 167.525 60.9007 167.156 61.2264 166.848 cv
61.5521 166.539 61.9807 166.385 62.5122 166.385 cv
63.0436 166.385 63.4808 166.548 63.8065 166.856 cv
64.1322 167.165 64.2951 167.542 64.2951 167.988 cv
64.2951 168.279 64.2179 168.528 64.0722 168.734 cv
63.9179 168.948 63.695 169.111 63.3865 169.222 cv
63.7636 169.342 64.0465 169.539 64.2436 169.814 cv
64.4408 170.088 64.5436 170.414 64.5436 170.791 cv
64.5436 171.322 64.3551 171.759 63.9865 172.111 cv
63.6093 172.471 63.1207 172.642 62.5207 172.642 cv
61.9121 172.642 61.4235 172.471 61.055 172.111 cv
60.6864 171.759 60.5064 171.314 60.5064 170.774 cv
60.5064 170.379 60.6007 170.045 60.8064 169.771 cv
61.0035 169.505 61.295 169.325 61.6721 169.222 cv
61.5178 167.945 mo
61.5178 168.237 61.6121 168.477 61.8007 168.657 cv
61.9893 168.845 62.2293 168.931 62.5293 168.931 cv
62.8207 168.931 63.0522 168.845 63.2407 168.657 cv
63.4293 168.477 63.5236 168.254 63.5236 167.988 cv
63.5236 167.714 63.4208 167.482 63.2322 167.294 cv
63.0436 167.105 62.8036 167.011 62.5207 167.011 cv
62.2293 167.011 61.9893 167.105 61.8007 167.285 cv
61.6121 167.474 61.5178 167.688 61.5178 167.945 cv
61.2778 170.774 mo
61.2778 170.997 61.3293 171.202 61.4321 171.399 cv
61.535 171.605 61.6807 171.759 61.8864 171.871 cv
62.0836 171.982 62.2979 172.034 62.5293 172.034 cv
62.8893 172.034 63.1807 171.922 63.4208 171.691 cv
63.6522 171.459 63.7722 171.159 63.7722 170.799 cv
63.7722 170.439 63.6522 170.148 63.4122 169.908 cv
63.1722 169.668 62.8636 169.548 62.5036 169.548 cv
62.1436 169.548 61.8521 169.668 61.6207 169.899 cv
61.3893 170.139 61.2778 170.431 61.2778 170.774 cv
f
65.2808 169.522 mo
65.2808 168.802 65.3494 168.219 65.5037 167.774 cv
65.6494 167.328 65.8722 166.985 66.1637 166.745 cv
66.4551 166.505 66.8323 166.385 67.278 166.385 cv
67.6037 166.385 67.8952 166.454 68.1437 166.591 cv
68.3838 166.728 68.5895 166.916 68.7523 167.165 cv
68.9152 167.414 69.0438 167.714 69.1381 168.074 cv
69.2238 168.434 69.2752 168.922 69.2752 169.522 cv
69.2752 170.242 69.1981 170.825 69.0523 171.271 cv
68.9066 171.717 68.6838 172.051 68.3923 172.291 cv
68.1009 172.531 67.7237 172.642 67.278 172.642 cv
66.678 172.642 66.2151 172.437 65.8808 172.017 cv
65.478 171.511 65.2808 170.679 65.2808 169.522 cv
66.0523 169.522 mo
66.0523 170.534 66.1637 171.202 66.4037 171.537 cv
66.6351 171.871 66.9266 172.034 67.278 172.034 cv
67.6209 172.034 67.9037 171.871 68.1437 171.537 cv
68.3838 171.202 68.5038 170.534 68.5038 169.522 cv
68.5038 168.511 68.3838 167.842 68.1437 167.508 cv
67.9037 167.182 67.6123 167.011 67.2694 167.011 cv
66.918 167.011 66.6437 167.156 66.438 167.448 cv
66.1808 167.825 66.0523 168.519 66.0523 169.522 cv
f
f
20.8048 160.404 mo
20.8048 160.404 li
@
20.8048 18.7246 mo
20.8048 18.7246 li
f
20.8048 18.7246 mo
20.8048 18.7246 li
@
17.5231 172.548 mo
16.7688 172.548 li
16.7688 167.748 li
16.5802 167.919 16.3402 168.099 16.0488 168.271 cv
15.7573 168.442 15.4916 168.571 15.2602 168.657 cv
15.2602 167.928 li
15.6802 167.731 16.0488 167.491 16.3659 167.208 cv
16.6745 166.934 16.8974 166.659 17.0345 166.385 cv
17.5231 166.385 li
17.5231 172.548 li
f
19.4517 169.522 mo
19.4517 168.802 19.5203 168.219 19.6746 167.774 cv
19.8203 167.328 20.0432 166.985 20.3346 166.745 cv
20.626 166.505 21.0032 166.385 21.4489 166.385 cv
21.7746 166.385 22.0661 166.454 22.3147 166.591 cv
22.5547 166.728 22.7604 166.916 22.9232 167.165 cv
23.0861 167.414 23.2147 167.714 23.309 168.074 cv
23.3947 168.434 23.4461 168.922 23.4461 169.522 cv
23.4461 170.242 23.369 170.825 23.2233 171.271 cv
23.0775 171.717 22.8547 172.051 22.5632 172.291 cv
22.2718 172.531 21.8946 172.642 21.4489 172.642 cv
20.8489 172.642 20.386 172.437 20.0517 172.017 cv
19.6489 171.511 19.4517 170.679 19.4517 169.522 cv
20.2232 169.522 mo
20.2232 170.534 20.3346 171.202 20.5746 171.537 cv
20.806 171.871 21.0975 172.034 21.4489 172.034 cv
21.7918 172.034 22.0746 171.871 22.3147 171.537 cv
22.5547 171.202 22.6747 170.534 22.6747 169.522 cv
22.6747 168.511 22.5547 167.842 22.3147 167.508 cv
22.0746 167.182 21.7832 167.011 21.4403 167.011 cv
21.0889 167.011 20.8146 167.156 20.6089 167.448 cv
20.3517 167.825 20.2232 168.519 20.2232 169.522 cv
f
24.2176 169.522 mo
24.2176 168.802 24.2861 168.219 24.4404 167.774 cv
24.5862 167.328 24.809 166.985 25.1005 166.745 cv
25.3919 166.505 25.769 166.385 26.2148 166.385 cv
26.5405 166.385 26.8319 166.454 27.0805 166.591 cv
27.3205 166.728 27.5262 166.916 27.6891 167.165 cv
27.852 167.414 27.9805 167.714 28.0748 168.074 cv
28.1605 168.434 28.212 168.922 28.212 169.522 cv
28.212 170.242 28.1348 170.825 27.9891 171.271 cv
27.8434 171.717 27.6205 172.051 27.3291 172.291 cv
27.0377 172.531 26.6605 172.642 26.2148 172.642 cv
25.6148 172.642 25.1519 172.437 24.8176 172.017 cv
24.4147 171.511 24.2176 170.679 24.2176 169.522 cv
24.989 169.522 mo
24.989 170.534 25.1005 171.202 25.3405 171.537 cv
25.5719 171.871 25.8633 172.034 26.2148 172.034 cv
26.5576 172.034 26.8405 171.871 27.0805 171.537 cv
27.3205 171.202 27.4405 170.534 27.4405 169.522 cv
27.4405 168.511 27.3205 167.842 27.0805 167.508 cv
26.8405 167.182 26.5491 167.011 26.2062 167.011 cv
25.8548 167.011 25.5805 167.156 25.3747 167.448 cv
25.1176 167.825 24.989 168.519 24.989 169.522 cv
f
85.4787 185.166 mo
86.299 185.044 li
86.3367 185.374 86.4687 185.628 86.6761 185.798 cv
86.8836 185.968 87.1853 186.053 87.5624 186.053 cv
87.9396 186.053 88.2225 185.977 88.411 185.826 cv
88.5902 185.675 88.6845 185.487 88.6845 185.279 cv
88.6845 185.091 88.5996 184.949 88.4393 184.836 cv
88.3262 184.761 88.0433 184.667 87.5907 184.553 cv
86.9873 184.403 86.563 184.271 86.3273 184.157 cv
86.0915 184.044 85.9124 183.893 85.7898 183.695 cv
85.6672 183.497 85.6107 183.281 85.6107 183.035 cv
85.6107 182.818 85.6578 182.62 85.7615 182.432 cv
85.8558 182.243 85.9972 182.092 86.167 181.97 cv
86.299 181.876 86.4687 181.8 86.695 181.734 cv
86.9213 181.668 87.157 181.63 87.4116 181.63 cv
87.7887 181.63 88.1282 181.687 88.4205 181.8 cv
88.7128 181.913 88.9296 182.055 89.0711 182.243 cv
89.2031 182.432 89.2973 182.686 89.3539 182.998 cv
88.543 183.111 li
88.5053 182.866 88.3922 182.668 88.2225 182.526 cv
88.0433 182.385 87.7982 182.309 87.4776 182.309 cv
87.091 182.309 86.8176 182.375 86.6573 182.498 cv
86.4875 182.63 86.4121 182.771 86.4121 182.941 cv
86.4121 183.054 86.4404 183.148 86.5158 183.233 cv
86.5818 183.328 86.6855 183.394 86.8364 183.45 cv
86.9118 183.488 87.157 183.554 87.5624 183.667 cv
88.147 183.818 88.5619 183.95 88.7882 184.044 cv
89.0145 184.148 89.2031 184.299 89.3351 184.487 cv
89.4671 184.676 89.5331 184.912 89.5331 185.195 cv
89.5331 185.477 89.4482 185.732 89.2879 185.977 cv
89.1276 186.222 88.8919 186.401 88.5902 186.533 cv
88.2885 186.665 87.9396 186.731 87.5624 186.731 cv
86.9213 186.731 86.4404 186.609 86.1104 186.345 cv
85.771 186.081 85.5635 185.694 85.4787 185.166 cv
f
93.8703 185.053 mo
94.7284 185.157 li
94.5869 185.666 94.3323 186.053 93.9741 186.326 cv
93.6063 186.599 93.1443 186.731 92.5786 186.731 cv
91.862 186.731 91.2868 186.515 90.872 186.081 cv
90.4571 185.647 90.2497 185.025 90.2497 184.223 cv
90.2497 183.403 90.4571 182.762 90.8814 182.309 cv
91.2963 181.857 91.8526 181.63 92.5314 181.63 cv
93.182 181.63 93.7195 181.857 94.1343 182.3 cv
94.5492 182.743 94.7566 183.365 94.7566 184.176 cv
94.7566 184.233 94.7472 184.299 94.7472 184.393 cv
91.0983 184.393 li
91.1265 184.94 91.2774 185.345 91.5508 185.628 cv
91.8243 185.911 92.1637 186.053 92.5786 186.053 cv
92.8803 186.053 93.1443 185.977 93.3612 185.817 cv
93.5686 185.666 93.7383 185.411 93.8703 185.053 cv
91.1454 183.714 mo
93.8798 183.714 li
93.842 183.299 93.7383 182.998 93.5686 182.79 cv
93.3046 182.47 92.9557 182.309 92.5409 182.309 cv
92.1543 182.309 91.8337 182.441 91.5791 182.696 cv
91.3151 182.951 91.1737 183.29 91.1454 183.714 cv
f
98.8771 188.495 mo
98.8771 186.109 li
98.745 186.298 98.5659 186.449 98.3396 186.562 cv
98.1039 186.675 97.8587 186.731 97.6042 186.731 cv
97.0196 186.731 96.5104 186.505 96.0955 186.043 cv
95.6807 185.581 95.4732 184.949 95.4732 184.139 cv
95.4732 183.648 95.5581 183.215 95.7278 182.818 cv
95.8975 182.432 96.1427 182.14 96.4633 181.932 cv
96.7838 181.734 97.1421 181.63 97.5382 181.63 cv
98.1416 181.63 98.613 181.885 98.9619 182.394 cv
98.9619 181.734 li
99.7068 181.734 li
99.7068 188.495 li
98.8771 188.495 li
96.3218 184.167 mo
96.3218 184.799 96.4538 185.27 96.7178 185.581 cv
96.9818 185.902 97.293 186.053 97.6702 186.053 cv
98.019 186.053 98.3207 185.911 98.5753 185.609 cv
98.8299 185.308 98.9619 184.855 98.9619 184.242 cv
98.9619 183.601 98.8205 183.111 98.5565 182.781 cv
98.2925 182.451 97.9719 182.281 97.6136 182.281 cv
97.2553 182.281 96.9441 182.441 96.699 182.743 cv
96.4444 183.045 96.3218 183.526 96.3218 184.167 cv
f
104.214 186.628 mo
104.214 185.911 li
103.827 186.458 103.309 186.731 102.658 186.731 cv
102.366 186.731 102.092 186.675 101.847 186.571 cv
101.602 186.467 101.413 186.326 101.291 186.156 cv
101.168 185.987 101.083 185.789 101.036 185.543 cv
100.999 185.383 100.989 185.129 100.989 184.77 cv
100.989 181.734 li
101.819 181.734 li
101.819 184.45 li
101.819 184.883 101.828 185.176 101.866 185.327 cv
101.923 185.543 102.026 185.713 102.196 185.836 cv
102.366 185.968 102.573 186.024 102.828 186.024 cv
103.073 186.024 103.299 185.968 103.525 185.836 cv
103.742 185.713 103.893 185.543 103.987 185.317 cv
104.072 185.1 104.119 184.78 104.119 184.355 cv
104.119 181.734 li
104.949 181.734 li
104.949 186.628 li
104.214 186.628 li
f
109.598 185.053 mo
110.456 185.157 li
110.314 185.666 110.06 186.053 109.701 186.326 cv
109.334 186.599 108.872 186.731 108.306 186.731 cv
107.589 186.731 107.014 186.515 106.599 186.081 cv
106.184 185.647 105.977 185.025 105.977 184.223 cv
105.977 183.403 106.184 182.762 106.609 182.309 cv
107.024 181.857 107.58 181.63 108.259 181.63 cv
108.909 181.63 109.447 181.857 109.862 182.3 cv
110.277 182.743 110.484 183.365 110.484 184.176 cv
110.484 184.233 110.475 184.299 110.475 184.393 cv
106.826 184.393 li
106.854 184.94 107.005 185.345 107.278 185.628 cv
107.552 185.911 107.891 186.053 108.306 186.053 cv
108.608 186.053 108.872 185.977 109.088 185.817 cv
109.296 185.666 109.466 185.411 109.598 185.053 cv
106.873 183.714 mo
109.607 183.714 li
109.569 183.299 109.466 182.998 109.296 182.79 cv
109.032 182.47 108.683 182.309 108.268 182.309 cv
107.882 182.309 107.561 182.441 107.306 182.696 cv
107.042 182.951 106.901 183.29 106.873 183.714 cv
f
111.493 186.628 mo
111.493 181.734 li
112.238 181.734 li
112.238 182.432 li
112.596 181.904 113.115 181.63 113.793 181.63 cv
114.086 181.63 114.359 181.687 114.604 181.791 cv
114.85 181.894 115.038 182.036 115.161 182.206 cv
115.283 182.375 115.368 182.583 115.415 182.818 cv
115.444 182.969 115.462 183.243 115.462 183.62 cv
115.462 186.628 li
114.633 186.628 li
114.633 183.658 li
114.633 183.318 114.595 183.073 114.538 182.903 cv
114.472 182.734 114.359 182.602 114.199 182.498 cv
114.029 182.404 113.841 182.347 113.624 182.347 cv
113.265 182.347 112.954 182.46 112.7 182.686 cv
112.445 182.913 112.323 183.337 112.323 183.959 cv
112.323 186.628 li
111.493 186.628 li
f
119.922 184.836 mo
120.743 184.94 li
120.648 185.506 120.422 185.949 120.054 186.26 cv
119.687 186.581 119.234 186.731 118.706 186.731 cv
118.027 186.731 117.49 186.515 117.084 186.081 cv
116.679 185.647 116.481 185.025 116.481 184.205 cv
116.481 183.677 116.566 183.215 116.745 182.818 cv
116.914 182.422 117.178 182.13 117.537 181.932 cv
117.895 181.734 118.282 181.63 118.706 181.63 cv
119.234 181.63 119.668 181.772 120.007 182.036 cv
120.347 182.3 120.563 182.686 120.658 183.177 cv
119.856 183.299 li
119.781 182.979 119.639 182.734 119.451 182.564 cv
119.253 182.394 119.017 182.309 118.744 182.309 cv
118.319 182.309 117.98 182.46 117.716 182.762 cv
117.452 183.064 117.329 183.535 117.329 184.176 cv
117.329 184.836 117.452 185.317 117.706 185.609 cv
117.952 185.911 118.282 186.053 118.696 186.053 cv
119.017 186.053 119.29 185.958 119.507 185.76 cv
119.724 185.562 119.866 185.251 119.922 184.836 cv
f
124.797 185.053 mo
125.655 185.157 li
125.514 185.666 125.259 186.053 124.901 186.326 cv
124.533 186.599 124.071 186.731 123.505 186.731 cv
122.789 186.731 122.213 186.515 121.799 186.081 cv
121.384 185.647 121.176 185.025 121.176 184.223 cv
121.176 183.403 121.384 182.762 121.808 182.309 cv
122.223 181.857 122.779 181.63 123.458 181.63 cv
124.109 181.63 124.646 181.857 125.061 182.3 cv
125.476 182.743 125.683 183.365 125.683 184.176 cv
125.683 184.233 125.674 184.299 125.674 184.393 cv
122.025 184.393 li
122.053 184.94 122.204 185.345 122.477 185.628 cv
122.751 185.911 123.09 186.053 123.505 186.053 cv
123.807 186.053 124.071 185.977 124.288 185.817 cv
124.495 185.666 124.665 185.411 124.797 185.053 cv
122.072 183.714 mo
124.806 183.714 li
124.769 183.299 124.665 182.998 124.495 182.79 cv
124.231 182.47 123.882 182.309 123.467 182.309 cv
123.081 182.309 122.76 182.441 122.506 182.696 cv
122.242 182.951 122.1 183.29 122.072 183.714 cv
f
129.313 180.829 mo
129.313 179.877 li
130.143 179.877 li
130.143 180.829 li
129.313 180.829 li
129.313 186.628 mo
129.313 181.734 li
130.143 181.734 li
130.143 186.628 li
129.313 186.628 li
f
134.575 186.628 mo
134.575 186.015 li
134.264 186.496 133.811 186.731 133.207 186.731 cv
132.811 186.731 132.453 186.628 132.133 186.411 cv
131.803 186.203 131.548 185.902 131.369 185.515 cv
131.19 185.138 131.105 184.695 131.105 184.186 cv
131.105 183.705 131.18 183.262 131.35 182.866 cv
131.51 182.47 131.755 182.158 132.076 181.951 cv
132.397 181.744 132.764 181.63 133.17 181.63 cv
133.462 181.63 133.726 181.696 133.962 181.819 cv
134.188 181.942 134.377 182.102 134.518 182.3 cv
134.518 179.877 li
135.348 179.877 li
135.348 186.628 li
134.575 186.628 li
131.963 184.186 mo
131.963 184.817 132.085 185.289 132.349 185.591 cv
132.613 185.902 132.925 186.053 133.292 186.053 cv
133.651 186.053 133.952 185.911 134.207 185.609 cv
134.462 185.317 134.594 184.865 134.594 184.261 cv
134.594 183.592 134.462 183.101 134.207 182.781 cv
133.943 182.47 133.632 182.309 133.255 182.309 cv
132.877 182.309 132.576 182.46 132.331 182.762 cv
132.085 183.064 131.963 183.545 131.963 184.186 cv
f
139.996 185.053 mo
140.854 185.157 li
140.713 185.666 140.458 186.053 140.1 186.326 cv
139.732 186.599 139.27 186.731 138.704 186.731 cv
137.988 186.731 137.413 186.515 136.998 186.081 cv
136.583 185.647 136.376 185.025 136.376 184.223 cv
136.376 183.403 136.583 182.762 137.007 182.309 cv
137.422 181.857 137.978 181.63 138.657 181.63 cv
139.308 181.63 139.845 181.857 140.26 182.3 cv
140.675 182.743 140.883 183.365 140.883 184.176 cv
140.883 184.233 140.873 184.299 140.873 184.393 cv
137.224 184.393 li
137.252 184.94 137.403 185.345 137.677 185.628 cv
137.95 185.911 138.29 186.053 138.704 186.053 cv
139.006 186.053 139.27 185.977 139.487 185.817 cv
139.695 185.666 139.864 185.411 139.996 185.053 cv
137.271 183.714 mo
140.006 183.714 li
139.968 183.299 139.864 182.998 139.695 182.79 cv
139.43 182.47 139.082 182.309 138.667 182.309 cv
138.28 182.309 137.96 182.441 137.705 182.696 cv
137.441 182.951 137.3 183.29 137.271 183.714 cv
f
141.891 186.628 mo
141.891 181.734 li
142.636 181.734 li
142.636 182.432 li
142.995 181.904 143.513 181.63 144.192 181.63 cv
144.484 181.63 144.758 181.687 145.003 181.791 cv
145.248 181.894 145.437 182.036 145.559 182.206 cv
145.682 182.375 145.767 182.583 145.814 182.818 cv
145.842 182.969 145.861 183.243 145.861 183.62 cv
145.861 186.628 li
145.031 186.628 li
145.031 183.658 li
145.031 183.318 144.994 183.073 144.937 182.903 cv
144.871 182.734 144.758 182.602 144.598 182.498 cv
144.428 182.404 144.239 182.347 144.022 182.347 cv
143.664 182.347 143.353 182.46 143.098 182.686 cv
142.844 182.913 142.721 183.337 142.721 183.959 cv
142.721 186.628 li
141.891 186.628 li
f
148.944 185.883 mo
149.067 186.618 li
148.822 186.656 148.614 186.684 148.435 186.684 cv
148.133 186.684 147.898 186.637 147.737 186.552 cv
147.568 186.458 147.454 186.335 147.388 186.175 cv
147.313 186.024 147.285 185.694 147.285 185.195 cv
147.285 182.385 li
146.681 182.385 li
146.681 181.734 li
147.285 181.734 li
147.285 180.527 li
148.105 180.028 li
148.105 181.734 li
148.944 181.734 li
148.944 182.385 li
148.105 182.385 li
148.105 185.242 li
148.105 185.487 148.114 185.638 148.152 185.704 cv
148.294 185.864 li
148.36 185.902 148.454 185.921 148.576 185.921 cv
148.671 185.921 148.793 185.911 148.944 185.883 cv
f
149.755 180.829 mo
149.755 179.877 li
150.585 179.877 li
150.585 180.829 li
149.755 180.829 li
149.755 186.628 mo
149.755 181.734 li
150.585 181.734 li
150.585 186.628 li
149.755 186.628 li
f
153.659 185.883 mo
153.781 186.618 li
153.536 186.656 153.329 186.684 153.149 186.684 cv
152.848 186.684 152.612 186.637 152.452 186.552 cv
152.282 186.458 152.169 186.335 152.103 186.175 cv
152.027 186.024 151.999 185.694 151.999 185.195 cv
151.999 182.385 li
151.396 182.385 li
151.396 181.734 li
151.999 181.734 li
151.999 180.527 li
152.819 180.028 li
152.819 181.734 li
153.659 181.734 li
153.659 182.385 li
152.819 182.385 li
152.819 185.242 li
152.819 185.487 152.829 185.638 152.867 185.704 cv
153.008 185.864 li
153.074 185.902 153.168 185.921 153.291 185.921 cv
153.385 185.921 153.508 185.911 153.659 185.883 cv
f
154.432 188.504 mo
154.338 187.721 li
154.517 187.769 154.677 187.797 154.818 187.797 cv
154.998 187.797 155.139 187.759 155.252 187.703 cv
155.365 187.637 155.45 187.552 155.526 187.448 cv
155.582 187.363 155.667 187.156 155.78 186.826 cv
155.856 186.628 li
153.998 181.734 li
154.894 181.734 li
155.912 184.572 li
156.044 184.931 156.157 185.308 156.261 185.704 cv
156.355 185.327 156.468 184.949 156.6 184.591 cv
157.647 181.734 li
158.477 181.734 li
156.619 186.703 li
156.412 187.231 156.261 187.599 156.157 187.806 cv
156.006 188.08 155.837 188.278 155.648 188.41 cv
155.46 188.532 155.233 188.598 154.969 188.598 cv
154.8 188.598 154.62 188.561 154.432 188.504 cv
f
163.389 188.598 mo
162.927 188.023 162.541 187.354 162.229 186.59 cv
161.909 185.817 161.758 185.015 161.758 184.186 cv
161.758 183.46 161.871 182.762 162.107 182.083 cv
162.38 181.31 162.805 180.537 163.389 179.764 cv
163.983 179.764 li
163.606 180.405 163.361 180.867 163.248 181.131 cv
163.059 181.555 162.908 181.998 162.805 182.46 cv
162.673 183.035 162.607 183.611 162.607 184.186 cv
162.607 185.666 163.059 187.127 163.983 188.598 cv
163.389 188.598 li
f
164.869 181.498 mo
164.869 181.018 164.983 180.612 165.228 180.273 cv
165.473 179.933 165.822 179.764 166.284 179.764 cv
166.708 179.764 167.057 179.914 167.34 180.216 cv
167.613 180.518 167.755 180.961 167.755 181.546 cv
167.755 182.121 167.613 182.564 167.33 182.866 cv
167.048 183.177 166.708 183.328 166.293 183.328 cv
165.888 183.328 165.548 183.177 165.275 182.875 cv
165.001 182.573 164.869 182.121 164.869 181.498 cv
166.312 180.339 mo
166.105 180.339 165.926 180.433 165.794 180.603 cv
165.661 180.782 165.595 181.112 165.595 181.583 cv
165.595 182.017 165.661 182.328 165.803 182.498 cv
165.935 182.677 166.105 182.762 166.312 182.762 cv
166.52 182.762 166.689 182.677 166.831 182.498 cv
166.963 182.319 167.038 181.989 167.038 181.517 cv
167.038 181.084 166.963 180.782 166.831 180.603 cv
166.689 180.433 166.52 180.339 166.312 180.339 cv
166.312 186.863 mo
170.008 179.764 li
170.678 179.764 li
167 186.863 li
166.312 186.863 li
169.235 185.044 mo
169.235 184.563 169.348 184.157 169.593 183.818 cv
169.838 183.479 170.187 183.309 170.659 183.309 cv
171.074 183.309 171.423 183.46 171.705 183.761 cv
171.988 184.063 172.13 184.506 172.13 185.091 cv
172.13 185.666 171.988 186.109 171.705 186.411 cv
171.423 186.713 171.074 186.863 170.659 186.863 cv
170.244 186.863 169.904 186.713 169.64 186.411 cv
169.367 186.109 169.235 185.657 169.235 185.044 cv
170.678 183.875 mo
170.47 183.875 170.291 183.969 170.159 184.148 cv
170.027 184.327 169.961 184.657 169.961 185.129 cv
169.961 185.562 170.027 185.864 170.168 186.043 cv
170.3 186.222 170.47 186.307 170.678 186.307 cv
170.885 186.307 171.064 186.222 171.196 186.043 cv
171.328 185.864 171.404 185.534 171.404 185.063 cv
171.404 184.629 171.328 184.327 171.196 184.148 cv
171.055 183.969 170.885 183.875 170.678 183.875 cv
f
173.874 188.598 mo
173.28 188.598 li
174.195 187.127 174.657 185.666 174.657 184.186 cv
174.657 183.611 174.591 183.035 174.459 182.47 cv
174.346 182.017 174.204 181.574 174.016 181.14 cv
173.893 180.876 173.648 180.414 173.28 179.764 cv
173.874 179.764 li
174.44 180.537 174.864 181.31 175.147 182.083 cv
175.383 182.762 175.505 183.46 175.505 184.186 cv
175.505 185.015 175.345 185.817 175.024 186.59 cv
174.704 187.354 174.327 188.023 173.874 188.598 cv
f
gsave
20.8048 160.404 mo
239.487 160.404 li
239.487 18.7246 li
20.8048 18.7246 li
20.8048 160.404 li
clp
210.047 160.275 mo
208.475 160.275 li
206.857 160.275 li
205.238 160.275 li
203.619 160.275 li
202.001 160.275 li
200.382 160.275 li
198.764 160.275 li
197.145 160.275 li
195.527 160.275 li
193.908 160.275 li
192.289 160.275 li
190.671 160.275 li
189.052 160.275 li
187.434 160.275 li
185.815 160.275 li
184.196 160.275 li
182.578 160.275 li
180.959 160.275 li
179.341 160.275 li
177.722 160.275 li
176.103 160.275 li
174.485 160.275 li
172.866 160.275 li
171.248 160.275 li
169.629 160.275 li
168.01 160.275 li
166.392 160.275 li
164.773 160.275 li
163.155 160.275 li
161.536 160.275 li
159.918 160.275 li
158.299 160.275 li
156.68 160.275 li
155.062 160.275 li
153.443 160.275 li
151.825 160.275 li
150.206 160.275 li
148.587 160.275 li
146.969 160.275 li
145.35 160.275 li
143.732 160.275 li
142.113 160.275 li
140.494 160.275 li
138.876 160.275 li
137.257 160.275 li
135.639 160.275 li
134.02 160.275 li
132.401 160.275 li
130.783 160.275 li
129.164 160.275 li
127.546 160.275 li
125.927 160.275 li
124.309 160.275 li
122.69 160.275 li
121.071 160.275 li
119.453 160.275 li
117.834 160.275 li
116.216 160.275 li
114.597 160.275 li
112.978 160.275 li
111.36 160.275 li
109.741 160.275 li
108.123 160.275 li
106.504 160.275 li
104.885 160.275 li
103.267 160.275 li
101.648 160.275 li
100.03 160.275 li
98.4111 160.275 li
96.7925 160.275 li
95.1739 160.275 li
93.5553 160.275 li
91.9367 160.275 li
90.3182 160.275 li
88.6995 160.275 li
87.0809 160.275 li
85.8822 160.275 li
87.0912 160.178 li
87.0916 160.178 li
88.7071 160.044 li
90.3191 159.985 li
91.934 160.019 li
91.933 160.019 li
93.5516 160.066 li
93.5554 160.066 li
95.1738 160.066 li
96.7901 160.067 li
98.4055 160.127 li
100.024 160.204 li
100.027 160.204 li
101.645 160.239 li
101.648 160.239 li
103.266 160.247 li
103.266 160.247 li
104.884 160.262 li
104.885 160.262 li
106.503 160.27 li
106.508 160.27 li
108.127 160.216 li
108.134 160.216 li
109.753 160.068 li
109.754 160.068 li
111.368 159.913 li
112.979 159.862 li
114.594 159.896 li
114.593 159.896 li
116.212 159.94 li
117.83 159.983 li
119.449 160.032 li
119.452 160.032 li
121.071 160.037 li
121.076 160.037 li
122.695 159.974 li
122.696 159.974 li
124.313 159.899 li
125.93 159.856 li
125.933 159.856 li
127.552 159.783 li
127.563 159.782 li
129.181 159.565 li
129.196 159.562 li
130.815 159.149 li
130.826 159.145 li
132.444 158.571 li
132.448 158.57 li
134.067 157.942 li
134.069 157.941 li
135.688 157.275 li
135.698 157.27 li
137.317 156.424 li
137.326 156.419 li
138.945 155.388 li
138.949 155.385 li
140.567 154.268 li
140.575 154.262 li
142.194 152.961 li
142.208 152.947 li
143.827 151.16 li
143.841 151.142 li
145.459 148.556 li
145.464 148.547 li
147.082 145.416 li
148.694 142.588 li
150.304 140.545 li
151.92 138.76 li
151.928 138.751 li
153.545 136.579 li
155.143 134.589 li
156.685 133.874 li
158.23 134.458 li
159.82 135.917 li
161.426 138.243 li
163.041 141.258 li
163.044 141.263 li
164.663 143.997 li
164.684 144.024 li
166.302 145.603 li
166.35 145.633 li
167.969 146.183 li
168.024 146.189 li
169.642 146.024 li
169.718 145.988 li
171.337 144.433 li
171.368 144.386 li
172.987 140.088 li
172.992 140.067 li
174.611 131.734 li
174.612 131.725 li
176.231 118.786 li
176.231 118.782 li
177.85 101.414 li
177.85 101.411 li
179.469 79.8517 li
179.469 79.851 li
181.087 56.5715 li
182.705 38.5437 li
184.279 30.9978 li
185.696 32.1721 li
187.306 41.412 li
188.924 58.0054 li
190.543 78.5495 li
192.161 99.298 li
192.161 99.2992 li
193.78 117.89 li
193.78 117.893 li
195.399 132.538 li
195.4 132.545 li
197.018 142.564 li
197.02 142.575 li
198.639 149.002 li
198.644 149.018 li
200.263 153.145 li
200.273 153.166 li
201.892 155.762 li
201.908 155.783 li
203.527 157.473 li
203.542 157.487 li
205.161 158.709 li
205.179 158.72 li
206.798 159.558 li
206.821 159.568 li
208.439 160.04 li
208.457 160.044 li
210.047 160.275 li
75.304 160.275 mo
74.1322 160.275 li
72.5137 160.275 li
70.8951 160.275 li
69.2764 160.275 li
67.6579 160.275 li
66.0393 160.275 li
64.4207 160.275 li
62.8021 160.275 li
61.1835 160.275 li
59.5649 160.275 li
57.9463 160.275 li
56.3277 160.275 li
55.2011 160.275 li
56.3308 160.239 li
57.9485 160.212 li
57.9496 160.212 li
59.5683 160.17 li
59.5691 160.17 li
61.187 160.117 li
62.8047 160.084 li
62.804 160.084 li
64.4225 160.06 li
64.4215 160.06 li
66.0384 160.05 li
67.6554 160.081 li
67.6548 160.081 li
69.2733 160.12 li
69.2747 160.12 li
70.8933 160.142 li
70.8925 160.142 li
72.5103 160.174 li
74.1281 160.226 li
74.1269 160.226 li
75.304 160.275 li
25.211 160.275 mo
23.9559 160.275 li
22.3373 160.275 li
20.8048 160.275 li
20.8048 159.333 li
22.3109 159.512 li
23.9185 160.002 li
23.9293 160.004 li
25.211 160.275 li
/1 
[/DeviceCMYK] /CSA add_res
0 0 0 .287602 cmyk
f
219.934 160.404 mo
20.8048 160.404 li
20.8048 160.275 li
22.3373 160.275 li
23.9559 160.275 li
25.211 160.275 li
23.9293 160.004 li
23.9185 160.002 li
22.3109 159.512 li
20.8048 159.333 li
20.8048 159.074 li
22.3525 159.258 li
22.3748 159.263 li
23.988 159.754 li
25.5931 160.093 li
27.1998 160.225 li
28.8132 160.261 li
30.4297 160.265 li
32.0463 160.245 li
33.6639 160.2 li
33.6648 160.2 li
35.2834 160.166 li
35.2871 160.166 li
36.9057 160.18 li
36.9066 160.18 li
38.5233 160.205 li
40.1386 160.186 li
41.7553 160.122 li
41.7565 160.122 li
43.3751 160.073 li
43.3805 160.073 li
44.9992 160.092 li
45.0018 160.092 li
46.6195 160.146 li
48.2359 160.175 li
49.8525 160.174 li
51.4691 160.152 li
53.0859 160.102 li
54.7037 160.034 li
54.7051 160.034 li
56.3237 159.982 li
56.3255 159.982 li
57.9441 159.955 li
57.943 159.955 li
59.5616 159.913 li
59.5607 159.913 li
61.1794 159.86 li
61.1809 159.86 li
62.7995 159.827 li
62.8002 159.827 li
64.4188 159.803 li
64.4199 159.803 li
66.0385 159.793 li
66.0417 159.793 li
67.6603 159.824 li
67.661 159.824 li
69.2791 159.863 li
70.8967 159.885 li
70.8976 159.885 li
72.5162 159.917 li
72.5177 159.917 li
74.1363 159.969 li
74.1376 159.969 li
75.7562 160.037 li
75.7565 160.037 li
77.3743 160.108 li
78.99 160.153 li
80.6065 160.166 li
82.2239 160.161 li
83.8394 160.131 li
85.4541 160.052 li
87.0706 159.922 li
87.0703 159.922 li
88.6889 159.788 li
88.6948 159.787 li
90.3134 159.728 li
90.3209 159.728 li
91.9395 159.762 li
91.9404 159.762 li
93.5572 159.809 li
95.1739 159.808 li
96.7926 159.81 li
96.7973 159.81 li
98.4158 159.87 li
98.4172 159.87 li
100.034 159.947 li
101.65 159.982 li
103.267 159.99 li
103.268 159.99 li
104.887 160.005 li
104.886 160.005 li
106.502 160.013 li
108.115 159.959 li
109.73 159.812 li
109.729 159.812 li
111.348 159.656 li
111.356 159.656 li
112.974 159.605 li
112.981 159.605 li
114.6 159.639 li
114.6 159.639 li
116.219 159.683 li
117.838 159.726 li
119.455 159.775 li
121.069 159.78 li
122.685 159.717 li
122.684 159.717 li
124.303 159.642 li
124.305 159.642 li
125.923 159.599 li
127.534 159.526 li
129.14 159.311 li
130.745 158.901 li
132.357 158.33 li
133.972 157.703 li
135.584 157.039 li
137.193 156.199 li
138.805 155.172 li
140.418 154.059 li
142.025 152.767 li
143.629 150.995 li
145.238 148.425 li
146.855 145.295 li
146.857 145.291 li
148.476 142.452 li
148.486 142.436 li
150.105 140.382 li
150.111 140.376 li
151.725 138.593 li
153.34 136.423 li
153.343 136.42 li
154.961 134.404 li
155.008 134.368 li
156.626 133.618 li
156.726 133.614 li
158.344 134.226 li
158.386 134.251 li
160.004 135.737 li
160.023 135.759 li
161.642 138.103 li
161.649 138.115 li
163.267 141.134 li
164.875 143.852 li
166.461 145.398 li
168.025 145.931 li
169.572 145.772 li
171.138 144.268 li
172.742 140.008 li
174.358 131.689 li
175.976 118.756 li
177.594 101.391 li
179.212 79.8324 li
179.212 79.8332 li
180.831 56.5529 li
180.831 56.5503 li
182.45 38.5133 li
182.452 38.4985 li
184.071 30.7364 li
184.154 30.6413 li
184.278 30.6637 li
185.897 32.0043 li
185.942 32.0813 li
187.56 41.373 li
187.562 41.3826 li
189.18 57.9811 li
189.18 57.9834 li
190.799 78.5294 li
192.418 99.278 li
192.417 99.2768 li
194.036 117.867 li
195.654 132.507 li
197.271 142.518 li
198.886 148.932 li
200.498 153.04 li
202.103 155.615 li
203.705 157.288 li
205.307 158.497 li
206.905 159.324 li
208.503 159.791 li
210.108 160.024 li
211.72 160.146 li
213.335 160.217 li
214.952 160.254 li
216.569 160.27 li
216.569 160.27 li
218.187 160.274 li
219.805 160.274 li
219.896 160.312 li
219.934 160.403 li
219.934 160.404 li
219.934 160.404 li
85.8822 160.275 mo
87.0809 160.275 li
88.6995 160.275 li
90.3182 160.275 li
91.9367 160.275 li
93.5553 160.275 li
95.1739 160.275 li
96.7925 160.275 li
98.4111 160.275 li
100.03 160.275 li
101.648 160.275 li
103.267 160.275 li
104.885 160.275 li
106.504 160.275 li
108.123 160.275 li
109.741 160.275 li
111.36 160.275 li
112.978 160.275 li
114.597 160.275 li
116.216 160.275 li
117.834 160.275 li
119.453 160.275 li
121.071 160.275 li
122.69 160.275 li
124.309 160.275 li
125.927 160.275 li
127.546 160.275 li
129.164 160.275 li
130.783 160.275 li
132.401 160.275 li
134.02 160.275 li
135.639 160.275 li
137.257 160.275 li
138.876 160.275 li
140.494 160.275 li
142.113 160.275 li
143.732 160.275 li
145.35 160.275 li
146.969 160.275 li
148.587 160.275 li
150.206 160.275 li
151.825 160.275 li
153.443 160.275 li
155.062 160.275 li
156.68 160.275 li
158.299 160.275 li
159.918 160.275 li
161.536 160.275 li
163.155 160.275 li
164.773 160.275 li
166.392 160.275 li
168.01 160.275 li
169.629 160.275 li
171.248 160.275 li
172.866 160.275 li
174.485 160.275 li
176.103 160.275 li
177.722 160.275 li
179.341 160.275 li
180.959 160.275 li
182.578 160.275 li
184.196 160.275 li
185.815 160.275 li
187.434 160.275 li
189.052 160.275 li
190.671 160.275 li
192.289 160.275 li
193.908 160.275 li
195.527 160.275 li
197.145 160.275 li
198.764 160.275 li
200.382 160.275 li
202.001 160.275 li
203.619 160.275 li
205.238 160.275 li
206.857 160.275 li
208.475 160.275 li
210.047 160.275 li
208.457 160.044 li
208.439 160.04 li
206.821 159.568 li
206.798 159.558 li
205.179 158.72 li
205.161 158.709 li
203.542 157.487 li
203.527 157.473 li
201.908 155.783 li
201.892 155.762 li
200.273 153.166 li
200.263 153.145 li
198.644 149.018 li
198.639 149.002 li
197.02 142.575 li
197.018 142.564 li
195.4 132.545 li
195.399 132.538 li
193.78 117.893 li
193.78 117.89 li
192.161 99.2992 li
192.161 99.298 li
190.543 78.5495 li
188.924 58.0054 li
187.306 41.412 li
185.696 32.1721 li
184.279 30.9978 li
182.705 38.5437 li
181.087 56.5715 li
179.469 79.851 li
179.469 79.8517 li
177.85 101.411 li
177.85 101.414 li
176.231 118.782 li
176.231 118.786 li
174.612 131.725 li
174.611 131.734 li
172.992 140.067 li
172.987 140.088 li
171.368 144.386 li
171.337 144.433 li
169.718 145.988 li
169.642 146.024 li
168.024 146.189 li
167.969 146.183 li
166.35 145.633 li
166.302 145.603 li
164.684 144.024 li
164.663 143.997 li
163.044 141.263 li
163.041 141.258 li
161.426 138.243 li
159.82 135.917 li
158.23 134.458 li
156.685 133.874 li
155.143 134.589 li
153.545 136.579 li
151.928 138.751 li
151.92 138.76 li
150.304 140.545 li
148.694 142.588 li
147.082 145.416 li
145.464 148.547 li
145.459 148.556 li
143.841 151.142 li
143.827 151.16 li
142.208 152.947 li
142.194 152.961 li
140.575 154.262 li
140.567 154.268 li
138.949 155.385 li
138.945 155.388 li
137.326 156.419 li
137.317 156.424 li
135.698 157.27 li
135.688 157.275 li
134.069 157.941 li
134.067 157.942 li
132.448 158.57 li
132.444 158.571 li
130.826 159.145 li
130.815 159.149 li
129.196 159.562 li
129.181 159.565 li
127.563 159.782 li
127.552 159.783 li
125.933 159.856 li
125.93 159.856 li
124.313 159.899 li
122.696 159.974 li
122.695 159.974 li
121.076 160.037 li
121.071 160.037 li
119.452 160.032 li
119.449 160.032 li
117.83 159.983 li
116.212 159.94 li
114.593 159.896 li
114.594 159.896 li
112.979 159.862 li
111.368 159.913 li
109.754 160.068 li
109.753 160.068 li
108.134 160.216 li
108.127 160.216 li
106.508 160.27 li
106.503 160.27 li
104.885 160.262 li
104.884 160.262 li
103.266 160.247 li
103.266 160.247 li
101.648 160.239 li
101.645 160.239 li
100.027 160.204 li
100.024 160.204 li
98.4055 160.127 li
96.7901 160.067 li
95.1738 160.066 li
93.5554 160.066 li
93.5516 160.066 li
91.933 160.019 li
91.934 160.019 li
90.3191 159.985 li
88.7071 160.044 li
87.0916 160.178 li
87.0912 160.178 li
85.8822 160.275 li
55.2011 160.275 mo
56.3277 160.275 li
57.9463 160.275 li
59.5649 160.275 li
61.1835 160.275 li
62.8021 160.275 li
64.4207 160.275 li
66.0393 160.275 li
67.6579 160.275 li
69.2764 160.275 li
70.8951 160.275 li
72.5137 160.275 li
74.1322 160.275 li
75.304 160.275 li
74.1269 160.226 li
74.1281 160.226 li
72.5103 160.174 li
70.8925 160.142 li
70.8933 160.142 li
69.2747 160.12 li
69.2733 160.12 li
67.6548 160.081 li
67.6554 160.081 li
66.0384 160.05 li
64.4215 160.06 li
64.4225 160.06 li
62.804 160.084 li
62.8047 160.084 li
61.187 160.117 li
59.5691 160.17 li
59.5683 160.17 li
57.9496 160.212 li
57.9485 160.212 li
56.3308 160.239 li
55.2011 160.275 li
f
grestore
gsave
20.8048 160.404 mo
239.487 160.404 li
239.487 18.7246 li
20.8048 18.7246 li
20.8048 160.404 li
clp
1.50004 lw
1 lc
219.805 160.403 mo
218.187 160.403 li
216.568 160.398 li
214.95 160.383 li
213.331 160.345 li
211.712 160.275 li
210.094 160.152 li
208.475 159.917 li
206.857 159.444 li
205.238 158.606 li
203.619 157.384 li
202.001 155.694 li
200.382 153.098 li
198.764 148.971 li
197.145 142.544 li
195.527 132.524 li
193.908 117.879 li
192.289 99.288 li
190.671 78.5395 li
189.052 57.9935 li
187.434 41.395 li
185.815 32.1033 li
184.196 30.7627 li
182.578 38.5247 li
180.959 56.5618 li
179.341 79.8421 li
177.722 101.402 li
176.103 118.77 li
174.485 131.709 li
172.866 140.043 li
171.248 144.34 li
169.629 145.896 li
168.01 146.061 li
166.392 145.511 li
164.773 143.932 li
163.155 141.197 li
161.536 138.176 li
159.918 135.832 li
158.299 134.346 li
156.68 133.735 li
155.062 134.485 li
153.443 136.5 li
151.825 138.674 li
150.206 140.462 li
148.587 142.516 li
146.969 145.354 li
145.35 148.488 li
143.732 151.073 li
142.113 152.86 li
140.494 154.162 li
138.876 155.279 li
137.257 156.31 li
135.639 157.156 li
134.02 157.822 li
132.402 158.45 li
130.783 159.024 li
129.164 159.437 li
127.546 159.655 li
125.927 159.728 li
124.309 159.77 li
122.69 159.845 li
121.071 159.908 li
119.453 159.903 li
117.834 159.855 li
116.216 159.812 li
114.597 159.768 li
112.978 159.733 li
111.36 159.784 li
109.741 159.94 li
108.123 160.088 li
106.504 160.141 li
104.885 160.133 li
103.267 160.119 li
101.648 160.11 li
100.03 160.076 li
98.4111 159.999 li
96.7925 159.938 li
95.1739 159.937 li
93.5553 159.938 li
91.9367 159.891 li
90.3181 159.856 li
88.6995 159.916 li
87.0809 160.05 li
85.4624 160.18 li
83.8438 160.259 li
82.2252 160.289 li
80.6066 160.294 li
78.988 160.282 li
77.3694 160.237 li
75.7508 160.165 li
74.1322 160.097 li
72.5136 160.045 li
70.895 160.013 li
69.2765 159.992 li
67.6579 159.953 li
66.0393 159.922 li
64.4207 159.932 li
62.8021 159.956 li
61.1835 159.989 li
59.5649 160.041 li
57.9463 160.083 li
56.3277 160.111 li
54.7091 160.162 li
53.0906 160.231 li
51.472 160.281 li
49.8534 160.303 li
48.2348 160.303 li
46.6162 160.274 li
44.9976 160.221 li
43.379 160.202 li
41.7604 160.25 li
40.1418 160.314 li
38.5232 160.333 li
36.9046 160.309 li
35.2861 160.295 li
33.6675 160.328 li
32.0489 160.373 li
30.4303 160.394 li
28.8117 160.39 li
27.1931 160.353 li
25.5745 160.221 li
23.9559 159.879 li
22.3373 159.386 li
20.7187 159.194 li
1 /0 /CSD get_res sepcs
1 sep
@
grestore
1.33932 lw
2 lc
0 lj
20.8048 18.7246 mo
239.487 18.7246 li
@
239.487 160.404 mo
239.487 18.7246 li
@
20.8048 160.404 mo
239.487 160.404 li
@
20.8048 160.404 mo
20.8048 18.7246 li
@
239.487 160.404 mo
239.487 160.404 li
f
.857168 lw
0 lc
1 lj
239.487 160.404 mo
239.487 160.404 li
@
245.847 159.596 mo
245.847 158.876 245.916 158.293 246.07 157.848 cv
246.216 157.402 246.438 157.059 246.73 156.819 cv
247.021 156.579 247.398 156.459 247.844 156.459 cv
248.17 156.459 248.461 156.528 248.71 156.665 cv
248.95 156.802 249.156 156.99 249.319 157.239 cv
249.481 157.488 249.61 157.788 249.704 158.148 cv
249.79 158.508 249.841 158.996 249.841 159.596 cv
249.841 160.316 249.764 160.899 249.619 161.345 cv
249.473 161.791 249.25 162.125 248.959 162.365 cv
248.667 162.605 248.29 162.716 247.844 162.716 cv
247.244 162.716 246.781 162.511 246.447 162.091 cv
246.044 161.585 245.847 160.753 245.847 159.596 cv
246.618 159.596 mo
246.618 160.608 246.73 161.276 246.97 161.611 cv
247.201 161.945 247.493 162.108 247.844 162.108 cv
248.187 162.108 248.47 161.945 248.71 161.611 cv
248.95 161.276 249.07 160.608 249.07 159.596 cv
249.07 158.585 248.95 157.916 248.71 157.582 cv
248.47 157.256 248.178 157.085 247.836 157.085 cv
247.484 157.085 247.21 157.23 247.004 157.522 cv
246.747 157.899 246.618 158.593 246.618 159.596 cv
f
251.033 162.622 mo
251.033 161.765 li
251.89 161.765 li
251.89 162.622 li
251.033 162.622 li
f
252.996 159.596 mo
252.996 158.876 253.064 158.293 253.219 157.848 cv
253.364 157.402 253.587 157.059 253.879 156.819 cv
254.17 156.579 254.547 156.459 254.993 156.459 cv
255.319 156.459 255.61 156.528 255.859 156.665 cv
256.099 156.802 256.304 156.99 256.467 157.239 cv
256.63 157.488 256.759 157.788 256.853 158.148 cv
256.939 158.508 256.99 158.996 256.99 159.596 cv
256.99 160.316 256.913 160.899 256.767 161.345 cv
256.622 161.791 256.399 162.125 256.107 162.365 cv
255.816 162.605 255.439 162.716 254.993 162.716 cv
254.393 162.716 253.93 162.511 253.596 162.091 cv
253.193 161.585 252.996 160.753 252.996 159.596 cv
253.767 159.596 mo
253.767 160.608 253.879 161.276 254.119 161.611 cv
254.35 161.945 254.642 162.108 254.993 162.108 cv
255.336 162.108 255.619 161.945 255.859 161.611 cv
256.099 161.276 256.219 160.608 256.219 159.596 cv
256.219 158.585 256.099 157.916 255.859 157.582 cv
255.619 157.256 255.327 157.085 254.984 157.085 cv
254.633 157.085 254.359 157.23 254.153 157.522 cv
253.896 157.899 253.767 158.593 253.767 159.596 cv
f
239.487 132.068 mo
239.487 132.068 li
f
239.487 132.068 mo
239.487 132.068 li
@
245.847 131.26 mo
245.847 130.54 245.916 129.957 246.07 129.512 cv
246.216 129.066 246.438 128.723 246.73 128.483 cv
247.021 128.243 247.398 128.123 247.844 128.123 cv
248.17 128.123 248.461 128.192 248.71 128.329 cv
248.95 128.466 249.156 128.655 249.319 128.903 cv
249.481 129.152 249.61 129.452 249.704 129.812 cv
249.79 130.172 249.841 130.66 249.841 131.26 cv
249.841 131.98 249.764 132.563 249.619 133.009 cv
249.473 133.455 249.25 133.789 248.959 134.029 cv
248.667 134.269 248.29 134.38 247.844 134.38 cv
247.244 134.38 246.781 134.175 246.447 133.755 cv
246.044 133.249 245.847 132.418 245.847 131.26 cv
246.618 131.26 mo
246.618 132.272 246.73 132.94 246.97 133.275 cv
247.201 133.609 247.493 133.772 247.844 133.772 cv
248.187 133.772 248.47 133.609 248.71 133.275 cv
248.95 132.94 249.07 132.272 249.07 131.26 cv
249.07 130.249 248.95 129.58 248.71 129.246 cv
248.47 128.92 248.178 128.749 247.836 128.749 cv
247.484 128.749 247.21 128.895 247.004 129.186 cv
246.747 129.563 246.618 130.257 246.618 131.26 cv
f
251.033 134.286 mo
251.033 133.429 li
251.89 133.429 li
251.89 134.286 li
251.033 134.286 li
f
256.947 133.566 mo
256.947 134.286 li
252.893 134.286 li
252.884 134.106 252.919 133.935 252.987 133.763 cv
253.09 133.489 253.253 133.223 253.476 132.949 cv
253.699 132.683 254.033 132.375 254.462 132.015 cv
255.13 131.475 255.576 131.046 255.816 130.72 cv
256.047 130.403 256.167 130.103 256.167 129.812 cv
256.167 129.52 256.056 129.263 255.842 129.057 cv
255.627 128.852 255.353 128.749 255.01 128.749 cv
254.65 128.749 254.359 128.86 254.144 129.075 cv
253.922 129.297 253.81 129.597 253.81 129.983 cv
253.039 129.897 li
253.09 129.323 253.287 128.886 253.63 128.577 cv
253.973 128.277 254.444 128.123 255.027 128.123 cv
255.61 128.123 256.082 128.295 256.424 128.62 cv
256.767 128.946 256.939 129.349 256.939 129.829 cv
256.939 130.077 256.887 130.317 256.784 130.557 cv
256.682 130.798 256.519 131.046 256.287 131.303 cv
256.056 131.569 255.67 131.929 255.13 132.383 cv
254.676 132.76 254.384 133.018 254.256 133.155 cv
254.127 133.292 254.024 133.429 253.939 133.566 cv
256.947 133.566 li
f
239.487 103.732 mo
239.487 103.732 li
f
239.487 103.732 mo
239.487 103.732 li
@
245.847 102.925 mo
245.847 102.205 245.916 101.622 246.07 101.176 cv
246.216 100.73 246.438 100.387 246.73 100.147 cv
247.021 99.9073 247.398 99.7873 247.844 99.7873 cv
248.17 99.7873 248.461 99.8559 248.71 99.993 cv
248.95 100.13 249.156 100.319 249.319 100.567 cv
249.481 100.816 249.61 101.116 249.704 101.476 cv
249.79 101.836 249.841 102.325 249.841 102.925 cv
249.841 103.645 249.764 104.227 249.619 104.673 cv
249.473 105.119 249.25 105.453 248.959 105.693 cv
248.667 105.933 248.29 106.045 247.844 106.045 cv
247.244 106.045 246.781 105.839 246.447 105.419 cv
246.044 104.913 245.847 104.082 245.847 102.925 cv
246.618 102.925 mo
246.618 103.936 246.73 104.605 246.97 104.939 cv
247.201 105.273 247.493 105.436 247.844 105.436 cv
248.187 105.436 248.47 105.273 248.71 104.939 cv
248.95 104.605 249.07 103.936 249.07 102.925 cv
249.07 101.913 248.95 101.244 248.71 100.91 cv
248.47 100.584 248.178 100.413 247.836 100.413 cv
247.484 100.413 247.21 100.559 247.004 100.85 cv
246.747 101.227 246.618 101.922 246.618 102.925 cv
f
251.033 105.95 mo
251.033 105.093 li
251.89 105.093 li
251.89 105.95 li
251.033 105.95 li
f
255.404 105.95 mo
255.404 104.485 li
252.747 104.485 li
252.747 103.79 li
255.542 99.813 li
256.159 99.813 li
256.159 103.79 li
256.99 103.79 li
256.99 104.485 li
256.159 104.485 li
256.159 105.95 li
255.404 105.95 li
255.404 103.79 mo
255.404 101.022 li
253.484 103.79 li
255.404 103.79 li
f
239.487 75.3963 mo
239.487 75.3963 li
f
239.487 75.3963 mo
239.487 75.3963 li
@
245.847 74.5887 mo
245.847 73.8687 245.916 73.2858 246.07 72.8401 cv
246.216 72.3944 246.438 72.0515 246.73 71.8115 cv
247.021 71.5715 247.398 71.4515 247.844 71.4515 cv
248.17 71.4515 248.461 71.5201 248.71 71.6572 cv
248.95 71.7943 249.156 71.9829 249.319 72.2315 cv
249.481 72.4801 249.61 72.7801 249.704 73.1401 cv
249.79 73.5001 249.841 73.9887 249.841 74.5887 cv
249.841 75.3087 249.764 75.8916 249.619 76.3373 cv
249.473 76.7831 249.25 77.1174 248.959 77.3574 cv
248.667 77.5974 248.29 77.7088 247.844 77.7088 cv
247.244 77.7088 246.781 77.5031 246.447 77.0831 cv
246.044 76.5773 245.847 75.7459 245.847 74.5887 cv
246.618 74.5887 mo
246.618 75.6002 246.73 76.2688 246.97 76.6031 cv
247.201 76.9374 247.493 77.1002 247.844 77.1002 cv
248.187 77.1002 248.47 76.9374 248.71 76.6031 cv
248.95 76.2688 249.07 75.6002 249.07 74.5887 cv
249.07 73.5773 248.95 72.9087 248.71 72.5744 cv
248.47 72.2486 248.178 72.0772 247.836 72.0772 cv
247.484 72.0772 247.21 72.2229 247.004 72.5144 cv
246.747 72.8915 246.618 73.5858 246.618 74.5887 cv
f
251.033 77.6145 mo
251.033 76.7573 li
251.89 76.7573 li
251.89 77.6145 li
251.033 77.6145 li
f
256.904 72.9772 mo
256.15 73.0372 li
256.082 72.7458 255.987 72.5315 255.867 72.3944 cv
255.662 72.1886 255.404 72.0772 255.113 72.0772 cv
254.873 72.0772 254.659 72.1458 254.479 72.2744 cv
254.239 72.4458 254.059 72.7029 253.922 73.0287 cv
253.784 73.363 253.707 73.8344 253.707 74.4516 cv
253.887 74.1773 254.11 73.9801 254.376 73.843 cv
254.633 73.7058 254.907 73.6373 255.199 73.6373 cv
255.696 73.6373 256.124 73.8258 256.476 74.1944 cv
256.827 74.563 257.007 75.043 257.007 75.6259 cv
257.007 76.0116 256.922 76.3716 256.759 76.6973 cv
256.587 77.0316 256.364 77.2802 256.073 77.4517 cv
255.782 77.6231 255.456 77.7088 255.087 77.7088 cv
254.453 77.7088 253.947 77.4859 253.553 77.0231 cv
253.159 76.5688 252.961 75.8059 252.961 74.743 cv
252.961 73.5601 253.176 72.7029 253.613 72.1544 cv
253.99 71.6915 254.504 71.4515 255.156 71.4515 cv
255.636 71.4515 256.039 71.5886 256.347 71.8629 cv
256.656 72.1372 256.836 72.5058 256.904 72.9772 cv
253.827 75.6259 mo
253.827 75.883 253.879 76.1316 253.99 76.3716 cv
254.093 76.6116 254.247 76.7916 254.453 76.9116 cv
254.65 77.0402 254.856 77.1002 255.079 77.1002 cv
255.387 77.1002 255.662 76.9716 255.893 76.7145 cv
256.116 76.4573 256.236 76.1145 256.236 75.6687 cv
256.236 75.2487 256.116 74.9144 255.893 74.6659 cv
255.67 74.4258 255.387 74.2973 255.044 74.2973 cv
254.702 74.2973 254.419 74.4258 254.179 74.6659 cv
253.939 74.9144 253.827 75.2316 253.827 75.6259 cv
f
239.487 47.0604 mo
239.487 47.0604 li
f
239.487 47.0604 mo
239.487 47.0604 li
@
245.847 46.2529 mo
245.847 45.5329 245.916 44.95 246.07 44.5043 cv
246.216 44.0585 246.438 43.7157 246.73 43.4757 cv
247.021 43.2357 247.398 43.1156 247.844 43.1156 cv
248.17 43.1156 248.461 43.1842 248.71 43.3214 cv
248.95 43.4585 249.156 43.6471 249.319 43.8957 cv
249.481 44.1442 249.61 44.4443 249.704 44.8043 cv
249.79 45.1643 249.841 45.6529 249.841 46.2529 cv
249.841 46.9729 249.764 47.5558 249.619 48.0015 cv
249.473 48.4472 249.25 48.7815 248.959 49.0215 cv
248.667 49.2615 248.29 49.373 247.844 49.373 cv
247.244 49.373 246.781 49.1673 246.447 48.7472 cv
246.044 48.2415 245.847 47.4101 245.847 46.2529 cv
246.618 46.2529 mo
246.618 47.2643 246.73 47.9329 246.97 48.2672 cv
247.201 48.6015 247.493 48.7644 247.844 48.7644 cv
248.187 48.7644 248.47 48.6015 248.71 48.2672 cv
248.95 47.9329 249.07 47.2643 249.07 46.2529 cv
249.07 45.2414 248.95 44.5728 248.71 44.2385 cv
248.47 43.9128 248.178 43.7414 247.836 43.7414 cv
247.484 43.7414 247.21 43.8871 247.004 44.1785 cv
246.747 44.5557 246.618 45.25 246.618 46.2529 cv
f
251.033 49.2787 mo
251.033 48.4215 li
251.89 48.4215 li
251.89 49.2787 li
251.033 49.2787 li
f
254.153 45.9529 mo
253.836 45.8414 253.604 45.6786 253.45 45.4643 cv
253.296 45.2586 253.227 45.0014 253.227 44.7014 cv
253.227 44.2557 253.382 43.8871 253.707 43.5785 cv
254.033 43.2699 254.462 43.1156 254.993 43.1156 cv
255.524 43.1156 255.962 43.2785 256.287 43.5871 cv
256.613 43.8957 256.776 44.2728 256.776 44.7186 cv
256.776 45.01 256.699 45.2586 256.553 45.4643 cv
256.399 45.6786 256.176 45.8414 255.867 45.9529 cv
256.244 46.0729 256.527 46.27 256.724 46.5443 cv
256.922 46.8186 257.024 47.1443 257.024 47.5215 cv
257.024 48.0529 256.836 48.4901 256.467 48.8415 cv
256.09 49.2015 255.602 49.373 255.002 49.373 cv
254.393 49.373 253.904 49.2015 253.536 48.8415 cv
253.167 48.4901 252.987 48.0444 252.987 47.5043 cv
252.987 47.1101 253.081 46.7758 253.287 46.5015 cv
253.484 46.2357 253.776 46.0557 254.153 45.9529 cv
253.999 44.6757 mo
253.999 44.9671 254.093 45.2071 254.282 45.3871 cv
254.47 45.5757 254.71 45.6614 255.01 45.6614 cv
255.302 45.6614 255.533 45.5757 255.722 45.3871 cv
255.91 45.2071 256.004 44.9843 256.004 44.7186 cv
256.004 44.4443 255.902 44.2128 255.713 44.0242 cv
255.524 43.8357 255.284 43.7414 255.002 43.7414 cv
254.71 43.7414 254.47 43.8357 254.282 44.0157 cv
254.093 44.2043 253.999 44.4185 253.999 44.6757 cv
253.759 47.5043 mo
253.759 47.7272 253.81 47.9329 253.913 48.1301 cv
254.016 48.3358 254.162 48.4901 254.367 48.6015 cv
254.564 48.713 254.779 48.7644 255.01 48.7644 cv
255.37 48.7644 255.662 48.653 255.902 48.4215 cv
256.133 48.1901 256.253 47.8901 256.253 47.5301 cv
256.253 47.1701 256.133 46.8786 255.893 46.6386 cv
255.653 46.3986 255.344 46.2786 254.984 46.2786 cv
254.624 46.2786 254.333 46.3986 254.102 46.63 cv
253.87 46.87 253.759 47.1615 253.759 47.5043 cv
f
239.487 18.7246 mo
239.487 18.7246 li
f
239.487 18.7246 mo
239.487 18.7246 li
@
248.684 20.9429 mo
247.93 20.9429 li
247.93 16.1427 li
247.741 16.3141 247.501 16.4942 247.21 16.6656 cv
246.918 16.837 246.653 16.9656 246.421 17.0513 cv
246.421 16.3227 li
246.841 16.1256 247.21 15.8856 247.527 15.6027 cv
247.836 15.3284 248.058 15.0541 248.196 14.7798 cv
248.684 14.7798 li
248.684 20.9429 li
f
251.033 20.9429 mo
251.033 20.0857 li
251.89 20.0857 li
251.89 20.9429 li
251.033 20.9429 li
f
252.996 17.9171 mo
252.996 17.197 253.064 16.6142 253.219 16.1684 cv
253.364 15.7227 253.587 15.3798 253.879 15.1398 cv
254.17 14.8998 254.547 14.7798 254.993 14.7798 cv
255.319 14.7798 255.61 14.8484 255.859 14.9855 cv
256.099 15.1227 256.304 15.3113 256.467 15.5598 cv
256.63 15.8084 256.759 16.1084 256.853 16.4684 cv
256.939 16.8284 256.99 17.317 256.99 17.9171 cv
256.99 18.6371 256.913 19.2199 256.767 19.6657 cv
256.622 20.1114 256.399 20.4457 256.107 20.6857 cv
255.816 20.9257 255.439 21.0371 254.993 21.0371 cv
254.393 21.0371 253.93 20.8314 253.596 20.4114 cv
253.193 19.9057 252.996 19.0742 252.996 17.9171 cv
253.767 17.9171 mo
253.767 18.9285 253.879 19.5971 254.119 19.9314 cv
254.35 20.2657 254.642 20.4286 254.993 20.4286 cv
255.336 20.4286 255.619 20.2657 255.859 19.9314 cv
256.099 19.5971 256.219 18.9285 256.219 17.9171 cv
256.219 16.9056 256.099 16.237 255.859 15.9027 cv
255.619 15.577 255.327 15.4056 254.984 15.4056 cv
254.633 15.4056 254.359 15.5513 254.153 15.8427 cv
253.896 16.2199 253.767 16.9142 253.767 17.9171 cv
f
1.33932 lw
2 lc
0 lj
20.8048 18.7246 mo
239.487 18.7246 li
@
239.487 160.404 mo
239.487 18.7246 li
@
20.8048 160.404 mo
239.487 160.404 li
@
20.8048 160.404 mo
20.8048 18.7246 li
@
gsave
20.8048 160.404 mo
239.487 160.404 li
239.487 18.7246 li
20.8048 18.7246 li
20.8048 160.404 li
clp
1.50004 lw
0 lc
1 lj
[6.42876 6.42876 ] 0 dsh
20.6154 160.284 mo
22.2082 160.205 li
23.8009 160.147 li
25.3937 160.122 li
26.9865 160.114 li
28.5792 160.113 li
30.172 160.112 li
31.7648 160.112 li
33.3575 160.112 li
34.9503 160.112 li
36.543 160.112 li
38.1358 160.112 li
39.7286 160.112 li
41.3213 160.108 li
42.9141 160.101 li
44.5069 160.091 li
46.0996 160.081 li
47.6924 160.072 li
49.2851 160.062 li
50.8779 160.051 li
52.4707 160.043 li
54.0634 160.037 li
55.6562 160.028 li
57.249 160.012 li
58.8417 159.987 li
60.4345 159.949 li
62.0272 159.902 li
63.62 159.855 li
65.2128 159.815 li
66.8055 159.782 li
68.3983 159.753 li
69.9911 159.724 li
71.5838 159.693 li
73.1766 159.664 li
74.7693 159.636 li
76.3621 159.605 li
77.9548 159.57 li
79.5476 159.533 li
81.1404 159.497 li
82.7331 159.462 li
84.3259 159.422 li
85.9187 159.374 li
87.5114 159.326 li
89.1042 159.285 li
90.697 159.248 li
92.2897 159.213 li
93.8825 159.177 li
95.4752 159.139 li
97.068 159.101 li
98.6608 159.066 li
100.254 159.035 li
101.846 159.006 li
103.439 158.981 li
105.032 158.961 li
106.625 158.946 li
108.217 158.925 li
109.81 158.886 li
111.403 158.825 li
112.996 158.755 li
114.588 158.688 li
116.181 158.631 li
117.774 158.584 li
119.367 158.544 li
120.959 158.503 li
122.552 158.452 li
124.145 158.386 li
125.738 158.304 li
127.33 158.216 li
128.923 158.127 li
130.516 158.022 li
132.109 157.865 li
133.702 157.641 li
135.294 157.362 li
136.887 157.029 li
138.48 156.61 li
140.073 156.085 li
141.665 155.472 li
143.258 154.775 li
144.851 153.95 li
146.444 152.906 li
148.036 151.569 li
149.629 149.97 li
151.222 148.206 li
152.815 146.313 li
154.407 144.265 li
156 142.08 li
157.593 139.84 li
159.186 137.649 li
160.779 135.61 li
162.371 133.811 li
163.964 132.307 li
165.557 131.057 li
167.15 129.925 li
168.742 128.811 li
170.335 127.667 li
171.928 126.361 li
173.521 124.622 li
175.113 122.13 li
176.706 118.559 li
178.299 113.541 li
179.892 106.629 li
181.484 97.5864 li
183.077 86.8613 li
184.67 75.4125 li
186.263 64.0648 li
187.855 53.4143 li
189.448 44.0109 li
191.041 36.243 li
192.634 30.2471 li
194.227 25.9967 li
195.819 23.2801 li
197.412 21.6597 li
199.005 20.678 li
200.598 20.0372 li
202.19 19.5736 li
203.783 19.2218 li
205.376 18.9852 li
206.969 18.8578 li
208.561 18.7954 li
210.154 18.7591 li
211.747 18.7376 li
213.34 18.728 li
214.932 18.7252 li
216.525 18.7247 li
1 /0 /CSD get_res sepcs
1 sep
@
grestore
1.50004 lw
1 lc
1 lj
13.151 49.894 mo
13.151 35.7261 li
1 /0 /CSD get_res sepcs
1 sep
@
0 lc
[6.42876 6.42876 ] 0 dsh
263.979 83.897 mo
263.979 62.6451 li
@
1.33932 lw
2 lc
0 lj
[] 0 dsh
20.8048 18.7246 mo
239.487 18.7246 li
1 /0 /CSD get_res sepcs
.85 sep
@
239.487 160.404 mo
239.487 18.7246 li
@
20.8048 160.404 mo
239.487 160.404 li
@
20.8048 160.404 mo
20.8048 18.7246 li
@
17.0858 131.928 mo
10.6879 131.928 li
10.6879 131.214 li
11.2947 131.214 li
11.0627 131.054 10.8842 130.857 10.7682 130.643 cv
10.6522 130.429 10.5897 130.179 10.5897 129.876 cv
10.5897 129.483 10.6968 129.135 10.8931 128.832 cv
11.0984 128.528 11.3839 128.305 11.7587 128.145 cv
12.1334 127.993 12.535 127.913 12.9722 127.913 cv
13.4451 127.913 13.8735 128.002 14.2482 128.171 cv
14.6319 128.341 14.9264 128.591 15.1227 128.912 cv
15.319 129.233 15.4172 129.572 15.4172 129.929 cv
15.4172 130.197 15.3636 130.429 15.2565 130.634 cv
15.1495 130.848 15.0156 131.018 14.8372 131.143 cv
17.0858 131.143 li
17.0858 131.928 li
13.0347 131.214 mo
13.6325 131.214 14.0698 131.098 14.3553 130.857 cv
14.6408 130.616 14.7747 130.322 14.7747 129.983 cv
14.7747 129.635 14.6319 129.34 14.3375 129.09 cv
14.043 128.841 13.5879 128.716 12.9633 128.716 cv
12.3744 128.716 11.9371 128.841 11.6427 129.082 cv
11.3571 129.322 11.2054 129.608 11.2054 129.947 cv
11.2054 130.286 11.3661 130.581 11.6784 130.83 cv
11.9907 131.089 12.4458 131.214 13.0347 131.214 cv
f
15.319 126.976 mo
10.6879 126.976 li
10.6879 126.271 li
11.3928 126.271 li
11.0716 126.092 10.8574 125.932 10.7504 125.771 cv
10.6433 125.619 10.5897 125.45 10.5897 125.271 cv
10.5897 125.004 10.679 124.736 10.8396 124.459 cv
11.5713 124.736 li
11.4642 124.932 11.4018 125.12 11.4018 125.307 cv
11.4018 125.486 11.4553 125.637 11.5534 125.771 cv
11.6605 125.914 11.8033 126.012 11.9818 126.066 cv
12.2673 126.155 12.5707 126.19 12.9008 126.19 cv
15.319 126.19 li
15.319 126.976 li
f
13.0079 124.29 mo
12.1513 124.29 11.5178 124.058 11.0984 123.576 cv
10.7593 123.183 10.5897 122.693 10.5897 122.122 cv
10.5897 121.488 10.8039 120.97 11.2144 120.56 cv
11.6338 120.158 12.2048 119.953 12.9365 119.953 cv
13.5344 119.953 14.0073 120.042 14.3464 120.221 cv
14.6855 120.399 14.9532 120.667 15.1405 121.006 cv
15.319 121.345 15.4172 121.72 15.4172 122.122 cv
15.4172 122.773 15.2119 123.299 14.8015 123.692 cv
14.391 124.094 13.7931 124.29 13.0079 124.29 cv
13.0079 123.478 mo
13.5968 123.478 14.043 123.353 14.3375 123.094 cv
14.6319 122.844 14.7747 122.514 14.7747 122.122 cv
14.7747 121.729 14.6319 121.408 14.3375 121.149 cv
14.043 120.89 13.5879 120.756 12.9811 120.756 cv
12.4101 120.756 11.9818 120.89 11.6784 121.149 cv
11.3839 121.417 11.2322 121.738 11.2322 122.122 cv
11.2322 122.514 11.3839 122.844 11.6784 123.094 cv
11.9728 123.353 12.419 123.478 13.0079 123.478 cv
f
15.319 118.311 mo
15.319 119.043 li
8.93005 119.043 li
8.93005 118.258 li
11.2144 118.258 li
10.8039 117.928 10.5897 117.508 10.5897 116.991 cv
10.5897 116.705 10.6522 116.438 10.7593 116.179 cv
10.8753 115.929 11.0359 115.715 11.2411 115.554 cv
11.4553 115.394 11.7051 115.26 11.9996 115.17 cv
12.2941 115.081 12.6064 115.028 12.9365 115.028 cv
13.7307 115.028 14.3464 115.224 14.7747 115.617 cv
15.203 116.009 15.4172 116.482 15.4172 117.026 cv
15.4172 117.58 15.1941 118.008 14.739 118.311 cv
15.319 118.311 li
12.9722 118.32 mo
13.5255 118.32 13.927 118.249 14.1768 118.097 cv
14.5784 117.847 14.7747 117.517 14.7747 117.089 cv
14.7747 116.75 14.6319 116.455 14.3285 116.206 cv
14.0341 115.956 13.5879 115.831 12.999 115.831 cv
12.4011 115.831 11.955 115.956 11.6694 116.188 cv
11.3839 116.429 11.2322 116.714 11.2322 117.053 cv
11.2322 117.401 11.3839 117.696 11.6784 117.946 cv
11.9818 118.195 12.4101 118.32 12.9722 118.32 cv
f
14.7479 111.057 mo
14.9978 111.351 15.1762 111.628 15.2744 111.896 cv
15.3636 112.163 15.4172 112.458 15.4172 112.761 cv
15.4172 113.27 15.3012 113.662 15.0513 113.93 cv
14.8015 114.207 14.4892 114.341 14.0965 114.341 cv
13.8735 114.341 13.6682 114.296 13.4808 114.189 cv
13.2935 114.082 13.1418 113.948 13.0258 113.778 cv
12.9187 113.618 12.8295 113.43 12.767 113.216 cv
12.7313 113.065 12.6956 112.833 12.651 112.52 cv
12.5796 111.887 12.4904 111.423 12.3833 111.119 cv
12.2762 111.119 12.2138 111.119 12.1781 111.119 cv
11.8568 111.119 11.6338 111.191 11.4999 111.334 cv
11.3214 111.539 11.2322 111.842 11.2322 112.235 cv
11.2322 112.61 11.3036 112.877 11.4285 113.056 cv
11.5624 113.234 11.7944 113.359 12.1156 113.439 cv
12.0085 114.207 li
11.6873 114.135 11.4196 114.019 11.2144 113.859 cv
11.0181 113.698 10.8574 113.475 10.7504 113.172 cv
10.6433 112.868 10.5897 112.52 10.5897 112.119 cv
10.5897 111.726 10.6433 111.405 10.7325 111.155 cv
10.8217 110.905 10.9377 110.727 11.0805 110.611 cv
11.2233 110.495 11.3928 110.414 11.607 110.37 cv
11.7498 110.343 11.9907 110.325 12.3387 110.325 cv
13.3827 110.325 li
14.1144 110.325 14.5695 110.316 14.7658 110.281 cv
14.9621 110.245 15.1405 110.182 15.319 110.075 cv
15.319 110.896 li
15.1584 110.986 14.971 111.039 14.7479 111.057 cv
12.999 111.119 mo
13.115 111.405 13.2131 111.833 13.2935 112.404 cv
13.347 112.726 13.4005 112.958 13.4541 113.091 cv
13.5076 113.225 13.5968 113.323 13.7039 113.395 cv
13.8199 113.466 13.9448 113.502 14.0787 113.502 cv
14.2928 113.502 14.4624 113.43 14.6052 113.27 cv
14.7479 113.109 14.8104 112.877 14.8104 112.574 cv
14.8104 112.27 14.7479 112.003 14.6141 111.771 cv
14.4802 111.539 14.3018 111.36 14.0698 111.244 cv
13.8913 111.164 13.6325 111.119 13.2845 111.119 cv
12.999 111.119 li
f
15.319 108.389 mo
15.319 109.121 li
8.93005 109.121 li
8.93005 108.335 li
11.2144 108.335 li
10.8039 108.005 10.5897 107.586 10.5897 107.068 cv
10.5897 106.783 10.6522 106.515 10.7593 106.256 cv
10.8753 106.006 11.0359 105.792 11.2411 105.632 cv
11.4553 105.471 11.7051 105.337 11.9996 105.248 cv
12.2941 105.159 12.6064 105.105 12.9365 105.105 cv
13.7307 105.105 14.3464 105.301 14.7747 105.694 cv
15.203 106.087 15.4172 106.56 15.4172 107.104 cv
15.4172 107.657 15.1941 108.086 14.739 108.389 cv
15.319 108.389 li
12.9722 108.398 mo
13.5255 108.398 13.927 108.326 14.1768 108.175 cv
14.5784 107.925 14.7747 107.595 14.7747 107.166 cv
14.7747 106.827 14.6319 106.533 14.3285 106.283 cv
14.0341 106.033 13.5879 105.908 12.999 105.908 cv
12.4011 105.908 11.955 106.033 11.6694 106.265 cv
11.3839 106.506 11.2322 106.792 11.2322 107.131 cv
11.2322 107.479 11.3839 107.773 11.6784 108.023 cv
11.9818 108.273 12.4101 108.398 12.9722 108.398 cv
f
9.83128 104.15 mo
8.93005 104.15 li
8.93005 103.365 li
9.83128 103.365 li
9.83128 104.15 li
15.319 104.15 mo
10.6879 104.15 li
10.6879 103.365 li
15.319 103.365 li
15.319 104.15 li
f
15.319 102.187 mo
8.93005 102.187 li
8.93005 101.402 li
15.319 101.402 li
15.319 102.187 li
f
9.83128 100.189 mo
8.93005 100.189 li
8.93005 99.4033 li
9.83128 99.4033 li
9.83128 100.189 li
15.319 100.189 mo
10.6879 100.189 li
10.6879 99.4033 li
15.319 99.4033 li
15.319 100.189 li
f
14.6141 96.4944 mo
15.3101 96.3784 li
15.3458 96.6104 15.3725 96.8067 15.3725 96.9762 cv
15.3725 97.2618 15.3279 97.4848 15.2476 97.6365 cv
15.1584 97.7972 15.0424 97.9042 14.8907 97.9667 cv
14.7479 98.0381 14.4356 98.0648 13.9627 98.0648 cv
11.3036 98.0648 li
11.3036 98.6359 li
10.6879 98.6359 li
10.6879 98.0648 li
9.54574 98.0648 li
9.07282 97.2885 li
10.6879 97.2885 li
10.6879 96.4944 li
11.3036 96.4944 li
11.3036 97.2885 li
14.0073 97.2885 li
14.2393 97.2885 14.3821 97.2796 14.4445 97.2439 cv
14.5962 97.1101 li
14.6319 97.0476 14.6498 96.9584 14.6498 96.8424 cv
14.6498 96.7532 14.6408 96.6372 14.6141 96.4944 cv
f
17.0947 95.7627 mo
16.3541 95.8519 li
16.3987 95.6824 16.4255 95.5307 16.4255 95.3968 cv
16.4255 95.2273 16.3898 95.0935 16.3362 94.9864 cv
16.2738 94.8793 16.1935 94.799 16.0953 94.7276 cv
16.015 94.6741 15.8187 94.5938 15.5064 94.4867 cv
15.319 94.4153 li
10.6879 96.1731 li
10.6879 95.3255 li
13.3738 94.3618 li
13.7128 94.2368 14.0698 94.1298 14.4445 94.0316 cv
14.0876 93.9424 13.7307 93.8353 13.3916 93.7104 cv
10.6879 92.7199 li
10.6879 91.9347 li
15.3904 93.6925 li
15.8901 93.8888 16.2381 94.0316 16.4344 94.1298 cv
16.6932 94.2725 16.8805 94.4331 17.0055 94.6116 cv
17.1215 94.7901 17.1839 95.0042 17.1839 95.2541 cv
17.1839 95.4147 17.1482 95.5842 17.0947 95.7627 cv
f
15.319 85.7866 mo
14.739 85.7866 li
15.1941 86.0811 15.4172 86.5094 15.4172 87.0805 cv
15.4172 87.4553 15.319 87.7943 15.1138 88.0977 cv
14.9175 88.41 14.6319 88.651 14.2661 88.8205 cv
13.9091 88.99 13.4898 89.0704 13.0079 89.0704 cv
12.5528 89.0704 12.1334 88.999 11.7587 88.8383 cv
11.3839 88.6867 11.0894 88.4547 10.8931 88.1513 cv
10.6968 87.8479 10.5897 87.4999 10.5897 87.1162 cv
10.5897 86.8396 10.6522 86.5897 10.7682 86.3666 cv
10.8842 86.1525 11.0359 85.974 11.2233 85.8402 cv
8.93005 85.8402 li
8.93005 85.0549 li
15.319 85.0549 li
15.319 85.7866 li
13.0079 88.2583 mo
13.6058 88.2583 14.0519 88.1423 14.3375 87.8925 cv
14.6319 87.6426 14.7747 87.3482 14.7747 87.0002 cv
14.7747 86.6611 14.6408 86.3756 14.3553 86.1346 cv
14.0787 85.8937 13.6504 85.7688 13.0793 85.7688 cv
12.4458 85.7688 11.9818 85.8937 11.6784 86.1346 cv
11.3839 86.3845 11.2322 86.679 11.2322 87.0359 cv
11.2322 87.3928 11.375 87.6783 11.6605 87.9103 cv
11.9461 88.1423 12.4011 88.2583 13.0079 88.2583 cv
f
13.8288 80.6559 mo
13.927 79.8438 li
14.4088 79.9777 14.7747 80.2186 15.0335 80.5577 cv
15.2922 80.9057 15.4172 81.3429 15.4172 81.8783 cv
15.4172 82.5565 15.2119 83.1008 14.8015 83.4934 cv
14.391 83.886 13.8021 84.0823 13.0436 84.0823 cv
12.2673 84.0823 11.6605 83.886 11.2322 83.4845 cv
10.8039 83.0919 10.5897 82.5654 10.5897 81.9229 cv
10.5897 81.3072 10.8039 80.7986 11.2233 80.406 cv
11.6427 80.0134 12.2316 79.8171 12.999 79.8171 cv
13.2042 79.826 li
13.2042 83.2792 li
13.7218 83.2525 14.1055 83.1097 14.3731 82.8509 cv
14.6408 82.5922 14.7747 82.2709 14.7747 81.8783 cv
14.7747 81.5928 14.7033 81.3429 14.5516 81.1377 cv
14.4088 80.9414 14.1679 80.7808 13.8288 80.6559 cv
12.5618 83.2346 mo
12.5618 80.6469 li
12.1691 80.6826 11.8836 80.7808 11.6873 80.9414 cv
11.3839 81.1912 11.2322 81.5214 11.2322 81.914 cv
11.2322 82.2799 11.3571 82.5832 11.5981 82.8242 cv
11.839 83.074 12.1602 83.2079 12.5618 83.2346 cv
f
15.319 78.8623 mo
10.6879 78.8623 li
10.6879 78.1574 li
11.3482 78.1574 li
10.8485 77.8183 10.5897 77.3275 10.5897 76.6851 cv
10.5897 76.4084 10.6433 76.1497 10.7414 75.9177 cv
10.8396 75.6857 10.9734 75.5072 11.1341 75.3912 cv
11.2947 75.2752 11.491 75.1949 11.7141 75.1503 cv
11.8568 75.1235 12.1156 75.1057 12.4725 75.1057 cv
15.319 75.1057 li
15.319 75.8909 li
12.5082 75.8909 li
12.187 75.8909 11.955 75.9266 11.7944 75.9801 cv
11.6338 76.0426 11.5088 76.1497 11.4107 76.3014 cv
11.3214 76.462 11.2679 76.6404 11.2679 76.8457 cv
11.2679 77.1848 11.375 77.4792 11.5891 77.7201 cv
11.8033 77.9611 12.2048 78.0771 12.7938 78.0771 cv
15.319 78.0771 li
15.319 78.8623 li
f
13.9359 74.2134 mo
13.8199 73.437 li
14.1322 73.4014 14.3731 73.2764 14.5338 73.0801 cv
14.6944 72.8838 14.7747 72.5983 14.7747 72.2413 cv
14.7747 71.8844 14.7033 71.6167 14.5605 71.4383 cv
14.4178 71.2687 14.2393 71.1795 14.043 71.1795 cv
13.8645 71.1795 13.7307 71.2598 13.6236 71.4115 cv
13.5522 71.5186 13.463 71.7863 13.3559 72.2146 cv
13.2131 72.7857 13.0882 73.1872 12.9811 73.4103 cv
12.8741 73.6334 12.7313 73.8029 12.5439 73.9189 cv
12.3565 74.0349 12.1513 74.0884 11.9193 74.0884 cv
11.7141 74.0884 11.5267 74.0438 11.3482 73.9457 cv
11.1698 73.8564 11.027 73.7226 10.911 73.562 cv
10.8217 73.437 10.7504 73.2764 10.6879 73.0623 cv
10.6254 72.8481 10.5897 72.625 10.5897 72.3841 cv
10.5897 72.0272 10.6433 71.706 10.7504 71.4293 cv
10.8574 71.1527 10.9913 70.9475 11.1698 70.8137 cv
11.3482 70.6887 11.5891 70.5995 11.8836 70.546 cv
11.9907 71.3133 li
11.7587 71.349 11.5713 71.4561 11.4374 71.6167 cv
11.3036 71.7863 11.2322 72.0183 11.2322 72.3217 cv
11.2322 72.6875 11.2947 72.9463 11.4107 73.098 cv
11.5356 73.2586 11.6694 73.33 11.8301 73.33 cv
11.9371 73.33 12.0264 73.3032 12.1067 73.2318 cv
12.1959 73.1693 12.2584 73.0712 12.3119 72.9284 cv
12.3476 72.857 12.4101 72.625 12.5171 72.2413 cv
12.6599 71.6881 12.7848 71.2955 12.8741 71.0813 cv
12.9722 70.8672 13.115 70.6887 13.2935 70.5638 cv
13.4719 70.4389 13.695 70.3764 13.9627 70.3764 cv
14.2304 70.3764 14.4713 70.4567 14.7033 70.6084 cv
14.9353 70.7601 15.1048 70.9832 15.2298 71.2687 cv
15.3547 71.5543 15.4172 71.8844 15.4172 72.2413 cv
15.4172 72.8481 15.3012 73.3032 15.0513 73.6155 cv
14.8015 73.9367 14.4356 74.133 13.9359 74.2134 cv
f
9.83128 69.4395 mo
8.93005 69.4395 li
8.93005 68.6543 li
9.83128 68.6543 li
9.83128 69.4395 li
15.319 69.4395 mo
10.6879 69.4395 li
10.6879 68.6543 li
15.319 68.6543 li
15.319 69.4395 li
f
14.6141 65.7453 mo
15.3101 65.6293 li
15.3458 65.8613 15.3725 66.0576 15.3725 66.2272 cv
15.3725 66.5127 15.3279 66.7358 15.2476 66.8875 cv
15.1584 67.0481 15.0424 67.1552 14.8907 67.2176 cv
14.7479 67.289 14.4356 67.3158 13.9627 67.3158 cv
11.3036 67.3158 li
11.3036 67.8869 li
10.6879 67.8869 li
10.6879 67.3158 li
9.54574 67.3158 li
9.07282 66.5395 li
10.6879 66.5395 li
10.6879 65.7453 li
11.3036 65.7453 li
11.3036 66.5395 li
14.0073 66.5395 li
14.2393 66.5395 14.3821 66.5306 14.4445 66.4949 cv
14.5962 66.361 li
14.6319 66.2986 14.6498 66.2093 14.6498 66.0933 cv
14.6498 66.0041 14.6408 65.8881 14.6141 65.7453 cv
f
17.0947 65.0136 mo
16.3541 65.1028 li
16.3987 64.9333 16.4255 64.7816 16.4255 64.6478 cv
16.4255 64.4782 16.3898 64.3444 16.3362 64.2373 cv
16.2738 64.1302 16.1935 64.0499 16.0953 63.9785 cv
16.015 63.925 15.8187 63.8447 15.5064 63.7376 cv
15.319 63.6662 li
10.6879 65.4241 li
10.6879 64.5764 li
13.3738 63.6127 li
13.7128 63.4878 14.0698 63.3807 14.4445 63.2825 cv
14.0876 63.1933 13.7307 63.0862 13.3916 62.9613 cv
10.6879 61.9708 li
10.6879 61.1856 li
15.3904 62.9435 li
15.8901 63.1398 16.2381 63.2825 16.4344 63.3807 cv
16.6932 63.5235 16.8805 63.6841 17.0055 63.8625 cv
17.1215 64.041 17.1839 64.2551 17.1839 64.505 cv
17.1839 64.6656 17.1482 64.8352 17.0947 65.0136 cv
f
265.707 100.191 mo
265.921 99.343 li
266.617 99.5214 267.153 99.8427 267.51 100.307 cv
267.867 100.771 268.045 101.333 268.045 101.993 cv
268.045 102.68 267.911 103.242 267.635 103.671 cv
267.358 104.108 266.956 104.438 266.421 104.661 cv
265.886 104.884 265.315 104.991 264.708 104.991 cv
264.047 104.991 263.467 104.866 262.968 104.617 cv
262.468 104.367 262.093 104.001 261.835 103.528 cv
261.585 103.064 261.451 102.546 261.451 101.975 cv
261.451 101.342 261.62 100.806 261.942 100.369 cv
262.263 99.9319 262.718 99.6285 263.307 99.459 cv
263.503 100.289 li
263.039 100.441 262.709 100.655 262.495 100.931 cv
262.281 101.217 262.174 101.565 262.174 101.993 cv
262.174 102.493 262.299 102.903 262.531 103.233 cv
262.763 103.564 263.084 103.796 263.476 103.929 cv
263.869 104.063 264.28 104.126 264.699 104.126 cv
265.252 104.126 265.725 104.045 266.127 103.885 cv
266.537 103.724 266.84 103.483 267.037 103.144 cv
267.233 102.814 267.331 102.457 267.331 102.065 cv
267.331 101.592 267.197 101.19 266.921 100.86 cv
266.653 100.539 266.243 100.316 265.707 100.191 cv
f
267.947 98.3079 mo
261.558 98.3079 li
261.558 96.1039 li
261.558 95.6131 261.594 95.2383 261.647 94.9706 cv
261.736 94.6048 261.897 94.2925 262.111 94.0337 cv
262.397 93.6946 262.763 93.4448 263.2 93.2752 cv
263.646 93.1146 264.146 93.0254 264.717 93.0254 cv
265.207 93.0254 265.636 93.0879 266.011 93.1949 cv
266.385 93.3109 266.698 93.4537 266.939 93.6322 cv
267.188 93.8106 267.376 94.0069 267.519 94.2211 cv
267.661 94.4352 267.768 94.6851 267.84 94.9796 cv
267.911 95.2829 267.947 95.622 267.947 96.0057 cv
267.947 98.3079 li
267.197 97.4602 mo
267.197 96.0949 li
267.197 95.6756 267.162 95.3454 267.081 95.1045 cv
267.001 94.8725 266.885 94.6762 266.742 94.5334 cv
266.546 94.3371 266.278 94.1765 265.939 94.0694 cv
265.6 93.9623 265.19 93.8999 264.708 93.8999 cv
264.039 93.8999 263.521 94.0159 263.164 94.23 cv
262.807 94.4442 262.566 94.7119 262.441 95.0242 cv
262.361 95.2562 262.316 95.622 262.316 96.1217 cv
262.316 97.4602 li
267.197 97.4602 li
f
267.947 91.8208 mo
261.558 91.8208 li
261.558 87.5109 li
262.316 87.5109 li
262.316 90.9731 li
264.288 90.9731 li
264.288 87.9749 li
265.047 87.9749 li
265.047 90.9731 li
267.947 90.9731 li
267.947 91.8208 li
f
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
