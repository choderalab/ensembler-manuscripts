%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: figure-5.pdf
%%Creator: Adobe Acrobat 10.1.14
%%For: choderaj
%%CreationDate: 1/21/16, 7:13 PM
%%BoundingBox: 0 0 271 326
%%HiResBoundingBox: 0 0 271 326
%%CropBox: 0 0 271 326
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$None SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_AGM_Core/driver_media_override gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 753 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.2-c001 63.139439, 2010/09/27-13:37:26        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdfx="http://ns.adobe.com/pdfx/1.3/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreateDate="2016-01-21T19:13:21-05:00"
   xmp:CreatorTool="TeX"
   xmp:ModifyDate="2016-01-21T19:13:21-05:00"
   pdfx:PTEX.Fullbanner="This is pdfTeX, Version 3.14159265-2.6-1.40.16 (TeX Live 2015) kpathsea version 6.2.1"
   pdf:Producer="pdfTeX-1.40.16"
   pdf:Trapped="False"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/driver_media_override gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -326 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 326 li
271 326 li
271 0 li
cp
clp
25.838 162.502 mo
241.842 162.502 li
241.842 .498708 li
25.838 .498708 li
25.838 162.502 li
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
38.5379 123.793 mo
227.244 123.793 li
227.244 11.6075 li
38.5379 11.6075 li
38.5379 123.793 li
f
1 /0 /CSD get_res sepcs
.85 sep
f
.685728 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
38.5379 123.793 mo
38.5379 123.793 li
@
37.2254 131.087 mo
37.2254 130.511 37.2803 130.045 37.4037 129.689 cv
37.5203 129.332 37.6986 129.058 37.9317 128.866 cv
38.1649 128.674 38.4666 128.578 38.8232 128.578 cv
39.0837 128.578 39.3169 128.633 39.5158 128.742 cv
39.7078 128.852 39.8723 129.003 40.0026 129.202 cv
40.1329 129.401 40.2358 129.641 40.3112 129.929 cv
40.3798 130.217 40.4209 130.607 40.4209 131.087 cv
40.4209 131.663 40.3592 132.13 40.2426 132.486 cv
40.1261 132.843 39.9478 133.11 39.7146 133.302 cv
39.4815 133.494 39.1797 133.583 38.8232 133.583 cv
38.3432 133.583 37.9729 133.419 37.7054 133.083 cv
37.3831 132.678 37.2254 132.013 37.2254 131.087 cv
37.8426 131.087 mo
37.8426 131.897 37.9317 132.431 38.1237 132.699 cv
38.3089 132.966 38.542 133.097 38.8232 133.097 cv
39.0975 133.097 39.3237 132.966 39.5158 132.699 cv
39.7078 132.431 39.8038 131.897 39.8038 131.087 cv
39.8038 130.278 39.7078 129.743 39.5158 129.476 cv
39.3237 129.215 39.0906 129.078 38.8163 129.078 cv
38.5352 129.078 38.3157 129.195 38.1512 129.428 cv
37.9454 129.73 37.8426 130.285 37.8426 131.087 cv
f
f
69.9889 123.793 mo
69.9889 123.793 li
@
68.6496 132.219 mo
69.2805 132.171 li
69.3217 132.479 69.4314 132.713 69.6028 132.863 cv
69.7742 133.021 69.98 133.097 70.22 133.097 cv
70.508 133.097 70.7548 132.987 70.9605 132.767 cv
71.1594 132.548 71.2623 132.26 71.2623 131.897 cv
71.2623 131.554 71.1594 131.286 70.9674 131.087 cv
70.7754 130.889 70.5217 130.786 70.2131 130.786 cv
70.0211 130.786 69.8428 130.834 69.6851 130.923 cv
69.5274 131.012 69.4039 131.122 69.3217 131.259 cv
68.7525 131.19 li
69.2257 128.667 li
71.6668 128.667 li
71.6668 129.243 li
69.7125 129.243 li
69.4451 130.559 li
69.74 130.354 70.0485 130.251 70.3708 130.251 cv
70.796 130.251 71.1594 130.402 71.4543 130.697 cv
71.7491 130.998 71.9 131.375 71.9 131.842 cv
71.9 132.287 71.7697 132.671 71.5091 132.994 cv
71.1937 133.391 70.7685 133.583 70.22 133.583 cv
69.7742 133.583 69.4108 133.46 69.1297 133.213 cv
68.8417 132.966 68.6839 132.637 68.6496 132.219 cv
f
f
101.44 123.793 mo
101.44 123.793 li
@
100.723 133.508 mo
100.12 133.508 li
100.12 129.668 li
99.9688 129.805 99.7767 129.949 99.5436 130.086 cv
99.3105 130.223 99.0979 130.326 98.9127 130.395 cv
98.9127 129.812 li
99.2487 129.654 99.5436 129.462 99.7973 129.236 cv
100.044 129.017 100.222 128.797 100.332 128.578 cv
100.723 128.578 li
100.723 133.508 li
f
102.266 131.087 mo
102.266 130.511 102.321 130.045 102.444 129.689 cv
102.561 129.332 102.739 129.058 102.972 128.866 cv
103.205 128.674 103.507 128.578 103.864 128.578 cv
104.124 128.578 104.357 128.633 104.556 128.742 cv
104.748 128.852 104.913 129.003 105.043 129.202 cv
105.173 129.401 105.276 129.641 105.352 129.929 cv
105.42 130.217 105.461 130.607 105.461 131.087 cv
105.461 131.663 105.4 132.13 105.283 132.486 cv
105.167 132.843 104.988 133.11 104.755 133.302 cv
104.522 133.494 104.22 133.583 103.864 133.583 cv
103.384 133.583 103.013 133.419 102.746 133.083 cv
102.424 132.678 102.266 132.013 102.266 131.087 cv
102.883 131.087 mo
102.883 131.897 102.972 132.431 103.164 132.699 cv
103.349 132.966 103.583 133.097 103.864 133.097 cv
104.138 133.097 104.364 132.966 104.556 132.699 cv
104.748 132.431 104.844 131.897 104.844 131.087 cv
104.844 130.278 104.748 129.743 104.556 129.476 cv
104.364 129.215 104.131 129.078 103.857 129.078 cv
103.576 129.078 103.356 129.195 103.192 129.428 cv
102.986 129.73 102.883 130.285 102.883 131.087 cv
f
f
132.891 123.793 mo
132.891 123.793 li
@
132.147 133.508 mo
131.544 133.508 li
131.544 129.668 li
131.393 129.805 131.201 129.949 130.968 130.086 cv
130.735 130.223 130.522 130.326 130.337 130.395 cv
130.337 129.812 li
130.673 129.654 130.968 129.462 131.222 129.236 cv
131.468 129.017 131.647 128.797 131.756 128.578 cv
132.147 128.578 li
132.147 133.508 li
f
133.69 132.219 mo
134.321 132.171 li
134.362 132.479 134.472 132.713 134.643 132.863 cv
134.815 133.021 135.02 133.097 135.26 133.097 cv
135.548 133.097 135.795 132.987 136.001 132.767 cv
136.2 132.548 136.303 132.26 136.303 131.897 cv
136.303 131.554 136.2 131.286 136.008 131.087 cv
135.816 130.889 135.562 130.786 135.254 130.786 cv
135.062 130.786 134.883 130.834 134.726 130.923 cv
134.568 131.012 134.444 131.122 134.362 131.259 cv
133.793 131.19 li
134.266 128.667 li
136.707 128.667 li
136.707 129.243 li
134.753 129.243 li
134.486 130.559 li
134.78 130.354 135.089 130.251 135.411 130.251 cv
135.837 130.251 136.2 130.402 136.495 130.697 cv
136.79 130.998 136.941 131.375 136.941 131.842 cv
136.941 132.287 136.81 132.671 136.55 132.994 cv
136.234 133.391 135.809 133.583 135.26 133.583 cv
134.815 133.583 134.451 133.46 134.17 133.213 cv
133.882 132.966 133.724 132.637 133.69 132.219 cv
f
f
164.342 123.793 mo
164.342 123.793 li
@
164.242 132.932 mo
164.242 133.508 li
160.998 133.508 li
160.992 133.364 161.019 133.227 161.074 133.09 cv
161.156 132.87 161.286 132.658 161.465 132.438 cv
161.643 132.226 161.91 131.979 162.253 131.691 cv
162.788 131.259 163.145 130.916 163.337 130.655 cv
163.522 130.402 163.618 130.162 163.618 129.929 cv
163.618 129.695 163.529 129.49 163.357 129.325 cv
163.186 129.161 162.966 129.078 162.692 129.078 cv
162.404 129.078 162.171 129.167 162 129.339 cv
161.821 129.517 161.732 129.757 161.732 130.066 cv
161.115 129.997 li
161.156 129.538 161.314 129.188 161.588 128.941 cv
161.862 128.701 162.24 128.578 162.706 128.578 cv
163.172 128.578 163.549 128.715 163.824 128.975 cv
164.098 129.236 164.235 129.558 164.235 129.942 cv
164.235 130.141 164.194 130.333 164.112 130.525 cv
164.029 130.717 163.899 130.916 163.714 131.122 cv
163.529 131.334 163.22 131.622 162.788 131.986 cv
162.425 132.287 162.192 132.493 162.089 132.603 cv
161.986 132.713 161.904 132.822 161.835 132.932 cv
164.242 132.932 li
f
164.893 131.087 mo
164.893 130.511 164.948 130.045 165.072 129.689 cv
165.188 129.332 165.367 129.058 165.6 128.866 cv
165.833 128.674 166.135 128.578 166.491 128.578 cv
166.752 128.578 166.985 128.633 167.184 128.742 cv
167.376 128.852 167.54 129.003 167.671 129.202 cv
167.801 129.401 167.904 129.641 167.979 129.929 cv
168.048 130.217 168.089 130.607 168.089 131.087 cv
168.089 131.663 168.027 132.13 167.911 132.486 cv
167.794 132.843 167.616 133.11 167.383 133.302 cv
167.149 133.494 166.848 133.583 166.491 133.583 cv
166.011 133.583 165.641 133.419 165.373 133.083 cv
165.051 132.678 164.893 132.013 164.893 131.087 cv
165.511 131.087 mo
165.511 131.897 165.6 132.431 165.792 132.699 cv
165.977 132.966 166.21 133.097 166.491 133.097 cv
166.765 133.097 166.992 132.966 167.184 132.699 cv
167.376 132.431 167.472 131.897 167.472 131.087 cv
167.472 130.278 167.376 129.743 167.184 129.476 cv
166.992 129.215 166.759 129.078 166.484 129.078 cv
166.203 129.078 165.984 129.195 165.819 129.428 cv
165.613 129.73 165.511 130.285 165.511 131.087 cv
f
f
195.793 123.793 mo
195.793 123.793 li
@
195.666 132.932 mo
195.666 133.508 li
192.423 133.508 li
192.416 133.364 192.443 133.227 192.498 133.09 cv
192.58 132.87 192.711 132.658 192.889 132.438 cv
193.067 132.226 193.335 131.979 193.678 131.691 cv
194.212 131.259 194.569 130.916 194.761 130.655 cv
194.946 130.402 195.042 130.162 195.042 129.929 cv
195.042 129.695 194.953 129.49 194.782 129.325 cv
194.61 129.161 194.391 129.078 194.116 129.078 cv
193.828 129.078 193.595 129.167 193.424 129.339 cv
193.246 129.517 193.156 129.757 193.156 130.066 cv
192.539 129.997 li
192.58 129.538 192.738 129.188 193.012 128.941 cv
193.287 128.701 193.664 128.578 194.13 128.578 cv
194.596 128.578 194.974 128.715 195.248 128.975 cv
195.522 129.236 195.659 129.558 195.659 129.942 cv
195.659 130.141 195.618 130.333 195.536 130.525 cv
195.454 130.717 195.323 130.916 195.138 131.122 cv
194.953 131.334 194.644 131.622 194.212 131.986 cv
193.849 132.287 193.616 132.493 193.513 132.603 cv
193.41 132.713 193.328 132.822 193.259 132.932 cv
195.666 132.932 li
f
196.318 132.219 mo
196.948 132.171 li
196.99 132.479 197.099 132.713 197.271 132.863 cv
197.442 133.021 197.648 133.097 197.888 133.097 cv
198.176 133.097 198.423 132.987 198.629 132.767 cv
198.827 132.548 198.93 132.26 198.93 131.897 cv
198.93 131.554 198.827 131.286 198.635 131.087 cv
198.443 130.889 198.19 130.786 197.881 130.786 cv
197.689 130.786 197.511 130.834 197.353 130.923 cv
197.195 131.012 197.072 131.122 196.99 131.259 cv
196.42 131.19 li
196.894 128.667 li
199.335 128.667 li
199.335 129.243 li
197.381 129.243 li
197.113 130.559 li
197.408 130.354 197.717 130.251 198.039 130.251 cv
198.464 130.251 198.827 130.402 199.122 130.697 cv
199.417 130.998 199.568 131.375 199.568 131.842 cv
199.568 132.287 199.438 132.671 199.177 132.994 cv
198.862 133.391 198.437 133.583 197.888 133.583 cv
197.442 133.583 197.079 133.46 196.798 133.213 cv
196.51 132.966 196.352 132.637 196.318 132.219 cv
f
f
227.244 123.793 mo
227.244 123.793 li
@
224.03 132.212 mo
224.633 132.13 li
224.702 132.473 224.818 132.719 224.983 132.87 cv
225.147 133.021 225.353 133.097 225.593 133.097 cv
225.874 133.097 226.114 133.001 226.306 132.802 cv
226.498 132.61 226.601 132.363 226.601 132.075 cv
226.601 131.801 226.505 131.567 226.327 131.389 cv
226.149 131.211 225.915 131.115 225.641 131.115 cv
225.525 131.115 225.381 131.142 225.216 131.183 cv
225.285 130.655 li
225.381 130.662 li
225.634 130.662 225.867 130.601 226.073 130.463 cv
226.279 130.326 226.382 130.121 226.382 129.839 cv
226.382 129.62 226.306 129.442 226.155 129.298 cv
226.005 129.154 225.813 129.078 225.579 129.078 cv
225.346 129.078 225.147 129.154 224.99 129.298 cv
224.832 129.449 224.736 129.668 224.695 129.956 cv
224.091 129.853 li
224.16 129.449 224.331 129.133 224.592 128.914 cv
224.853 128.694 225.175 128.578 225.566 128.578 cv
225.833 128.578 226.08 128.639 226.306 128.756 cv
226.526 128.872 226.697 129.03 226.821 129.222 cv
226.944 129.421 227.006 129.634 227.006 129.853 cv
227.006 130.073 226.944 130.265 226.834 130.436 cv
226.718 130.614 226.546 130.751 226.327 130.847 cv
226.615 130.916 226.834 131.06 226.999 131.266 cv
227.163 131.478 227.246 131.746 227.246 132.061 cv
227.246 132.486 227.088 132.85 226.773 133.145 cv
226.457 133.446 226.066 133.59 225.593 133.59 cv
225.154 133.59 224.798 133.467 224.517 133.206 cv
224.229 132.953 224.071 132.623 224.03 132.212 cv
f
227.842 131.087 mo
227.842 130.511 227.897 130.045 228.021 129.689 cv
228.137 129.332 228.315 129.058 228.549 128.866 cv
228.782 128.674 229.083 128.578 229.44 128.578 cv
229.701 128.578 229.934 128.633 230.133 128.742 cv
230.325 128.852 230.489 129.003 230.619 129.202 cv
230.75 129.401 230.853 129.641 230.928 129.929 cv
230.997 130.217 231.038 130.607 231.038 131.087 cv
231.038 131.663 230.976 132.13 230.859 132.486 cv
230.743 132.843 230.565 133.11 230.331 133.302 cv
230.098 133.494 229.797 133.583 229.44 133.583 cv
228.96 133.583 228.59 133.419 228.322 133.083 cv
228 132.678 227.842 132.013 227.842 131.087 cv
228.459 131.087 mo
228.459 131.897 228.549 132.431 228.741 132.699 cv
228.926 132.966 229.159 133.097 229.44 133.097 cv
229.714 133.097 229.941 132.966 230.133 132.699 cv
230.325 132.431 230.421 131.897 230.421 131.087 cv
230.421 130.278 230.325 129.743 230.133 129.476 cv
229.941 129.215 229.707 129.078 229.433 129.078 cv
229.152 129.078 228.933 129.195 228.768 129.428 cv
228.562 129.73 228.459 130.285 228.459 131.087 cv
f
115.915 145.883 mo
115.915 140.482 li
118.306 140.482 li
118.789 140.482 119.151 140.535 119.4 140.633 cv
119.649 140.731 119.852 140.905 120.003 141.146 cv
120.154 141.388 120.23 141.659 120.23 141.953 cv
120.23 142.346 120.101 142.67 119.852 142.926 cv
119.604 143.19 119.219 143.356 118.706 143.424 cv
118.895 143.515 119.038 143.605 119.136 143.696 cv
119.347 143.892 119.543 144.126 119.732 144.412 cv
120.667 145.883 li
119.77 145.883 li
119.06 144.759 li
118.849 144.443 118.676 144.194 118.54 144.02 cv
118.404 143.847 118.284 143.726 118.178 143.658 cv
118.072 143.59 117.959 143.545 117.854 143.515 cv
117.771 143.5 117.635 143.485 117.454 143.485 cv
116.624 143.485 li
116.624 145.883 li
115.915 145.883 li
116.624 142.866 mo
118.163 142.866 li
118.487 142.866 118.744 142.836 118.925 142.768 cv
119.106 142.7 119.249 142.595 119.347 142.444 cv
119.438 142.293 119.49 142.134 119.49 141.953 cv
119.49 141.704 119.392 141.493 119.211 141.327 cv
119.023 141.161 118.729 141.078 118.336 141.078 cv
116.624 141.078 li
116.624 142.866 li
f
121.294 145.883 mo
121.294 140.482 li
122.372 140.482 li
123.647 144.307 li
123.768 144.669 123.851 144.933 123.904 145.106 cv
123.964 144.91 124.062 144.624 124.19 144.239 cv
125.488 140.482 li
126.446 140.482 li
126.446 145.883 li
125.759 145.883 li
125.759 141.365 li
124.19 145.883 li
123.549 145.883 li
121.988 141.29 li
121.988 145.883 li
121.294 145.883 li
f
127.323 144.148 mo
127.994 144.088 li
128.024 144.36 128.1 144.586 128.22 144.759 cv
128.333 144.933 128.514 145.069 128.763 145.174 cv
129.005 145.28 129.284 145.333 129.593 145.333 cv
129.865 145.333 130.098 145.295 130.31 145.212 cv
130.521 145.137 130.672 145.023 130.777 144.88 cv
130.875 144.744 130.928 144.586 130.928 144.42 cv
130.928 144.254 130.875 144.103 130.777 143.975 cv
130.679 143.854 130.521 143.749 130.295 143.658 cv
130.151 143.598 129.834 143.515 129.337 143.394 cv
128.839 143.273 128.492 143.16 128.296 143.055 cv
128.039 142.919 127.843 142.753 127.715 142.557 cv
127.587 142.361 127.526 142.134 127.526 141.878 cv
127.526 141.606 127.602 141.357 127.76 141.116 cv
127.911 140.882 128.137 140.701 128.439 140.581 cv
128.733 140.46 129.065 140.392 129.427 140.392 cv
129.827 140.392 130.181 140.46 130.483 140.588 cv
130.785 140.716 131.026 140.905 131.192 141.154 cv
131.358 141.41 131.441 141.689 131.456 142.006 cv
130.77 142.059 li
130.732 141.72 130.611 141.463 130.4 141.282 cv
130.189 141.109 129.872 141.018 129.457 141.018 cv
129.02 141.018 128.711 141.101 128.514 141.259 cv
128.318 141.418 128.22 141.606 128.22 141.833 cv
128.22 142.029 128.288 142.187 128.424 142.308 cv
128.56 142.436 128.922 142.564 129.503 142.7 cv
130.083 142.836 130.483 142.949 130.702 143.04 cv
131.011 143.19 131.245 143.371 131.396 143.59 cv
131.547 143.816 131.622 144.073 131.622 144.36 cv
131.622 144.646 131.539 144.918 131.373 145.174 cv
131.207 145.431 130.966 145.627 130.664 145.763 cv
130.355 145.898 130.008 145.966 129.623 145.966 cv
129.133 145.966 128.726 145.898 128.394 145.763 cv
128.062 145.627 127.805 145.408 127.617 145.121 cv
127.428 144.835 127.33 144.51 127.323 144.148 cv
f
132.567 145.883 mo
132.567 140.482 li
134.43 140.482 li
134.845 140.482 135.161 140.513 135.388 140.558 cv
135.697 140.633 135.961 140.769 136.18 140.95 cv
136.466 141.192 136.677 141.501 136.821 141.87 cv
136.957 142.248 137.032 142.67 137.032 143.153 cv
137.032 143.568 136.979 143.93 136.889 144.246 cv
136.791 144.563 136.67 144.827 136.519 145.031 cv
136.368 145.242 136.202 145.401 136.021 145.521 cv
135.84 145.642 135.629 145.732 135.38 145.793 cv
135.124 145.853 134.837 145.883 134.513 145.883 cv
132.567 145.883 li
133.283 145.25 mo
134.437 145.25 li
134.792 145.25 135.071 145.219 135.274 145.152 cv
135.471 145.084 135.637 144.986 135.757 144.865 cv
135.923 144.699 136.059 144.473 136.149 144.186 cv
136.24 143.899 136.293 143.552 136.293 143.145 cv
136.293 142.579 136.195 142.142 136.014 141.84 cv
135.833 141.539 135.606 141.335 135.342 141.229 cv
135.146 141.161 134.837 141.124 134.415 141.124 cv
133.283 141.124 li
133.283 145.25 li
f
141.251 147.46 mo
140.881 147 140.572 146.464 140.323 145.853 cv
140.067 145.235 139.946 144.593 139.946 143.93 cv
139.946 143.349 140.037 142.791 140.225 142.248 cv
140.444 141.629 140.783 141.01 141.251 140.392 cv
141.726 140.392 li
141.424 140.905 141.228 141.275 141.138 141.486 cv
140.987 141.825 140.866 142.18 140.783 142.549 cv
140.678 143.009 140.625 143.47 140.625 143.93 cv
140.625 145.114 140.987 146.283 141.726 147.46 cv
141.251 147.46 li
f
148.334 147.46 mo
147.859 147.46 li
148.59 146.283 148.96 145.114 148.96 143.93 cv
148.96 143.47 148.907 143.009 148.802 142.557 cv
148.711 142.195 148.598 141.84 148.447 141.493 cv
148.349 141.282 148.153 140.912 147.859 140.392 cv
148.334 140.392 li
148.786 141.01 149.126 141.629 149.352 142.248 cv
149.541 142.791 149.639 143.349 149.639 143.93 cv
149.639 144.593 149.511 145.235 149.254 145.853 cv
148.998 146.464 148.696 147 148.334 147.46 cv
f
143.047 144.48 mo
144.593 140.807 li
144.405 140.792 144.246 140.709 144.126 140.565 cv
144.005 140.43 143.945 140.256 143.945 140.06 cv
143.945 139.856 144.013 139.683 144.163 139.532 cv
144.314 139.389 144.495 139.313 144.707 139.313 cv
144.903 139.313 145.076 139.389 145.227 139.54 cv
145.37 139.69 145.446 139.864 145.446 140.068 cv
145.446 140.264 145.378 140.437 145.25 140.573 cv
145.114 140.716 144.955 140.799 144.759 140.814 cv
146.607 145.046 li
146.713 145.31 146.811 145.483 146.902 145.574 cv
146.992 145.665 147.128 145.725 147.316 145.74 cv
147.316 145.883 li
145.393 145.883 li
145.393 145.74 li
145.589 145.74 145.732 145.717 145.808 145.672 cv
145.876 145.642 145.913 145.582 145.913 145.491 cv
145.913 145.363 145.861 145.189 145.77 144.963 cv
145.461 144.254 li
143.485 144.254 li
143.138 145.114 li
143.092 145.235 143.07 145.34 143.07 145.431 cv
143.07 145.551 143.107 145.627 143.19 145.672 cv
143.273 145.717 143.409 145.74 143.598 145.74 cv
143.598 145.883 li
142.097 145.883 li
142.097 145.74 li
142.308 145.725 142.459 145.649 142.557 145.514 cv
142.647 145.378 142.813 145.038 143.047 144.48 cv
145.189 140.06 mo
145.189 139.924 145.136 139.811 145.038 139.713 cv
144.94 139.623 144.82 139.57 144.684 139.57 cv
144.548 139.57 144.435 139.623 144.344 139.721 cv
144.246 139.819 144.201 139.932 144.201 140.06 cv
144.201 140.203 144.246 140.324 144.344 140.415 cv
144.435 140.513 144.548 140.558 144.684 140.558 cv
144.82 140.558 144.94 140.513 145.038 140.415 cv
145.136 140.324 145.189 140.203 145.189 140.06 cv
145.355 143.945 mo
144.48 141.87 li
143.613 143.945 li
145.355 143.945 li
f
gsave
38.5379 123.793 mo
227.244 123.793 li
227.244 11.6075 li
38.5379 11.6075 li
38.5379 123.793 li
clp
227.244 123.69 mo
224.306 123.69 li
220.549 123.69 li
216.792 123.69 li
213.035 123.69 li
209.277 123.69 li
205.52 123.69 li
201.763 123.69 li
198.006 123.69 li
194.249 123.69 li
190.492 123.69 li
186.734 123.69 li
182.977 123.69 li
179.22 123.69 li
175.463 123.69 li
171.706 123.69 li
167.949 123.69 li
164.191 123.69 li
160.434 123.69 li
156.677 123.69 li
152.92 123.69 li
149.163 123.69 li
145.405 123.69 li
141.648 123.69 li
137.891 123.69 li
134.134 123.69 li
130.377 123.69 li
126.62 123.69 li
122.863 123.69 li
119.105 123.69 li
115.348 123.69 li
111.591 123.69 li
107.834 123.69 li
104.077 123.69 li
100.319 123.69 li
96.5622 123.69 li
92.8051 123.69 li
89.048 123.69 li
85.2907 123.69 li
81.5335 123.69 li
77.7764 123.69 li
74.0193 123.69 li
70.262 123.69 li
66.5049 123.69 li
62.7477 123.69 li
58.9906 123.69 li
55.2333 123.69 li
51.4762 123.69 li
47.719 123.69 li
43.9619 123.69 li
40.2046 123.69 li
38.5379 123.69 li
38.5379 114.285 li
40.2792 112.455 li
40.2888 112.443 li
44.046 107.103 li
44.0521 107.093 li
47.8092 100.216 li
47.813 100.209 li
51.5701 91.784 li
51.5722 91.7789 li
55.3294 81.9693 li
55.3306 81.9662 li
59.0877 71.127 li
59.0882 71.1256 li
62.8453 59.7876 li
62.8452 59.7881 li
66.602 48.607 li
70.3577 38.2825 li
74.1118 29.4692 li
77.8613 22.6981 li
81.5982 18.3214 li
85.3066 16.479 li
89.0053 17.0981 li
92.7313 20.0065 li
96.4764 24.922 li
100.228 31.4654 li
103.983 39.2147 li
107.739 47.7328 li
107.739 47.7328 li
111.496 56.5949 li
115.254 65.4022 li
115.254 65.4038 li
119.011 73.8163 li
119.013 73.8192 li
122.77 81.5712 li
122.772 81.5754 li
126.529 88.488 li
126.533 88.4936 li
130.29 94.4757 li
130.294 94.4825 li
134.052 99.5211 li
134.058 99.5287 li
137.815 103.672 li
137.823 103.68 li
141.58 107.015 li
141.589 107.023 li
145.346 109.661 li
145.356 109.667 li
149.113 111.723 li
149.123 111.728 li
152.88 113.316 li
152.888 113.319 li
156.645 114.541 li
156.652 114.543 li
160.409 115.491 li
160.414 115.492 li
164.171 116.242 li
164.175 116.243 li
167.932 116.856 li
167.934 116.857 li
171.692 117.38 li
171.693 117.38 li
175.45 117.846 li
175.451 117.846 li
179.208 118.275 li
179.209 118.275 li
182.967 118.678 li
186.724 119.062 li
190.482 119.428 li
194.24 119.776 li
197.997 120.106 li
201.755 120.419 li
205.513 120.715 li
209.27 120.994 li
213.028 121.258 li
216.785 121.507 li
220.543 121.743 li
224.301 121.964 li
227.244 122.127 li
227.244 123.69 li
/1 
[/DeviceCMYK] /CSA add_res
0 0 0 .287602 cmyk
f
227.244 123.793 mo
38.5379 123.793 li
38.5379 123.69 li
40.2046 123.69 li
43.9619 123.69 li
47.719 123.69 li
51.4762 123.69 li
55.2333 123.69 li
58.9906 123.69 li
62.7477 123.69 li
66.5049 123.69 li
70.262 123.69 li
74.0193 123.69 li
77.7764 123.69 li
81.5335 123.69 li
85.2907 123.69 li
89.048 123.69 li
92.8051 123.69 li
96.5622 123.69 li
100.319 123.69 li
104.077 123.69 li
107.834 123.69 li
111.591 123.69 li
115.348 123.69 li
119.105 123.69 li
122.863 123.69 li
126.62 123.69 li
130.377 123.69 li
134.134 123.69 li
137.891 123.69 li
141.648 123.69 li
145.405 123.69 li
149.163 123.69 li
152.92 123.69 li
156.677 123.69 li
160.434 123.69 li
164.191 123.69 li
167.949 123.69 li
171.706 123.69 li
175.463 123.69 li
179.22 123.69 li
182.977 123.69 li
186.734 123.69 li
190.492 123.69 li
194.249 123.69 li
198.006 123.69 li
201.763 123.69 li
205.52 123.69 li
209.277 123.69 li
213.035 123.69 li
216.792 123.69 li
220.549 123.69 li
224.306 123.69 li
227.244 123.69 li
227.244 123.793 li
f
227.244 122.127 mo
224.301 121.964 li
220.543 121.743 li
216.785 121.507 li
213.028 121.258 li
209.27 120.994 li
205.513 120.715 li
201.755 120.419 li
197.997 120.106 li
194.24 119.776 li
190.482 119.428 li
186.724 119.062 li
182.967 118.678 li
179.209 118.275 li
179.208 118.275 li
175.451 117.846 li
175.45 117.846 li
171.693 117.38 li
171.692 117.38 li
167.934 116.857 li
167.932 116.856 li
164.175 116.243 li
164.171 116.242 li
160.414 115.492 li
160.409 115.491 li
156.652 114.543 li
156.645 114.541 li
152.888 113.319 li
152.88 113.316 li
149.123 111.728 li
149.113 111.723 li
145.356 109.667 li
145.346 109.661 li
141.589 107.023 li
141.58 107.015 li
137.823 103.68 li
137.815 103.672 li
134.058 99.5287 li
134.052 99.5211 li
130.294 94.4825 li
130.29 94.4757 li
126.533 88.4936 li
126.529 88.488 li
122.772 81.5754 li
122.77 81.5712 li
119.013 73.8192 li
119.011 73.8163 li
115.254 65.4038 li
115.254 65.4022 li
111.496 56.5949 li
107.739 47.7328 li
107.739 47.7328 li
103.983 39.2147 li
100.228 31.4654 li
96.4764 24.922 li
92.7313 20.0065 li
89.0053 17.0981 li
85.3066 16.479 li
81.5982 18.3214 li
77.8613 22.6981 li
74.1118 29.4692 li
70.3577 38.2825 li
66.602 48.607 li
62.8452 59.7881 li
62.8453 59.7876 li
59.0882 71.1256 li
59.0877 71.127 li
55.3306 81.9662 li
55.3294 81.9693 li
51.5722 91.7789 li
51.5701 91.784 li
47.813 100.209 li
47.8092 100.216 li
44.0521 107.093 li
44.046 107.103 li
40.2888 112.443 li
40.2792 112.455 li
38.5379 114.285 li
38.5379 113.986 li
40.1249 112.319 li
43.8743 106.989 li
47.6268 100.121 li
51.3811 91.7027 li
55.1366 81.8972 li
58.8931 71.0602 li
62.6501 59.723 li
62.6502 59.7225 li
66.4074 48.5402 li
66.4082 48.5378 li
70.1653 38.2095 li
70.1674 38.2044 li
73.9246 29.3838 li
73.9293 29.3743 li
77.6864 22.5893 li
77.6982 22.5723 li
81.4553 18.1718 li
81.4878 18.1465 li
85.2449 16.2799 li
85.3077 16.2705 li
89.0648 16.8995 li
89.1112 16.9199 li
92.8683 19.8525 li
92.8869 19.8712 li
96.6441 24.8026 li
96.6515 24.8137 li
100.409 31.3662 li
100.412 31.3725 li
104.169 39.1266 li
104.171 39.1299 li
107.928 47.6512 li
107.928 47.6525 li
111.686 56.5144 li
115.442 65.3204 li
119.199 73.7309 li
122.954 81.4792 li
126.708 88.3869 li
130.462 94.3628 li
134.213 99.3941 li
137.964 103.529 li
141.712 106.858 li
145.46 109.489 li
149.207 111.54 li
152.956 113.125 li
156.706 114.345 li
160.457 115.291 li
164.21 116.04 li
167.964 116.653 li
171.719 117.176 li
175.476 117.641 li
175.475 117.641 li
179.232 118.07 li
179.231 118.07 li
182.988 118.474 li
186.745 118.857 li
190.502 119.223 li
194.258 119.571 li
198.015 119.901 li
201.772 120.214 li
205.528 120.51 li
209.285 120.789 li
213.042 121.053 li
216.799 121.302 li
220.555 121.537 li
224.312 121.759 li
227.244 121.921 li
227.244 122.127 li
f
grestore
gsave
38.5379 123.793 mo
227.244 123.793 li
227.244 11.6075 li
38.5379 11.6075 li
38.5379 123.793 li
clp
1.20002 lw
1 lc
36.4475 116.332 mo
40.2047 112.384 li
43.9618 107.044 li
47.719 100.167 li
51.4762 91.7421 li
55.2334 81.9325 li
58.9905 71.0932 li
62.7477 59.7553 li
66.5049 48.5729 li
70.262 38.2447 li
74.0192 29.4241 li
77.7764 22.6391 li
81.5336 18.2386 li
85.2907 16.3719 li
89.0479 17.001 li
92.8051 19.9335 li
96.5623 24.865 li
100.319 31.4173 li
104.077 39.1714 li
107.834 47.6927 li
111.591 56.5546 li
115.348 65.3619 li
119.105 73.7743 li
122.862 81.5263 li
126.62 88.4389 li
130.377 94.421 li
134.134 99.4596 li
137.891 103.603 li
141.648 106.938 li
145.406 109.577 li
149.163 111.633 li
152.92 113.221 li
156.677 114.444 li
160.434 115.392 li
164.191 116.141 li
167.949 116.755 li
171.706 117.278 li
175.463 117.744 li
179.22 118.172 li
182.977 118.576 li
186.734 118.96 li
190.492 119.325 li
194.249 119.674 li
198.006 120.004 li
201.763 120.317 li
205.52 120.612 li
209.277 120.891 li
213.035 121.155 li
216.792 121.405 li
220.549 121.64 li
224.306 121.862 li
228.063 122.07 li
1 /0 /CSD get_res sepcs
1 sep
@
grestore
1.07145 lw
2 lc
0 lj
38.5379 123.793 mo
227.244 123.793 li
@
24.178 325.5 mo
240.182 325.5 li
240.182 163.497 li
24.178 163.497 li
24.178 325.5 li
1 /0 /CSD get_res sepcs
0 sep
f
36.8779 286.791 mo
225.584 286.791 li
225.584 174.606 li
36.8779 174.606 li
36.8779 286.791 li
f
1 /0 /CSD get_res sepcs
.85 sep
f
.685728 lw
0 lc
1 lj
36.8779 286.791 mo
36.8779 286.791 li
@
35.5654 294.085 mo
35.5654 293.509 35.6203 293.043 35.7437 292.687 cv
35.8603 292.33 36.0386 292.056 36.2717 291.864 cv
36.5049 291.672 36.8066 291.576 37.1632 291.576 cv
37.4237 291.576 37.6569 291.631 37.8558 291.74 cv
38.0478 291.85 38.2123 292.001 38.3426 292.2 cv
38.4729 292.399 38.5758 292.639 38.6512 292.927 cv
38.7198 293.215 38.7609 293.605 38.7609 294.085 cv
38.7609 294.661 38.6992 295.128 38.5826 295.484 cv
38.4661 295.841 38.2878 296.108 38.0546 296.3 cv
37.8215 296.492 37.5197 296.581 37.1632 296.581 cv
36.6832 296.581 36.3129 296.417 36.0454 296.081 cv
35.7231 295.676 35.5654 295.011 35.5654 294.085 cv
36.1826 294.085 mo
36.1826 294.895 36.2717 295.429 36.4637 295.697 cv
36.6489 295.964 36.882 296.095 37.1632 296.095 cv
37.4375 296.095 37.6637 295.964 37.8558 295.697 cv
38.0478 295.429 38.1438 294.895 38.1438 294.085 cv
38.1438 293.276 38.0478 292.741 37.8558 292.474 cv
37.6637 292.213 37.4306 292.076 37.1563 292.076 cv
36.8752 292.076 36.6557 292.193 36.4912 292.426 cv
36.2854 292.728 36.1826 293.283 36.1826 294.085 cv
f
f
68.3289 286.791 mo
68.3289 286.791 li
@
66.9896 295.217 mo
67.6205 295.169 li
67.6617 295.477 67.7714 295.711 67.9428 295.861 cv
68.1142 296.019 68.32 296.095 68.56 296.095 cv
68.848 296.095 69.0948 295.985 69.3005 295.765 cv
69.4994 295.546 69.6023 295.258 69.6023 294.895 cv
69.6023 294.552 69.4994 294.284 69.3074 294.085 cv
69.1154 293.887 68.8617 293.784 68.5531 293.784 cv
68.3611 293.784 68.1828 293.832 68.0251 293.921 cv
67.8674 294.01 67.7439 294.12 67.6617 294.257 cv
67.0925 294.188 li
67.5657 291.665 li
70.0068 291.665 li
70.0068 292.241 li
68.0525 292.241 li
67.7851 293.557 li
68.0799 293.352 68.3885 293.249 68.7108 293.249 cv
69.136 293.249 69.4994 293.4 69.7943 293.695 cv
70.0891 293.996 70.24 294.373 70.24 294.84 cv
70.24 295.285 70.1097 295.669 69.8491 295.992 cv
69.5337 296.389 69.1085 296.581 68.56 296.581 cv
68.1142 296.581 67.7508 296.458 67.4697 296.211 cv
67.1816 295.964 67.0239 295.635 66.9896 295.217 cv
f
f
99.7799 286.791 mo
99.7799 286.791 li
@
99.0631 296.506 mo
98.4596 296.506 li
98.4596 292.666 li
98.3088 292.803 98.1168 292.947 97.8836 293.084 cv
97.6505 293.221 97.4379 293.324 97.2527 293.393 cv
97.2527 292.81 li
97.5887 292.652 97.8836 292.46 98.1373 292.234 cv
98.3842 292.015 98.5625 291.795 98.6722 291.576 cv
99.0631 291.576 li
99.0631 296.506 li
f
100.606 294.085 mo
100.606 293.509 100.661 293.043 100.784 292.687 cv
100.901 292.33 101.079 292.056 101.312 291.864 cv
101.545 291.672 101.847 291.576 102.204 291.576 cv
102.464 291.576 102.697 291.631 102.896 291.74 cv
103.088 291.85 103.253 292.001 103.383 292.2 cv
103.513 292.399 103.616 292.639 103.692 292.927 cv
103.76 293.215 103.801 293.605 103.801 294.085 cv
103.801 294.661 103.74 295.128 103.623 295.484 cv
103.507 295.841 103.328 296.108 103.095 296.3 cv
102.862 296.492 102.56 296.581 102.204 296.581 cv
101.724 296.581 101.353 296.417 101.086 296.081 cv
100.764 295.676 100.606 295.011 100.606 294.085 cv
101.223 294.085 mo
101.223 294.895 101.312 295.429 101.504 295.697 cv
101.689 295.964 101.923 296.095 102.204 296.095 cv
102.478 296.095 102.704 295.964 102.896 295.697 cv
103.088 295.429 103.184 294.895 103.184 294.085 cv
103.184 293.276 103.088 292.741 102.896 292.474 cv
102.704 292.213 102.471 292.076 102.197 292.076 cv
101.916 292.076 101.696 292.193 101.532 292.426 cv
101.326 292.728 101.223 293.283 101.223 294.085 cv
f
f
131.231 286.791 mo
131.231 286.791 li
@
130.487 296.506 mo
129.884 296.506 li
129.884 292.666 li
129.733 292.803 129.541 292.947 129.308 293.084 cv
129.075 293.221 128.862 293.324 128.677 293.393 cv
128.677 292.81 li
129.013 292.652 129.308 292.46 129.562 292.234 cv
129.808 292.015 129.987 291.795 130.096 291.576 cv
130.487 291.576 li
130.487 296.506 li
f
132.03 295.217 mo
132.661 295.169 li
132.702 295.477 132.812 295.711 132.983 295.861 cv
133.155 296.019 133.36 296.095 133.6 296.095 cv
133.888 296.095 134.135 295.985 134.341 295.765 cv
134.54 295.546 134.643 295.258 134.643 294.895 cv
134.643 294.552 134.54 294.284 134.348 294.085 cv
134.156 293.887 133.902 293.784 133.594 293.784 cv
133.402 293.784 133.223 293.832 133.066 293.921 cv
132.908 294.01 132.784 294.12 132.702 294.257 cv
132.133 294.188 li
132.606 291.665 li
135.047 291.665 li
135.047 292.241 li
133.093 292.241 li
132.826 293.557 li
133.12 293.352 133.429 293.249 133.751 293.249 cv
134.176 293.249 134.54 293.4 134.835 293.695 cv
135.13 293.996 135.281 294.373 135.281 294.84 cv
135.281 295.285 135.15 295.669 134.89 295.992 cv
134.574 296.389 134.149 296.581 133.6 296.581 cv
133.155 296.581 132.791 296.458 132.51 296.211 cv
132.222 295.964 132.064 295.635 132.03 295.217 cv
f
f
162.682 286.791 mo
162.682 286.791 li
@
162.582 295.93 mo
162.582 296.506 li
159.338 296.506 li
159.332 296.362 159.359 296.225 159.414 296.088 cv
159.496 295.868 159.626 295.656 159.805 295.436 cv
159.983 295.224 160.25 294.977 160.593 294.689 cv
161.128 294.257 161.485 293.914 161.677 293.653 cv
161.862 293.4 161.958 293.16 161.958 292.927 cv
161.958 292.693 161.869 292.488 161.697 292.323 cv
161.526 292.159 161.306 292.076 161.032 292.076 cv
160.744 292.076 160.511 292.165 160.34 292.337 cv
160.161 292.515 160.072 292.755 160.072 293.064 cv
159.455 292.995 li
159.496 292.536 159.654 292.186 159.928 291.939 cv
160.202 291.699 160.58 291.576 161.046 291.576 cv
161.512 291.576 161.889 291.713 162.164 291.973 cv
162.438 292.234 162.575 292.556 162.575 292.94 cv
162.575 293.139 162.534 293.331 162.452 293.523 cv
162.369 293.715 162.239 293.914 162.054 294.12 cv
161.869 294.332 161.56 294.62 161.128 294.984 cv
160.765 295.285 160.532 295.491 160.429 295.601 cv
160.326 295.711 160.244 295.82 160.175 295.93 cv
162.582 295.93 li
f
163.233 294.085 mo
163.233 293.509 163.288 293.043 163.412 292.687 cv
163.528 292.33 163.707 292.056 163.94 291.864 cv
164.173 291.672 164.475 291.576 164.831 291.576 cv
165.092 291.576 165.325 291.631 165.524 291.74 cv
165.716 291.85 165.88 292.001 166.011 292.2 cv
166.141 292.399 166.244 292.639 166.319 292.927 cv
166.388 293.215 166.429 293.605 166.429 294.085 cv
166.429 294.661 166.367 295.128 166.251 295.484 cv
166.134 295.841 165.956 296.108 165.723 296.3 cv
165.489 296.492 165.188 296.581 164.831 296.581 cv
164.351 296.581 163.981 296.417 163.713 296.081 cv
163.391 295.676 163.233 295.011 163.233 294.085 cv
163.851 294.085 mo
163.851 294.895 163.94 295.429 164.132 295.697 cv
164.317 295.964 164.55 296.095 164.831 296.095 cv
165.105 296.095 165.332 295.964 165.524 295.697 cv
165.716 295.429 165.812 294.895 165.812 294.085 cv
165.812 293.276 165.716 292.741 165.524 292.474 cv
165.332 292.213 165.099 292.076 164.824 292.076 cv
164.543 292.076 164.324 292.193 164.159 292.426 cv
163.953 292.728 163.851 293.283 163.851 294.085 cv
f
f
194.133 286.791 mo
194.133 286.791 li
@
194.006 295.93 mo
194.006 296.506 li
190.763 296.506 li
190.756 296.362 190.783 296.225 190.838 296.088 cv
190.92 295.868 191.051 295.656 191.229 295.436 cv
191.407 295.224 191.675 294.977 192.018 294.689 cv
192.552 294.257 192.909 293.914 193.101 293.653 cv
193.286 293.4 193.382 293.16 193.382 292.927 cv
193.382 292.693 193.293 292.488 193.122 292.323 cv
192.95 292.159 192.731 292.076 192.456 292.076 cv
192.168 292.076 191.935 292.165 191.764 292.337 cv
191.586 292.515 191.496 292.755 191.496 293.064 cv
190.879 292.995 li
190.92 292.536 191.078 292.186 191.352 291.939 cv
191.627 291.699 192.004 291.576 192.47 291.576 cv
192.936 291.576 193.314 291.713 193.588 291.973 cv
193.862 292.234 193.999 292.556 193.999 292.94 cv
193.999 293.139 193.958 293.331 193.876 293.523 cv
193.794 293.715 193.663 293.914 193.478 294.12 cv
193.293 294.332 192.984 294.62 192.552 294.984 cv
192.189 295.285 191.956 295.491 191.853 295.601 cv
191.75 295.711 191.668 295.82 191.599 295.93 cv
194.006 295.93 li
f
194.658 295.217 mo
195.288 295.169 li
195.33 295.477 195.439 295.711 195.611 295.861 cv
195.782 296.019 195.988 296.095 196.228 296.095 cv
196.516 296.095 196.763 295.985 196.969 295.765 cv
197.167 295.546 197.27 295.258 197.27 294.895 cv
197.27 294.552 197.167 294.284 196.975 294.085 cv
196.783 293.887 196.53 293.784 196.221 293.784 cv
196.029 293.784 195.851 293.832 195.693 293.921 cv
195.535 294.01 195.412 294.12 195.33 294.257 cv
194.76 294.188 li
195.234 291.665 li
197.675 291.665 li
197.675 292.241 li
195.721 292.241 li
195.453 293.557 li
195.748 293.352 196.057 293.249 196.379 293.249 cv
196.804 293.249 197.167 293.4 197.462 293.695 cv
197.757 293.996 197.908 294.373 197.908 294.84 cv
197.908 295.285 197.778 295.669 197.517 295.992 cv
197.202 296.389 196.777 296.581 196.228 296.581 cv
195.782 296.581 195.419 296.458 195.138 296.211 cv
194.85 295.964 194.692 295.635 194.658 295.217 cv
f
f
225.584 286.791 mo
225.584 286.791 li
@
222.37 295.21 mo
222.973 295.128 li
223.042 295.471 223.158 295.717 223.323 295.868 cv
223.487 296.019 223.693 296.095 223.933 296.095 cv
224.214 296.095 224.454 295.999 224.646 295.8 cv
224.838 295.608 224.941 295.361 224.941 295.073 cv
224.941 294.799 224.845 294.565 224.667 294.387 cv
224.489 294.209 224.255 294.113 223.981 294.113 cv
223.865 294.113 223.721 294.14 223.556 294.181 cv
223.625 293.653 li
223.721 293.66 li
223.974 293.66 224.207 293.599 224.413 293.461 cv
224.619 293.324 224.722 293.119 224.722 292.837 cv
224.722 292.618 224.646 292.44 224.495 292.296 cv
224.345 292.152 224.153 292.076 223.919 292.076 cv
223.686 292.076 223.487 292.152 223.33 292.296 cv
223.172 292.447 223.076 292.666 223.035 292.954 cv
222.431 292.851 li
222.5 292.447 222.671 292.131 222.932 291.912 cv
223.193 291.692 223.515 291.576 223.906 291.576 cv
224.173 291.576 224.42 291.637 224.646 291.754 cv
224.866 291.871 225.037 292.028 225.161 292.22 cv
225.284 292.419 225.346 292.632 225.346 292.851 cv
225.346 293.071 225.284 293.263 225.174 293.434 cv
225.058 293.612 224.886 293.749 224.667 293.845 cv
224.955 293.914 225.174 294.058 225.339 294.264 cv
225.503 294.476 225.586 294.744 225.586 295.059 cv
225.586 295.484 225.428 295.848 225.113 296.143 cv
224.797 296.444 224.406 296.588 223.933 296.588 cv
223.494 296.588 223.138 296.465 222.857 296.204 cv
222.568 295.951 222.411 295.621 222.37 295.21 cv
f
226.182 294.085 mo
226.182 293.509 226.237 293.043 226.361 292.687 cv
226.477 292.33 226.655 292.056 226.889 291.864 cv
227.122 291.672 227.423 291.576 227.78 291.576 cv
228.041 291.576 228.274 291.631 228.473 291.74 cv
228.665 291.85 228.829 292.001 228.959 292.2 cv
229.09 292.399 229.193 292.639 229.268 292.927 cv
229.337 293.215 229.378 293.605 229.378 294.085 cv
229.378 294.661 229.316 295.128 229.199 295.484 cv
229.083 295.841 228.905 296.108 228.671 296.3 cv
228.438 296.492 228.137 296.581 227.78 296.581 cv
227.3 296.581 226.93 296.417 226.662 296.081 cv
226.34 295.676 226.182 295.011 226.182 294.085 cv
226.799 294.085 mo
226.799 294.895 226.889 295.429 227.081 295.697 cv
227.266 295.964 227.499 296.095 227.78 296.095 cv
228.054 296.095 228.281 295.964 228.473 295.697 cv
228.665 295.429 228.761 294.895 228.761 294.085 cv
228.761 293.276 228.665 292.741 228.473 292.474 cv
228.281 292.213 228.047 292.076 227.773 292.076 cv
227.492 292.076 227.273 292.193 227.108 292.426 cv
226.902 292.728 226.799 293.283 226.799 294.085 cv
f
114.255 308.881 mo
114.255 303.48 li
116.646 303.48 li
117.129 303.48 117.491 303.533 117.74 303.631 cv
117.989 303.729 118.192 303.903 118.343 304.144 cv
118.494 304.386 118.57 304.657 118.57 304.951 cv
118.57 305.344 118.441 305.668 118.192 305.924 cv
117.944 306.188 117.559 306.354 117.046 306.422 cv
117.235 306.513 117.378 306.603 117.476 306.694 cv
117.687 306.89 117.883 307.124 118.072 307.41 cv
119.007 308.881 li
118.11 308.881 li
117.4 307.757 li
117.189 307.441 117.016 307.192 116.88 307.018 cv
116.744 306.845 116.624 306.724 116.518 306.656 cv
116.412 306.588 116.299 306.543 116.194 306.513 cv
116.111 306.498 115.975 306.483 115.794 306.483 cv
114.964 306.483 li
114.964 308.881 li
114.255 308.881 li
114.964 305.864 mo
116.503 305.864 li
116.827 305.864 117.084 305.834 117.265 305.766 cv
117.446 305.698 117.589 305.592 117.687 305.442 cv
117.778 305.291 117.83 305.132 117.83 304.951 cv
117.83 304.702 117.732 304.491 117.551 304.325 cv
117.363 304.159 117.069 304.076 116.676 304.076 cv
114.964 304.076 li
114.964 305.864 li
f
119.634 308.881 mo
119.634 303.48 li
120.712 303.48 li
121.987 307.305 li
122.108 307.667 122.191 307.931 122.244 308.104 cv
122.304 307.908 122.402 307.622 122.53 307.237 cv
123.828 303.48 li
124.786 303.48 li
124.786 308.881 li
124.099 308.881 li
124.099 304.363 li
122.53 308.881 li
121.889 308.881 li
120.328 304.288 li
120.328 308.881 li
119.634 308.881 li
f
125.663 307.146 mo
126.334 307.086 li
126.364 307.358 126.44 307.584 126.56 307.757 cv
126.673 307.931 126.854 308.067 127.103 308.172 cv
127.345 308.278 127.624 308.331 127.933 308.331 cv
128.205 308.331 128.438 308.293 128.65 308.21 cv
128.861 308.134 129.012 308.021 129.117 307.878 cv
129.215 307.742 129.268 307.584 129.268 307.418 cv
129.268 307.252 129.215 307.101 129.117 306.973 cv
129.019 306.852 128.861 306.747 128.635 306.656 cv
128.491 306.596 128.174 306.513 127.677 306.392 cv
127.179 306.271 126.832 306.158 126.636 306.053 cv
126.379 305.917 126.183 305.751 126.055 305.555 cv
125.927 305.359 125.866 305.132 125.866 304.876 cv
125.866 304.604 125.942 304.355 126.1 304.114 cv
126.251 303.88 126.477 303.699 126.779 303.579 cv
127.073 303.458 127.405 303.39 127.767 303.39 cv
128.167 303.39 128.521 303.458 128.823 303.586 cv
129.125 303.714 129.366 303.903 129.532 304.152 cv
129.698 304.408 129.781 304.687 129.796 305.004 cv
129.11 305.057 li
129.072 304.718 128.951 304.461 128.74 304.28 cv
128.529 304.107 128.212 304.016 127.797 304.016 cv
127.36 304.016 127.051 304.099 126.854 304.257 cv
126.658 304.416 126.56 304.604 126.56 304.831 cv
126.56 305.027 126.628 305.185 126.764 305.306 cv
126.9 305.434 127.262 305.562 127.843 305.698 cv
128.423 305.834 128.823 305.947 129.042 306.038 cv
129.351 306.188 129.585 306.369 129.736 306.588 cv
129.887 306.814 129.962 307.071 129.962 307.358 cv
129.962 307.644 129.879 307.916 129.713 308.172 cv
129.547 308.429 129.306 308.625 129.004 308.761 cv
128.695 308.896 128.348 308.964 127.963 308.964 cv
127.473 308.964 127.066 308.896 126.734 308.761 cv
126.402 308.625 126.145 308.406 125.957 308.119 cv
125.768 307.833 125.67 307.508 125.663 307.146 cv
f
130.907 308.881 mo
130.907 303.48 li
132.77 303.48 li
133.185 303.48 133.501 303.511 133.728 303.556 cv
134.037 303.631 134.301 303.767 134.52 303.948 cv
134.806 304.19 135.017 304.499 135.161 304.868 cv
135.297 305.246 135.372 305.668 135.372 306.151 cv
135.372 306.566 135.319 306.928 135.229 307.244 cv
135.131 307.561 135.01 307.825 134.859 308.029 cv
134.708 308.24 134.542 308.398 134.361 308.519 cv
134.18 308.64 133.969 308.73 133.72 308.791 cv
133.464 308.851 133.177 308.881 132.853 308.881 cv
130.907 308.881 li
131.623 308.248 mo
132.777 308.248 li
133.132 308.248 133.411 308.217 133.614 308.15 cv
133.811 308.082 133.977 307.984 134.097 307.863 cv
134.263 307.697 134.399 307.471 134.489 307.184 cv
134.58 306.897 134.633 306.55 134.633 306.143 cv
134.633 305.577 134.535 305.14 134.354 304.838 cv
134.173 304.536 133.946 304.333 133.682 304.227 cv
133.486 304.159 133.177 304.122 132.755 304.122 cv
131.623 304.122 li
131.623 308.248 li
f
139.591 310.458 mo
139.221 309.998 138.912 309.462 138.663 308.851 cv
138.407 308.233 138.286 307.591 138.286 306.928 cv
138.286 306.347 138.377 305.789 138.565 305.246 cv
138.784 304.627 139.123 304.008 139.591 303.39 cv
140.066 303.39 li
139.764 303.903 139.568 304.272 139.478 304.484 cv
139.327 304.823 139.206 305.178 139.123 305.547 cv
139.018 306.007 138.965 306.467 138.965 306.928 cv
138.965 308.112 139.327 309.281 140.066 310.458 cv
139.591 310.458 li
f
146.674 310.458 mo
146.199 310.458 li
146.93 309.281 147.3 308.112 147.3 306.928 cv
147.3 306.467 147.247 306.007 147.142 305.555 cv
147.051 305.193 146.938 304.838 146.787 304.491 cv
146.689 304.28 146.493 303.91 146.199 303.39 cv
146.674 303.39 li
147.126 304.008 147.466 304.627 147.692 305.246 cv
147.881 305.789 147.979 306.347 147.979 306.928 cv
147.979 307.591 147.851 308.233 147.594 308.851 cv
147.338 309.462 147.036 309.998 146.674 310.458 cv
f
141.387 307.478 mo
142.933 303.805 li
142.745 303.79 142.586 303.707 142.466 303.563 cv
142.345 303.428 142.285 303.254 142.285 303.058 cv
142.285 302.854 142.353 302.681 142.503 302.53 cv
142.654 302.387 142.835 302.311 143.047 302.311 cv
143.243 302.311 143.416 302.387 143.567 302.538 cv
143.71 302.688 143.786 302.862 143.786 303.066 cv
143.786 303.262 143.718 303.435 143.59 303.571 cv
143.454 303.714 143.295 303.797 143.099 303.812 cv
144.947 308.044 li
145.053 308.308 145.151 308.482 145.242 308.572 cv
145.332 308.663 145.468 308.723 145.656 308.738 cv
145.656 308.881 li
143.733 308.881 li
143.733 308.738 li
143.929 308.738 144.072 308.715 144.148 308.67 cv
144.216 308.64 144.253 308.58 144.253 308.489 cv
144.253 308.361 144.201 308.187 144.11 307.961 cv
143.801 307.252 li
141.825 307.252 li
141.478 308.112 li
141.432 308.233 141.41 308.338 141.41 308.429 cv
141.41 308.549 141.447 308.625 141.53 308.67 cv
141.613 308.715 141.749 308.738 141.938 308.738 cv
141.938 308.881 li
140.437 308.881 li
140.437 308.738 li
140.648 308.723 140.799 308.647 140.897 308.512 cv
140.987 308.376 141.153 308.036 141.387 307.478 cv
143.529 303.058 mo
143.529 302.922 143.476 302.809 143.378 302.711 cv
143.28 302.621 143.16 302.568 143.024 302.568 cv
142.888 302.568 142.775 302.621 142.684 302.719 cv
142.586 302.817 142.541 302.93 142.541 303.058 cv
142.541 303.201 142.586 303.322 142.684 303.413 cv
142.775 303.511 142.888 303.556 143.024 303.556 cv
143.16 303.556 143.28 303.511 143.378 303.413 cv
143.476 303.322 143.529 303.201 143.529 303.058 cv
143.695 306.943 mo
142.82 304.868 li
141.953 306.943 li
143.695 306.943 li
f
gsave
36.8779 286.791 mo
225.584 286.791 li
225.584 174.606 li
36.8779 174.606 li
36.8779 286.791 li
clp
gsave
225.584 286.038 mo
224.626 286.038 li
221.863 286.031 li
219.099 286.016 li
216.336 285.994 li
213.572 285.963 li
210.809 285.921 li
208.046 285.867 li
205.282 285.799 li
202.519 285.716 li
199.756 285.616 li
196.993 285.498 li
194.229 285.363 li
194.23 285.363 li
191.467 285.21 li
188.703 285.04 li
185.94 284.854 li
183.177 284.654 li
180.413 284.442 li
177.65 284.221 li
174.886 283.993 li
172.122 283.759 li
169.359 283.521 li
166.595 283.279 li
163.831 283.033 li
161.068 282.782 li
158.304 282.524 li
155.541 282.256 li
152.777 281.975 li
152.778 281.975 li
150.014 281.675 li
150.015 281.675 li
147.251 281.353 li
144.489 281.002 li
141.726 280.617 li
138.965 280.19 li
136.202 279.712 li
133.441 279.17 li
130.68 278.55 li
127.921 277.829 li
125.162 276.98 li
122.403 275.964 li
119.647 274.732 li
116.891 273.224 li
114.135 271.368 li
111.379 269.078 li
108.623 266.265 li
105.865 262.839 li
103.106 258.721 li
100.345 253.858 li
97.5837 248.236 li
94.8214 241.9 li
92.0587 234.961 li
89.2953 227.609 li
89.2955 227.609 li
86.5317 220.111 li
86.5313 220.11 li
83.7675 212.803 li
83.7664 212.8 li
82.6928 210.184 li
83.7269 209.113 li
87.4445 207.233 li
91.1501 207.376 li
94.8726 209.451 li
98.6135 213.256 li
102.363 218.471 li
106.117 224.71 li
109.872 231.555 li
113.629 238.604 li
113.629 238.605 li
117.386 245.496 li
117.388 245.498 li
121.145 251.945 li
121.147 251.95 li
124.904 257.753 li
124.908 257.759 li
128.665 262.808 li
128.67 262.814 li
132.427 267.075 li
132.434 267.083 li
136.191 270.584 li
136.199 270.591 li
139.956 273.403 li
139.965 273.409 li
143.722 275.621 li
143.732 275.626 li
147.489 277.337 li
147.497 277.341 li
151.254 278.648 li
151.262 278.65 li
155.019 279.642 li
155.025 279.644 li
158.781 280.398 li
158.786 280.399 li
162.543 280.982 li
162.546 280.983 li
166.303 281.447 li
166.305 281.447 li
170.062 281.834 li
170.063 281.834 li
173.82 282.172 li
173.821 282.172 li
177.578 282.479 li
181.335 282.767 li
185.092 283.043 li
188.85 283.308 li
192.607 283.564 li
196.364 283.813 li
200.121 284.053 li
203.878 284.286 li
207.635 284.511 li
211.392 284.729 li
215.149 284.939 li
218.906 285.14 li
222.663 285.333 li
225.584 285.475 li
225.584 286.038 li
clp
82.6928 207.233 mo
225.584 207.233 li
225.584 286.038 li
82.6928 286.038 li
cp
.120363 .00195315 .0512703 0 cmyk
f
grestore
225.584 285.475 mo
222.663 285.333 li
218.906 285.14 li
215.149 284.939 li
211.392 284.729 li
207.635 284.511 li
203.878 284.286 li
200.121 284.053 li
196.364 283.813 li
192.607 283.564 li
188.85 283.308 li
185.092 283.043 li
181.335 282.767 li
177.578 282.479 li
173.821 282.172 li
173.82 282.172 li
170.063 281.834 li
170.062 281.834 li
166.305 281.447 li
166.303 281.447 li
162.546 280.983 li
162.543 280.982 li
158.786 280.399 li
158.781 280.398 li
155.025 279.644 li
155.019 279.642 li
151.262 278.65 li
151.254 278.648 li
147.497 277.341 li
147.489 277.337 li
143.732 275.626 li
143.722 275.621 li
139.965 273.409 li
139.956 273.403 li
136.199 270.591 li
136.191 270.584 li
132.434 267.083 li
132.427 267.075 li
128.67 262.814 li
128.665 262.808 li
124.908 257.759 li
124.904 257.753 li
121.147 251.95 li
121.145 251.945 li
117.388 245.498 li
117.386 245.496 li
113.629 238.605 li
113.629 238.604 li
109.872 231.555 li
106.117 224.71 li
102.363 218.471 li
98.6135 213.256 li
94.8726 209.451 li
91.1501 207.376 li
87.4445 207.233 li
83.7269 209.113 li
82.6928 210.184 li
82.6075 209.976 li
83.591 208.958 li
83.6186 208.937 li
87.3754 207.038 li
87.4258 207.027 li
91.1826 207.171 li
91.2287 207.184 li
94.9856 209.278 li
95.0089 209.296 li
98.7657 213.117 li
98.7759 213.129 li
102.533 218.355 li
102.537 218.362 li
106.294 224.606 li
106.296 224.609 li
110.053 231.457 li
110.054 231.458 li
113.811 238.507 li
113.81 238.506 li
117.566 245.396 li
121.321 251.84 li
125.075 257.639 li
128.827 262.681 li
132.578 266.935 li
136.327 270.43 li
140.075 273.235 li
143.822 275.441 li
147.57 277.148 li
151.318 278.452 li
155.068 279.443 li
158.82 280.196 li
162.573 280.779 li
166.327 281.243 li
170.082 281.629 li
173.838 281.967 li
173.837 281.967 li
177.594 282.274 li
181.351 282.562 li
185.107 282.837 li
188.864 283.103 li
192.62 283.359 li
196.377 283.608 li
200.134 283.848 li
203.89 284.081 li
207.647 284.306 li
211.403 284.524 li
215.16 284.733 li
218.917 284.935 li
222.673 285.127 li
225.584 285.269 li
225.584 285.475 li
.120363 .00195315 .0512703 0 cmyk
f
grestore
gsave
36.8779 286.791 mo
225.584 286.791 li
225.584 174.606 li
36.8779 174.606 li
36.8779 286.791 li
clp
225.584 286.265 mo
223.401 286.248 li
221.872 286.236 li
224.626 286.244 li
225.584 286.244 li
225.584 286.265 li
.272648 .0224918 .0706493 0 cmyk
f
77.9807 215.644 mo
76.8148 212.014 li
76.8142 212.013 li
74.328 204.685 li
74.3269 204.682 li
71.8407 198.115 li
71.8381 198.108 li
69.3866 192.718 li
69.8589 192.513 li
72.5622 193.311 li
75.299 196.008 li
78.0535 200.396 li
80.8135 206.147 li
82.4515 210.138 li
79.8342 212.849 li
79.8224 212.863 li
77.9807 215.644 li
.174472 .0126955 .028748 0 cmyk
f
215.46 286.19 mo
213.456 286.176 li
210.97 286.158 li
208.484 286.138 li
205.998 286.118 li
203.512 286.094 li
201.026 286.068 li
198.54 286.038 li
196.054 286.004 li
193.568 285.963 li
191.082 285.916 li
188.596 285.862 li
186.111 285.799 li
183.625 285.728 li
181.139 285.647 li
178.653 285.558 li
176.167 285.46 li
173.682 285.354 li
171.196 285.24 li
168.71 285.12 li
166.224 284.992 li
163.738 284.857 li
161.252 284.714 li
158.767 284.563 li
156.281 284.401 li
153.795 284.229 li
153.795 284.229 li
151.309 284.042 li
151.31 284.043 li
148.824 283.841 li
148.824 283.841 li
146.338 283.622 li
146.339 283.623 li
143.853 283.385 li
143.854 283.385 li
141.367 283.128 li
141.368 283.128 li
138.882 282.851 li
138.883 282.851 li
136.397 282.552 li
136.398 282.552 li
133.911 282.232 li
133.912 282.233 li
131.426 281.891 li
131.427 281.891 li
128.942 281.526 li
126.457 281.134 li
123.972 280.708 li
121.488 280.238 li
119.005 279.705 li
116.523 279.083 li
114.042 278.336 li
111.563 277.416 li
109.085 276.262 li
106.608 274.802 li
104.131 272.952 li
101.653 270.62 li
99.1737 267.713 li
96.6929 264.146 li
94.2108 259.848 li
91.7273 254.779 li
89.2431 248.938 li
86.7582 242.375 li
84.2728 235.197 li
81.7868 227.579 li
81.7872 227.58 li
79.3009 219.755 li
78.0613 215.895 li
79.9887 212.985 li
82.5368 210.346 li
83.5757 212.877 li
86.3389 220.183 li
86.3386 220.182 li
89.1024 227.68 li
89.1026 227.681 li
91.8665 235.034 li
91.8672 235.036 li
94.631 241.978 li
94.6323 241.981 li
97.3961 248.321 li
97.398 248.325 li
100.162 253.951 li
100.165 253.956 li
102.929 258.825 li
102.933 258.832 li
105.696 262.957 li
105.702 262.964 li
108.466 266.398 li
108.472 266.405 li
111.236 269.226 li
111.244 269.233 li
114.008 271.529 li
114.016 271.535 li
116.78 273.398 li
116.788 273.403 li
119.552 274.914 li
119.559 274.918 li
122.323 276.153 li
122.329 276.155 li
125.093 277.174 li
125.098 277.176 li
127.862 278.027 li
127.866 278.028 li
130.63 278.75 li
130.634 278.75 li
133.398 279.371 li
133.4 279.372 li
136.164 279.914 li
136.166 279.914 li
138.93 280.393 li
138.932 280.393 li
141.696 280.82 li
141.697 280.82 li
144.461 281.206 li
144.462 281.206 li
147.226 281.557 li
147.227 281.557 li
149.991 281.879 li
149.992 281.88 li
152.756 282.179 li
152.756 282.179 li
155.521 282.461 li
158.285 282.729 li
161.049 282.987 li
163.813 283.238 li
166.577 283.484 li
169.341 283.726 li
172.105 283.964 li
174.869 284.198 li
177.633 284.426 li
180.397 284.647 li
183.161 284.859 li
185.926 285.059 li
188.69 285.245 li
191.455 285.415 li
194.218 285.568 li
194.219 285.568 li
196.984 285.704 li
199.748 285.821 li
202.512 285.921 li
205.277 286.005 li
208.041 286.073 li
210.805 286.127 li
213.57 286.169 li
215.46 286.19 li
.272648 .0224918 .0706493 0 cmyk
f
78.0613 215.895 mo
77.9807 215.644 li
79.8224 212.863 li
79.8342 212.849 li
82.4515 210.138 li
82.5368 210.346 li
79.9887 212.985 li
78.0613 215.895 li
f
82.4515 210.138 mo
80.8135 206.147 li
78.0535 200.396 li
75.299 196.008 li
72.5622 193.311 li
69.8589 192.513 li
69.3866 192.718 li
69.352 192.642 li
69.346 192.631 li
69.2882 192.537 li
69.8113 192.31 li
69.8813 192.306 li
72.6451 193.121 li
72.6882 193.146 li
75.452 195.87 li
75.4669 195.889 li
78.2308 200.292 li
78.2364 200.302 li
81.0002 206.061 li
81.0026 206.066 li
82.6075 209.976 li
82.4515 210.138 li
.174472 .0126955 .028748 0 cmyk
f
225.584 286.244 mo
224.626 286.244 li
221.872 286.236 li
220.915 286.229 li
218.428 286.211 li
215.942 286.193 li
215.46 286.19 li
213.57 286.169 li
210.805 286.127 li
208.041 286.073 li
205.277 286.005 li
202.512 285.921 li
199.748 285.821 li
196.984 285.704 li
194.219 285.568 li
194.218 285.568 li
191.455 285.415 li
188.69 285.245 li
185.926 285.059 li
183.161 284.859 li
180.397 284.647 li
177.633 284.426 li
174.869 284.198 li
172.105 283.964 li
169.341 283.726 li
166.577 283.484 li
163.813 283.238 li
161.049 282.987 li
158.285 282.729 li
155.521 282.461 li
152.756 282.179 li
152.756 282.179 li
149.992 281.88 li
149.991 281.879 li
147.227 281.557 li
147.226 281.557 li
144.462 281.206 li
144.461 281.206 li
141.697 280.82 li
141.696 280.82 li
138.932 280.393 li
138.93 280.393 li
136.166 279.914 li
136.164 279.914 li
133.4 279.372 li
133.398 279.371 li
130.634 278.75 li
130.63 278.75 li
127.866 278.028 li
127.862 278.027 li
125.098 277.176 li
125.093 277.174 li
122.329 276.155 li
122.323 276.153 li
119.559 274.918 li
119.552 274.914 li
116.788 273.403 li
116.78 273.398 li
114.016 271.535 li
114.008 271.529 li
111.244 269.233 li
111.236 269.226 li
108.472 266.405 li
108.466 266.398 li
105.702 262.964 li
105.696 262.957 li
102.933 258.832 li
102.929 258.825 li
100.165 253.956 li
100.162 253.951 li
97.398 248.325 li
97.3961 248.321 li
94.6323 241.981 li
94.631 241.978 li
91.8672 235.036 li
91.8665 235.034 li
89.1026 227.681 li
89.1024 227.68 li
86.3386 220.182 li
86.3389 220.183 li
83.5757 212.877 li
82.5368 210.346 li
82.6928 210.184 li
83.7664 212.8 li
83.7675 212.803 li
86.5313 220.11 li
86.5317 220.111 li
89.2955 227.609 li
89.2953 227.609 li
92.0587 234.961 li
94.8214 241.9 li
97.5837 248.236 li
100.345 253.858 li
103.106 258.721 li
105.865 262.839 li
108.623 266.265 li
111.379 269.078 li
114.135 271.368 li
116.891 273.224 li
119.647 274.732 li
122.403 275.964 li
125.162 276.98 li
127.921 277.829 li
130.68 278.55 li
133.441 279.17 li
136.202 279.712 li
138.965 280.19 li
141.726 280.617 li
144.489 281.002 li
147.251 281.353 li
150.015 281.675 li
150.014 281.675 li
152.778 281.975 li
152.777 281.975 li
155.541 282.256 li
158.304 282.524 li
161.068 282.782 li
163.831 283.033 li
166.595 283.279 li
169.359 283.521 li
172.122 283.759 li
174.886 283.993 li
177.65 284.221 li
180.413 284.442 li
183.177 284.654 li
185.94 284.854 li
188.703 285.04 li
191.467 285.21 li
194.23 285.363 li
194.229 285.363 li
196.993 285.498 li
199.756 285.616 li
202.519 285.716 li
205.282 285.799 li
208.046 285.867 li
210.809 285.921 li
213.572 285.963 li
216.336 285.994 li
219.099 286.016 li
221.863 286.031 li
224.626 286.038 li
225.584 286.038 li
225.584 286.244 li
.272648 .0224918 .0706493 0 cmyk
f
82.5368 210.346 mo
82.4515 210.138 li
82.6075 209.976 li
82.6928 210.184 li
82.5368 210.346 li
f
grestore
gsave
36.8779 286.791 mo
225.584 286.791 li
225.584 174.606 li
36.8779 174.606 li
36.8779 286.791 li
clp
36.8779 268.581 mo
36.8779 249.476 li
37.0352 249.034 li
37.0361 249.031 li
39.5223 241.346 li
39.5229 241.344 li
42.009 233.141 li
42.0094 233.14 li
44.4954 224.67 li
46.9813 216.243 li
49.4669 208.207 li
51.9518 200.929 li
54.435 194.763 li
56.914 190.026 li
59.38 186.965 li
61.8127 185.725 li
64.2346 186.309 li
66.6913 188.69 li
69.0976 192.619 li
67.0474 193.509 li
67.0107 193.536 li
64.2469 196.719 li
64.2346 196.737 li
61.4707 201.737 li
61.466 201.746 li
58.7022 208.277 li
58.7001 208.283 li
55.9363 215.968 li
55.9353 215.97 li
53.1716 224.381 li
53.1712 224.382 li
50.4074 233.081 li
50.4075 233.081 li
47.6439 241.66 li
44.8809 249.773 li
42.1185 257.156 li
39.3568 263.64 li
36.8779 268.581 li
.184451 .0814221 .0877089 0 cmyk
f
36.8779 282.885 mo
36.8779 269.04 li
39.5421 263.729 li
39.5448 263.723 li
42.3087 257.235 li
42.3103 257.23 li
45.0741 249.843 li
45.0752 249.84 li
47.839 241.725 li
47.8395 241.724 li
50.6033 233.144 li
50.6034 233.144 li
53.3673 224.444 li
53.3669 224.445 li
56.1304 216.036 li
58.8927 208.355 li
61.6534 201.832 li
64.4092 196.846 li
67.1507 193.688 li
69.1978 192.8 li
71.6495 198.191 li
74.1338 204.753 li
76.6191 212.078 li
77.8352 215.864 li
76.0656 218.536 li
76.0604 218.545 li
72.3036 225.648 li
72.3013 225.653 li
68.5444 233.721 li
68.5436 233.722 li
64.7868 242.228 li
64.7869 242.228 li
61.0306 250.644 li
57.2754 258.507 li
53.5217 265.468 li
49.7698 271.317 li
46.0209 275.989 li
42.275 279.538 li
38.5316 282.104 li
36.8779 282.885 li
.332921 .106966 .124758 0 cmyk
f
225.584 286.688 mo
222.668 286.688 li
218.911 286.688 li
215.154 286.688 li
211.398 286.688 li
207.641 286.688 li
203.884 286.688 li
200.127 286.688 li
196.37 286.688 li
192.613 286.688 li
188.856 286.688 li
185.1 286.688 li
181.343 286.688 li
177.586 286.688 li
173.829 286.688 li
170.072 286.688 li
166.315 286.688 li
162.559 286.688 li
158.802 286.688 li
155.045 286.688 li
151.288 286.688 li
147.531 286.688 li
143.774 286.688 li
140.018 286.688 li
136.261 286.688 li
132.504 286.688 li
128.747 286.688 li
124.99 286.688 li
121.233 286.688 li
117.477 286.688 li
113.72 286.688 li
109.963 286.688 li
106.206 286.688 li
102.449 286.688 li
98.6923 286.688 li
94.9356 286.688 li
91.1786 286.688 li
87.4218 286.688 li
83.6651 286.688 li
79.9081 286.688 li
76.1514 286.688 li
72.3946 286.688 li
68.6376 286.688 li
64.8809 286.688 li
61.1239 286.688 li
57.3671 286.688 li
53.6104 286.688 li
49.8534 286.688 li
46.0967 286.688 li
42.3399 286.688 li
38.5829 286.688 li
36.8779 286.688 li
36.8779 283.113 li
38.6269 282.287 li
38.6411 282.279 li
42.3979 279.703 li
42.4106 279.693 li
46.1674 276.134 li
46.1769 276.123 li
49.9337 271.442 li
49.94 271.433 li
53.6969 265.575 li
53.7008 265.569 li
57.4577 258.602 li
57.4599 258.598 li
61.2169 250.731 li
61.2179 250.729 li
64.9748 242.312 li
64.9749 242.311 li
68.7314 233.807 li
72.4866 225.742 li
76.2399 218.646 li
77.9158 216.115 li
79.1049 219.817 li
81.591 227.642 li
81.5913 227.643 li
84.0774 235.262 li
84.078 235.264 li
86.5643 242.443 li
86.5652 242.446 li
89.0514 249.013 li
89.0529 249.017 li
91.539 254.862 li
91.5414 254.867 li
94.0275 259.942 li
94.0308 259.948 li
96.517 264.253 li
96.5215 264.26 li
99.0077 267.835 li
99.0139 267.843 li
101.5 270.758 li
101.508 270.766 li
103.994 273.106 li
104.003 273.113 li
106.489 274.971 li
106.498 274.977 li
108.985 276.442 li
108.993 276.447 li
111.479 277.604 li
111.487 277.607 li
113.973 278.53 li
113.979 278.532 li
116.466 279.281 li
116.47 279.282 li
118.956 279.905 li
118.96 279.906 li
121.446 280.439 li
121.448 280.44 li
123.935 280.91 li
123.936 280.911 li
126.423 281.337 li
126.424 281.337 li
128.91 281.729 li
128.911 281.729 li
131.397 282.094 li
131.398 282.095 li
133.884 282.436 li
133.885 282.437 li
136.371 282.756 li
136.372 282.756 li
138.858 283.055 li
138.859 283.055 li
141.345 283.333 li
141.346 283.333 li
143.832 283.59 li
143.833 283.59 li
146.319 283.827 li
146.32 283.827 li
148.806 284.046 li
148.807 284.046 li
151.293 284.248 li
151.294 284.248 li
153.78 284.434 li
153.78 284.434 li
156.267 284.607 li
158.754 284.768 li
161.24 284.919 li
163.727 285.062 li
166.213 285.197 li
168.7 285.325 li
171.186 285.446 li
173.672 285.56 li
176.159 285.666 li
178.645 285.764 li
181.132 285.853 li
183.618 285.933 li
186.105 286.005 li
188.591 286.067 li
191.078 286.122 li
193.564 286.169 li
196.051 286.209 li
198.537 286.244 li
201.023 286.274 li
203.51 286.3 li
205.996 286.323 li
208.482 286.344 li
210.968 286.363 li
213.455 286.382 li
215.941 286.399 li
218.427 286.417 li
220.913 286.435 li
223.399 286.454 li
225.584 286.471 li
225.584 286.688 li
.413336 .123903 .157534 0 cmyk
f
36.8779 283.113 mo
36.8779 282.885 li
38.5316 282.104 li
42.275 279.538 li
46.0209 275.989 li
49.7698 271.317 li
53.5217 265.468 li
57.2754 258.507 li
61.0306 250.644 li
64.7869 242.228 li
64.7868 242.228 li
68.5436 233.722 li
68.5444 233.721 li
72.3013 225.653 li
72.3036 225.648 li
76.0604 218.545 li
76.0656 218.536 li
77.8352 215.864 li
77.9158 216.115 li
76.2399 218.646 li
72.4866 225.742 li
68.7314 233.807 li
64.9749 242.311 li
64.9748 242.312 li
61.2179 250.729 li
61.2169 250.731 li
57.4599 258.598 li
57.4577 258.602 li
53.7008 265.569 li
53.6969 265.575 li
49.94 271.433 li
49.9337 271.442 li
46.1769 276.123 li
46.1674 276.134 li
42.4106 279.693 li
42.3979 279.703 li
38.6411 282.279 li
38.6269 282.287 li
36.8779 283.113 li
f
36.8779 269.04 mo
36.8779 268.581 li
39.3568 263.64 li
42.1185 257.156 li
44.8809 249.773 li
47.6439 241.66 li
50.4075 233.081 li
50.4074 233.081 li
53.1712 224.382 li
53.1716 224.381 li
55.9353 215.97 li
55.9363 215.968 li
58.7001 208.283 li
58.7022 208.277 li
61.466 201.746 li
61.4707 201.737 li
64.2346 196.737 li
64.2469 196.719 li
67.0107 193.536 li
67.0474 193.509 li
69.0976 192.619 li
69.1673 192.733 li
69.1978 192.8 li
67.1507 193.688 li
64.4092 196.846 li
61.6534 201.832 li
58.8927 208.355 li
56.1304 216.036 li
53.3669 224.445 li
53.3673 224.444 li
50.6034 233.144 li
50.6033 233.144 li
47.8395 241.724 li
47.839 241.725 li
45.0752 249.84 li
45.0741 249.843 li
42.3103 257.23 li
42.3087 257.235 li
39.5448 263.723 li
39.5421 263.729 li
36.8779 269.04 li
.332921 .106966 .124758 0 cmyk
f
225.584 286.791 mo
36.8779 286.791 li
36.8779 286.688 li
36.9383 286.688 li
39.4244 286.688 li
41.9106 286.688 li
44.3968 286.688 li
46.8829 286.688 li
49.369 286.688 li
51.8552 286.688 li
54.3415 286.688 li
56.8276 286.688 li
59.3138 286.688 li
61.7999 286.688 li
64.2861 286.688 li
66.7722 286.688 li
69.2584 286.688 li
71.7445 286.688 li
74.2307 286.688 li
76.7168 286.688 li
79.203 286.688 li
81.6891 286.688 li
84.1753 286.688 li
86.6614 286.688 li
89.1476 286.688 li
91.6337 286.688 li
94.1199 286.688 li
96.606 286.688 li
99.0922 286.688 li
101.578 286.688 li
104.064 286.688 li
106.551 286.688 li
109.037 286.688 li
111.523 286.688 li
114.009 286.688 li
116.495 286.688 li
118.981 286.688 li
121.468 286.688 li
123.954 286.688 li
126.44 286.688 li
128.926 286.688 li
131.412 286.688 li
133.898 286.688 li
136.385 286.688 li
138.871 286.688 li
141.357 286.688 li
143.843 286.688 li
146.329 286.688 li
148.815 286.688 li
151.301 286.688 li
153.788 286.688 li
156.274 286.688 li
158.76 286.688 li
161.246 286.688 li
163.732 286.688 li
166.218 286.688 li
168.704 286.688 li
171.191 286.688 li
173.677 286.688 li
176.163 286.688 li
178.649 286.688 li
181.135 286.688 li
183.621 286.688 li
186.108 286.688 li
188.594 286.688 li
191.08 286.688 li
193.566 286.688 li
196.052 286.688 li
198.538 286.688 li
201.025 286.688 li
203.511 286.688 li
205.997 286.688 li
208.483 286.688 li
210.969 286.688 li
213.455 286.688 li
215.941 286.688 li
218.428 286.688 li
220.914 286.688 li
223.4 286.688 li
225.584 286.688 li
225.584 286.791 li
.413336 .123903 .157534 0 cmyk
f
36.8779 249.476 mo
36.8779 248.852 li
39.3264 241.283 li
41.8122 233.081 li
41.8119 233.082 li
44.2981 224.612 li
46.7842 216.184 li
46.7847 216.182 li
49.2709 208.144 li
49.2718 208.142 li
51.7579 200.859 li
51.7598 200.854 li
54.246 194.682 li
54.2503 194.672 li
56.7365 189.921 li
56.7475 189.905 li
59.2336 186.819 li
59.267 186.792 li
61.7531 185.524 li
61.824 185.516 li
64.3101 186.116 li
64.3576 186.142 li
66.8438 188.551 li
66.8598 188.571 li
69.2882 192.537 li
69.0976 192.619 li
66.6913 188.69 li
64.2346 186.309 li
61.8127 185.725 li
59.38 186.965 li
56.914 190.026 li
54.435 194.763 li
51.9518 200.929 li
49.4669 208.207 li
46.9813 216.243 li
44.4954 224.67 li
42.0094 233.14 li
42.009 233.141 li
39.5229 241.344 li
39.5223 241.346 li
37.0361 249.031 li
37.0352 249.034 li
36.8779 249.476 li
.184451 .0814221 .0877089 0 cmyk
f
77.8352 215.864 mo
76.6191 212.078 li
74.1338 204.753 li
71.6495 198.191 li
69.1978 192.8 li
69.3866 192.718 li
71.8381 198.108 li
71.8407 198.115 li
74.3269 204.682 li
74.328 204.685 li
76.8142 212.013 li
76.8148 212.014 li
77.9807 215.644 li
77.8352 215.864 li
.332921 .106966 .124758 0 cmyk
f
225.584 286.471 mo
223.399 286.454 li
220.913 286.435 li
218.427 286.417 li
215.941 286.399 li
213.455 286.382 li
210.968 286.363 li
208.482 286.344 li
205.996 286.323 li
203.51 286.3 li
201.023 286.274 li
198.537 286.244 li
196.051 286.209 li
193.564 286.169 li
191.078 286.122 li
188.591 286.067 li
186.105 286.005 li
183.618 285.933 li
181.132 285.853 li
178.645 285.764 li
176.159 285.666 li
173.672 285.56 li
171.186 285.446 li
168.7 285.325 li
166.213 285.197 li
163.727 285.062 li
161.24 284.919 li
158.754 284.768 li
156.267 284.607 li
153.78 284.434 li
153.78 284.434 li
151.294 284.248 li
151.293 284.248 li
148.807 284.046 li
148.806 284.046 li
146.32 283.827 li
146.319 283.827 li
143.833 283.59 li
143.832 283.59 li
141.346 283.333 li
141.345 283.333 li
138.859 283.055 li
138.858 283.055 li
136.372 282.756 li
136.371 282.756 li
133.885 282.437 li
133.884 282.436 li
131.398 282.095 li
131.397 282.094 li
128.911 281.729 li
128.91 281.729 li
126.424 281.337 li
126.423 281.337 li
123.936 280.911 li
123.935 280.91 li
121.448 280.44 li
121.446 280.439 li
118.96 279.906 li
118.956 279.905 li
116.47 279.282 li
116.466 279.281 li
113.979 278.532 li
113.973 278.53 li
111.487 277.607 li
111.479 277.604 li
108.993 276.447 li
108.985 276.442 li
106.498 274.977 li
106.489 274.971 li
104.003 273.113 li
103.994 273.106 li
101.508 270.766 li
101.5 270.758 li
99.0139 267.843 li
99.0077 267.835 li
96.5215 264.26 li
96.517 264.253 li
94.0308 259.948 li
94.0275 259.942 li
91.5414 254.867 li
91.539 254.862 li
89.0529 249.017 li
89.0514 249.013 li
86.5652 242.446 li
86.5643 242.443 li
84.078 235.264 li
84.0774 235.262 li
81.5913 227.643 li
81.591 227.642 li
79.1049 219.817 li
77.9158 216.115 li
78.0613 215.895 li
79.3009 219.755 li
81.7872 227.58 li
81.7868 227.579 li
84.2728 235.197 li
86.7582 242.375 li
89.2431 248.938 li
91.7273 254.779 li
94.2108 259.848 li
96.6929 264.146 li
99.1737 267.713 li
101.653 270.62 li
104.131 272.952 li
106.608 274.802 li
109.085 276.262 li
111.563 277.416 li
114.042 278.336 li
116.523 279.083 li
119.005 279.705 li
121.488 280.238 li
123.972 280.708 li
126.457 281.134 li
128.942 281.526 li
131.427 281.891 li
131.426 281.891 li
133.912 282.233 li
133.911 282.232 li
136.398 282.552 li
136.397 282.552 li
138.883 282.851 li
138.882 282.851 li
141.368 283.128 li
141.367 283.128 li
143.854 283.385 li
143.853 283.385 li
146.339 283.623 li
146.338 283.622 li
148.824 283.841 li
148.824 283.841 li
151.31 284.043 li
151.309 284.042 li
153.795 284.229 li
153.795 284.229 li
156.281 284.401 li
158.767 284.563 li
161.252 284.714 li
163.738 284.857 li
166.224 284.992 li
168.71 285.12 li
171.196 285.24 li
173.682 285.354 li
176.167 285.46 li
178.653 285.558 li
181.139 285.647 li
183.625 285.728 li
186.111 285.799 li
188.596 285.862 li
191.082 285.916 li
193.568 285.963 li
196.054 286.004 li
198.54 286.038 li
201.026 286.068 li
203.512 286.094 li
205.998 286.118 li
208.484 286.138 li
210.97 286.158 li
213.456 286.176 li
215.46 286.19 li
216.334 286.2 li
219.098 286.222 li
221.862 286.236 li
221.872 286.236 li
223.401 286.248 li
225.584 286.265 li
225.584 286.471 li
.413336 .123903 .157534 0 cmyk
f
77.9158 216.115 mo
77.8352 215.864 li
77.9807 215.644 li
78.0613 215.895 li
77.9158 216.115 li
f
221.872 286.236 mo
221.862 286.236 li
219.098 286.222 li
216.334 286.2 li
215.46 286.19 li
215.942 286.193 li
218.428 286.211 li
220.915 286.229 li
221.872 286.236 li
f
69.1978 192.8 mo
69.1673 192.733 li
69.0976 192.619 li
69.2882 192.537 li
69.346 192.631 li
69.352 192.642 li
69.3866 192.718 li
69.1978 192.8 li
.332921 .106966 .124758 0 cmyk
f
grestore
gsave
36.8779 286.791 mo
225.584 286.791 li
225.584 174.606 li
36.8779 174.606 li
36.8779 286.791 li
clp
1.20002 lw
1 lc
34.8261 283.968 mo
38.583 282.194 li
42.3398 279.618 li
46.0967 276.059 li
49.8535 271.377 li
53.6103 265.52 li
57.3672 258.554 li
61.124 250.687 li
64.8808 242.27 li
68.6377 233.764 li
72.3945 225.696 li
76.1514 218.593 li
79.9082 212.92 li
83.665 209.029 li
87.4219 207.13 li
91.1787 207.274 li
94.9355 209.368 li
98.6924 213.189 li
102.449 218.415 li
106.206 224.659 li
109.963 231.507 li
113.72 238.555 li
117.477 245.446 li
121.233 251.894 li
124.99 257.697 li
128.747 262.746 li
132.504 267.007 li
136.261 270.509 li
140.018 273.32 li
143.774 275.532 li
147.531 277.244 li
151.288 278.551 li
155.045 279.543 li
158.802 280.297 li
162.559 280.88 li
166.315 281.345 li
170.072 281.732 li
173.829 282.069 li
177.586 282.377 li
181.343 282.665 li
185.1 282.94 li
188.856 283.205 li
192.613 283.462 li
196.37 283.71 li
200.127 283.951 li
203.884 284.184 li
207.641 284.409 li
211.398 284.626 li
215.154 284.836 li
218.911 285.037 li
222.668 285.23 li
226.425 285.414 li
.521935 .042298 .260502 0 cmyk
@
grestore
gsave
36.8779 286.791 mo
225.584 286.791 li
225.584 174.606 li
36.8779 174.606 li
36.8779 286.791 li
clp
1.20002 lw
1 lc
36.6863 269.193 mo
39.4502 263.683 li
42.214 257.194 li
44.9778 249.807 li
47.7416 241.692 li
50.5054 233.112 li
53.2693 224.413 li
56.0331 216.002 li
58.7969 208.318 li
61.5607 201.787 li
64.3245 196.786 li
67.0884 193.603 li
69.8522 192.404 li
72.616 193.22 li
75.3798 195.943 li
78.1436 200.346 li
80.9075 206.105 li
83.6713 212.839 li
86.4351 220.147 li
89.1989 227.645 li
91.9627 234.998 li
94.7266 241.94 li
97.4904 248.28 li
100.254 253.906 li
103.018 258.775 li
105.782 262.9 li
108.546 266.333 li
111.31 269.154 li
114.073 271.45 li
116.837 273.312 li
119.601 274.824 li
122.365 276.059 li
125.129 277.077 li
127.892 277.928 li
130.656 278.65 li
133.42 279.271 li
136.184 279.813 li
138.948 280.291 li
141.712 280.719 li
144.475 281.104 li
147.239 281.455 li
150.003 281.777 li
152.767 282.077 li
155.531 282.359 li
158.294 282.627 li
161.058 282.885 li
163.822 283.135 li
166.586 283.381 li
169.35 283.623 li
172.114 283.861 li
174.877 284.095 li
177.641 284.324 li
180.405 284.545 li
183.169 284.757 li
185.933 284.956 li
188.696 285.142 li
191.46 285.312 li
194.224 285.466 li
196.988 285.601 li
199.752 285.719 li
202.516 285.819 li
205.279 285.902 li
208.043 285.97 li
210.807 286.024 li
213.571 286.066 li
216.335 286.097 li
219.098 286.119 li
221.862 286.133 li
224.626 286.141 li
227.39 286.142 li
.718349 .18613 .110262 0 cmyk
@
grestore
gsave
36.8779 286.791 mo
225.584 286.791 li
225.584 174.606 li
36.8779 174.606 li
36.8779 286.791 li
clp
1.20002 lw
1 lc
34.4522 255.983 mo
36.9383 248.999 li
39.4245 241.314 li
41.9106 233.111 li
44.3968 224.641 li
46.883 216.213 li
49.3691 208.175 li
51.8553 200.893 li
54.3414 194.72 li
56.8276 189.969 li
59.3137 186.883 li
61.7999 185.616 li
64.286 186.216 li
66.7722 188.625 li
69.2583 192.685 li
71.7445 198.151 li
74.2306 204.718 li
76.7168 212.046 li
79.2029 219.786 li
81.6891 227.611 li
84.1753 235.23 li
86.6614 242.41 li
89.1476 248.977 li
91.6337 254.822 li
94.1199 259.897 li
96.606 264.201 li
99.0922 267.776 li
101.578 270.691 li
104.065 273.031 li
106.551 274.888 li
109.037 276.354 li
111.523 277.511 li
114.009 278.434 li
116.495 279.182 li
118.981 279.805 li
121.468 280.339 li
123.954 280.809 li
126.44 281.235 li
128.926 281.627 li
131.412 281.993 li
133.898 282.334 li
136.385 282.654 li
138.871 282.953 li
141.357 283.231 li
143.843 283.488 li
146.329 283.725 li
148.815 283.944 li
151.301 284.145 li
153.788 284.331 li
156.274 284.504 li
158.76 284.665 li
161.246 284.816 li
163.732 284.959 li
166.218 285.094 li
168.705 285.222 li
171.191 285.343 li
173.677 285.457 li
176.163 285.563 li
178.649 285.661 li
181.135 285.75 li
183.621 285.83 li
186.108 285.902 li
188.594 285.965 li
191.08 286.019 li
193.566 286.066 li
196.052 286.106 li
198.538 286.141 li
201.025 286.171 li
203.511 286.197 li
205.997 286.22 li
208.483 286.241 li
210.969 286.26 li
213.455 286.279 li
215.941 286.296 li
218.428 286.314 li
220.914 286.332 li
223.4 286.351 li
225.886 286.37 li
.85745 .505058 .385168 .136477 cmyk
@
grestore
1.07145 lw
2 lc
0 lj
36.8779 286.791 mo
225.584 286.791 li
@
150.566 183.319 mo
151.201 183.262 li
151.23 183.519 151.301 183.733 151.416 183.898 cv
151.523 184.062 151.694 184.19 151.93 184.29 cv
152.158 184.39 152.422 184.44 152.715 184.44 cv
152.972 184.44 153.193 184.404 153.393 184.326 cv
153.593 184.254 153.736 184.147 153.835 184.012 cv
153.928 183.883 153.978 183.733 153.978 183.576 cv
153.978 183.419 153.928 183.277 153.835 183.155 cv
153.743 183.041 153.593 182.941 153.379 182.855 cv
153.243 182.798 152.943 182.72 152.472 182.605 cv
152.001 182.491 151.673 182.384 151.487 182.284 cv
151.244 182.156 151.059 181.999 150.937 181.813 cv
150.816 181.628 150.759 181.413 150.759 181.171 cv
150.759 180.914 150.83 180.678 150.98 180.45 cv
151.123 180.228 151.337 180.057 151.623 179.943 cv
151.901 179.829 152.215 179.764 152.558 179.764 cv
152.936 179.764 153.272 179.829 153.557 179.95 cv
153.843 180.071 154.071 180.25 154.228 180.485 cv
154.385 180.728 154.464 180.992 154.478 181.292 cv
153.828 181.342 li
153.793 181.021 153.678 180.778 153.479 180.607 cv
153.279 180.443 152.979 180.357 152.586 180.357 cv
152.172 180.357 151.88 180.435 151.694 180.585 cv
151.508 180.735 151.416 180.914 151.416 181.128 cv
151.416 181.313 151.48 181.463 151.608 181.578 cv
151.737 181.699 152.079 181.82 152.629 181.949 cv
153.179 182.077 153.557 182.184 153.764 182.27 cv
154.057 182.413 154.278 182.584 154.421 182.791 cv
154.564 183.005 154.635 183.248 154.635 183.519 cv
154.635 183.79 154.556 184.047 154.399 184.29 cv
154.242 184.533 154.014 184.718 153.728 184.847 cv
153.436 184.975 153.107 185.04 152.743 185.04 cv
152.279 185.04 151.894 184.975 151.58 184.847 cv
151.266 184.718 151.023 184.511 150.844 184.24 cv
150.666 183.969 150.573 183.662 150.566 183.319 cv
f
158.012 183.769 mo
158.661 183.848 li
158.554 184.233 158.361 184.526 158.09 184.733 cv
157.812 184.94 157.462 185.04 157.034 185.04 cv
156.491 185.04 156.056 184.876 155.742 184.547 cv
155.427 184.219 155.27 183.748 155.27 183.141 cv
155.27 182.52 155.427 182.034 155.749 181.692 cv
156.063 181.349 156.484 181.178 156.998 181.178 cv
157.49 181.178 157.897 181.349 158.211 181.685 cv
158.525 182.02 158.683 182.491 158.683 183.105 cv
158.675 183.269 li
155.913 183.269 li
155.934 183.683 156.048 183.99 156.255 184.205 cv
156.462 184.419 156.719 184.526 157.034 184.526 cv
157.262 184.526 157.462 184.469 157.626 184.347 cv
157.783 184.233 157.912 184.04 158.012 183.769 cv
155.949 182.755 mo
158.019 182.755 li
157.99 182.441 157.912 182.213 157.783 182.056 cv
157.583 181.813 157.319 181.692 157.005 181.692 cv
156.712 181.692 156.47 181.792 156.277 181.984 cv
156.077 182.177 155.97 182.434 155.949 182.755 cv
f
161.802 186.375 mo
161.802 184.569 li
161.702 184.711 161.566 184.826 161.395 184.911 cv
161.217 184.997 161.031 185.04 160.838 185.04 cv
160.396 185.04 160.01 184.868 159.696 184.519 cv
159.382 184.169 159.225 183.691 159.225 183.077 cv
159.225 182.705 159.289 182.377 159.418 182.077 cv
159.546 181.785 159.732 181.563 159.975 181.406 cv
160.217 181.256 160.489 181.178 160.788 181.178 cv
161.245 181.178 161.602 181.371 161.866 181.756 cv
161.866 181.256 li
162.43 181.256 li
162.43 186.375 li
161.802 186.375 li
159.868 183.098 mo
159.868 183.576 159.967 183.933 160.167 184.169 cv
160.367 184.412 160.603 184.526 160.888 184.526 cv
161.152 184.526 161.381 184.419 161.574 184.19 cv
161.766 183.962 161.866 183.619 161.866 183.155 cv
161.866 182.67 161.759 182.299 161.559 182.049 cv
161.359 181.799 161.117 181.67 160.846 181.67 cv
160.574 181.67 160.339 181.792 160.153 182.02 cv
159.96 182.249 159.868 182.613 159.868 183.098 cv
f
165.842 184.961 mo
165.842 184.419 li
165.55 184.833 165.157 185.04 164.665 185.04 cv
164.443 185.04 164.236 184.997 164.051 184.918 cv
163.865 184.84 163.722 184.733 163.629 184.604 cv
163.537 184.476 163.472 184.326 163.437 184.14 cv
163.408 184.019 163.401 183.826 163.401 183.555 cv
163.401 181.256 li
164.029 181.256 li
164.029 183.312 li
164.029 183.641 164.036 183.862 164.065 183.976 cv
164.108 184.14 164.186 184.269 164.315 184.362 cv
164.443 184.461 164.6 184.504 164.793 184.504 cv
164.979 184.504 165.15 184.461 165.321 184.362 cv
165.485 184.269 165.6 184.14 165.671 183.969 cv
165.735 183.805 165.771 183.562 165.771 183.241 cv
165.771 181.256 li
166.399 181.256 li
166.399 184.961 li
165.842 184.961 li
f
169.918 183.769 mo
170.568 183.848 li
170.461 184.233 170.268 184.526 169.997 184.733 cv
169.719 184.94 169.369 185.04 168.94 185.04 cv
168.398 185.04 167.962 184.876 167.648 184.547 cv
167.334 184.219 167.177 183.748 167.177 183.141 cv
167.177 182.52 167.334 182.034 167.656 181.692 cv
167.97 181.349 168.391 181.178 168.905 181.178 cv
169.397 181.178 169.804 181.349 170.118 181.685 cv
170.432 182.02 170.589 182.491 170.589 183.105 cv
170.582 183.269 li
167.82 183.269 li
167.841 183.683 167.955 183.99 168.162 184.205 cv
168.369 184.419 168.626 184.526 168.94 184.526 cv
169.169 184.526 169.369 184.469 169.533 184.347 cv
169.69 184.233 169.818 184.04 169.918 183.769 cv
167.855 182.755 mo
169.926 182.755 li
169.897 182.441 169.818 182.213 169.69 182.056 cv
169.49 181.813 169.226 181.692 168.912 181.692 cv
168.619 181.692 168.377 181.792 168.184 181.984 cv
167.984 182.177 167.877 182.434 167.855 182.755 cv
f
171.353 184.961 mo
171.353 181.256 li
171.917 181.256 li
171.917 181.785 li
172.188 181.385 172.581 181.178 173.095 181.178 cv
173.316 181.178 173.523 181.221 173.709 181.299 cv
173.895 181.378 174.037 181.485 174.13 181.613 cv
174.223 181.742 174.287 181.899 174.323 182.077 cv
174.344 182.191 174.359 182.398 174.359 182.684 cv
174.359 184.961 li
173.73 184.961 li
173.73 182.713 li
173.73 182.456 173.702 182.27 173.659 182.142 cv
173.609 182.013 173.523 181.913 173.402 181.835 cv
173.273 181.763 173.131 181.72 172.967 181.72 cv
172.695 181.72 172.46 181.806 172.267 181.977 cv
172.074 182.149 171.981 182.47 171.981 182.941 cv
171.981 184.961 li
171.353 184.961 li
f
177.735 183.605 mo
178.356 183.683 li
178.285 184.112 178.113 184.447 177.835 184.683 cv
177.557 184.925 177.214 185.04 176.814 185.04 cv
176.3 185.04 175.893 184.876 175.586 184.547 cv
175.279 184.219 175.129 183.748 175.129 183.127 cv
175.129 182.727 175.194 182.377 175.329 182.077 cv
175.458 181.777 175.658 181.556 175.929 181.406 cv
176.2 181.256 176.493 181.178 176.814 181.178 cv
177.214 181.178 177.542 181.285 177.799 181.485 cv
178.056 181.685 178.22 181.977 178.292 182.349 cv
177.685 182.441 li
177.628 182.199 177.521 182.013 177.378 181.885 cv
177.228 181.756 177.05 181.692 176.843 181.692 cv
176.521 181.692 176.264 181.806 176.065 182.034 cv
175.865 182.263 175.772 182.62 175.772 183.105 cv
175.772 183.605 175.865 183.969 176.057 184.19 cv
176.243 184.419 176.493 184.526 176.807 184.526 cv
177.05 184.526 177.257 184.454 177.421 184.304 cv
177.585 184.155 177.692 183.919 177.735 183.605 cv
f
181.426 183.769 mo
182.075 183.848 li
181.968 184.233 181.775 184.526 181.504 184.733 cv
181.226 184.94 180.876 185.04 180.448 185.04 cv
179.905 185.04 179.47 184.876 179.156 184.547 cv
178.841 184.219 178.684 183.748 178.684 183.141 cv
178.684 182.52 178.841 182.034 179.163 181.692 cv
179.477 181.349 179.898 181.178 180.412 181.178 cv
180.904 181.178 181.311 181.349 181.625 181.685 cv
181.94 182.02 182.097 182.491 182.097 183.105 cv
182.089 183.269 li
179.327 183.269 li
179.348 183.683 179.462 183.99 179.67 184.205 cv
179.877 184.419 180.134 184.526 180.448 184.526 cv
180.676 184.526 180.876 184.469 181.04 184.347 cv
181.197 184.233 181.326 184.04 181.426 183.769 cv
179.363 182.755 mo
181.433 182.755 li
181.404 182.441 181.326 182.213 181.197 182.056 cv
180.997 181.813 180.733 181.692 180.419 181.692 cv
180.126 181.692 179.884 181.792 179.691 181.984 cv
179.491 182.177 179.384 182.434 179.363 182.755 cv
f
184.845 180.571 mo
184.845 179.85 li
185.473 179.85 li
185.473 180.571 li
184.845 180.571 li
184.845 184.961 mo
184.845 181.256 li
185.473 181.256 li
185.473 184.961 li
184.845 184.961 li
f
188.828 184.961 mo
188.828 184.497 li
188.593 184.861 188.25 185.04 187.793 185.04 cv
187.493 185.04 187.222 184.961 186.979 184.797 cv
186.729 184.64 186.537 184.412 186.401 184.119 cv
186.265 183.833 186.201 183.498 186.201 183.112 cv
186.201 182.748 186.258 182.413 186.387 182.113 cv
186.508 181.813 186.694 181.578 186.936 181.421 cv
187.179 181.263 187.458 181.178 187.764 181.178 cv
187.986 181.178 188.186 181.228 188.364 181.321 cv
188.535 181.413 188.678 181.535 188.785 181.685 cv
188.785 179.85 li
189.413 179.85 li
189.413 184.961 li
188.828 184.961 li
186.851 183.112 mo
186.851 183.591 186.944 183.948 187.143 184.176 cv
187.343 184.412 187.579 184.526 187.857 184.526 cv
188.129 184.526 188.357 184.419 188.55 184.19 cv
188.742 183.969 188.842 183.626 188.842 183.169 cv
188.842 182.663 188.742 182.291 188.55 182.049 cv
188.35 181.813 188.114 181.692 187.829 181.692 cv
187.543 181.692 187.315 181.806 187.129 182.034 cv
186.944 182.263 186.851 182.627 186.851 183.112 cv
f
192.933 183.769 mo
193.582 183.848 li
193.475 184.233 193.282 184.526 193.011 184.733 cv
192.733 184.94 192.383 185.04 191.955 185.04 cv
191.412 185.04 190.977 184.876 190.663 184.547 cv
190.349 184.219 190.192 183.748 190.192 183.141 cv
190.192 182.52 190.349 182.034 190.67 181.692 cv
190.984 181.349 191.405 181.178 191.919 181.178 cv
192.412 181.178 192.818 181.349 193.133 181.685 cv
193.447 182.02 193.604 182.491 193.604 183.105 cv
193.597 183.269 li
190.834 183.269 li
190.855 183.683 190.97 183.99 191.177 184.205 cv
191.384 184.419 191.641 184.526 191.955 184.526 cv
192.183 184.526 192.383 184.469 192.547 184.347 cv
192.704 184.233 192.833 184.04 192.933 183.769 cv
190.87 182.755 mo
192.94 182.755 li
192.911 182.441 192.833 182.213 192.704 182.056 cv
192.504 181.813 192.24 181.692 191.926 181.692 cv
191.634 181.692 191.391 181.792 191.198 181.984 cv
190.998 182.177 190.891 182.434 190.87 182.755 cv
f
194.368 184.961 mo
194.368 181.256 li
194.931 181.256 li
194.931 181.785 li
195.203 181.385 195.595 181.178 196.109 181.178 cv
196.331 181.178 196.538 181.221 196.723 181.299 cv
196.909 181.378 197.052 181.485 197.144 181.613 cv
197.237 181.742 197.301 181.899 197.337 182.077 cv
197.359 182.191 197.373 182.398 197.373 182.684 cv
197.373 184.961 li
196.745 184.961 li
196.745 182.713 li
196.745 182.456 196.716 182.27 196.673 182.142 cv
196.623 182.013 196.538 181.913 196.416 181.835 cv
196.288 181.763 196.145 181.72 195.981 181.72 cv
195.71 181.72 195.474 181.806 195.281 181.977 cv
195.089 182.149 194.996 182.47 194.996 182.941 cv
194.996 184.961 li
194.368 184.961 li
f
199.707 184.397 mo
199.8 184.954 li
199.614 184.983 199.457 185.004 199.322 185.004 cv
199.093 185.004 198.915 184.968 198.793 184.904 cv
198.665 184.833 198.579 184.74 198.529 184.619 cv
198.472 184.504 198.451 184.254 198.451 183.876 cv
198.451 181.749 li
197.994 181.749 li
197.994 181.256 li
198.451 181.256 li
198.451 180.343 li
199.072 179.964 li
199.072 181.256 li
199.707 181.256 li
199.707 181.749 li
199.072 181.749 li
199.072 183.912 li
199.072 184.097 199.079 184.212 199.107 184.262 cv
199.215 184.383 li
199.265 184.412 199.336 184.426 199.429 184.426 cv
199.5 184.426 199.593 184.419 199.707 184.397 cv
f
200.321 180.571 mo
200.321 179.85 li
200.949 179.85 li
200.949 180.571 li
200.321 180.571 li
200.321 184.961 mo
200.321 181.256 li
200.949 181.256 li
200.949 184.961 li
200.321 184.961 li
f
203.276 184.397 mo
203.369 184.954 li
203.184 184.983 203.026 185.004 202.891 185.004 cv
202.662 185.004 202.484 184.968 202.363 184.904 cv
202.234 184.833 202.148 184.74 202.098 184.619 cv
202.041 184.504 202.02 184.254 202.02 183.876 cv
202.02 181.749 li
201.563 181.749 li
201.563 181.256 li
202.02 181.256 li
202.02 180.343 li
202.641 179.964 li
202.641 181.256 li
203.276 181.256 li
203.276 181.749 li
202.641 181.749 li
202.641 183.912 li
202.641 184.097 202.648 184.212 202.677 184.262 cv
202.784 184.383 li
202.834 184.412 202.905 184.426 202.998 184.426 cv
203.069 184.426 203.162 184.419 203.276 184.397 cv
f
203.862 186.382 mo
203.79 185.789 li
203.926 185.825 204.047 185.846 204.154 185.846 cv
204.29 185.846 204.397 185.818 204.483 185.775 cv
204.69 185.582 li
204.733 185.518 204.797 185.361 204.882 185.111 cv
204.94 184.961 li
203.533 181.256 li
204.211 181.256 li
204.982 183.405 li
205.082 183.676 205.168 183.962 205.247 184.262 cv
205.318 183.976 205.404 183.691 205.503 183.419 cv
206.296 181.256 li
206.924 181.256 li
205.518 185.018 li
205.361 185.418 205.247 185.696 205.168 185.853 cv
205.054 186.061 204.925 186.21 204.783 186.31 cv
204.64 186.403 204.468 186.453 204.269 186.453 cv
204.14 186.453 204.004 186.425 203.862 186.382 cv
f
210.643 186.453 mo
210.293 186.018 210.001 185.511 209.765 184.933 cv
209.522 184.347 209.408 183.741 209.408 183.112 cv
209.408 182.563 209.494 182.034 209.672 181.52 cv
209.879 180.935 210.201 180.35 210.643 179.764 cv
211.093 179.764 li
210.807 180.25 210.622 180.6 210.536 180.799 cv
210.393 181.121 210.279 181.456 210.201 181.806 cv
210.101 182.241 210.051 182.677 210.051 183.112 cv
210.051 184.233 210.393 185.34 211.093 186.453 cv
210.643 186.453 li
f
211.764 181.078 mo
211.764 180.714 211.849 180.407 212.035 180.15 cv
212.221 179.893 212.485 179.764 212.835 179.764 cv
213.156 179.764 213.42 179.879 213.634 180.107 cv
213.841 180.335 213.948 180.671 213.948 181.114 cv
213.948 181.549 213.841 181.885 213.627 182.113 cv
213.413 182.349 213.156 182.463 212.842 182.463 cv
212.535 182.463 212.278 182.349 212.071 182.12 cv
211.864 181.892 211.764 181.549 211.764 181.078 cv
212.856 180.2 mo
212.699 180.2 212.563 180.271 212.463 180.4 cv
212.363 180.535 212.313 180.785 212.313 181.142 cv
212.313 181.47 212.363 181.706 212.471 181.835 cv
212.57 181.97 212.699 182.034 212.856 182.034 cv
213.013 182.034 213.142 181.97 213.249 181.835 cv
213.349 181.699 213.406 181.449 213.406 181.092 cv
213.406 180.764 213.349 180.535 213.249 180.4 cv
213.142 180.271 213.013 180.2 212.856 180.2 cv
212.856 185.14 mo
215.654 179.764 li
216.161 179.764 li
213.377 185.14 li
212.856 185.14 li
215.069 183.762 mo
215.069 183.398 215.155 183.091 215.34 182.834 cv
215.526 182.577 215.79 182.448 216.147 182.448 cv
216.461 182.448 216.725 182.563 216.939 182.791 cv
217.153 183.02 217.26 183.355 217.26 183.798 cv
217.26 184.233 217.153 184.569 216.939 184.797 cv
216.725 185.025 216.461 185.14 216.147 185.14 cv
215.833 185.14 215.576 185.025 215.376 184.797 cv
215.169 184.569 215.069 184.226 215.069 183.762 cv
216.161 182.877 mo
216.004 182.877 215.868 182.948 215.768 183.084 cv
215.669 183.219 215.619 183.469 215.619 183.826 cv
215.619 184.155 215.669 184.383 215.776 184.519 cv
215.876 184.654 216.004 184.718 216.161 184.718 cv
216.318 184.718 216.454 184.654 216.554 184.519 cv
216.654 184.383 216.711 184.133 216.711 183.776 cv
216.711 183.448 216.654 183.219 216.554 183.084 cv
216.447 182.948 216.318 182.877 216.161 182.877 cv
f
218.581 186.453 mo
218.131 186.453 li
218.824 185.34 219.174 184.233 219.174 183.112 cv
219.174 182.677 219.124 182.241 219.024 181.813 cv
218.938 181.47 218.831 181.135 218.688 180.807 cv
218.595 180.607 218.41 180.257 218.131 179.764 cv
218.581 179.764 li
219.009 180.35 219.331 180.935 219.545 181.52 cv
219.723 182.034 219.816 182.563 219.816 183.112 cv
219.816 183.741 219.695 184.347 219.452 184.933 cv
219.209 185.511 218.924 186.018 218.581 186.453 cv
f
1.20002 lw
1 lc
1 lj
152.896 192.444 mo
164.807 192.444 li
.521935 .042298 .260502 0 cmyk
@
169.822 191.649 mo
169.822 191.149 169.869 190.744 169.977 190.434 cv
170.078 190.125 170.233 189.886 170.435 189.72 cv
170.638 189.553 170.9 189.47 171.209 189.47 cv
171.436 189.47 171.638 189.517 171.811 189.612 cv
171.978 189.708 172.121 189.839 172.234 190.011 cv
172.347 190.184 172.436 190.393 172.502 190.643 cv
172.561 190.893 172.597 191.232 172.597 191.649 cv
172.597 192.15 172.544 192.555 172.442 192.864 cv
172.341 193.174 172.186 193.406 171.984 193.573 cv
171.781 193.74 171.519 193.817 171.209 193.817 cv
170.793 193.817 170.471 193.674 170.239 193.382 cv
169.959 193.031 169.822 192.453 169.822 191.649 cv
170.358 191.649 mo
170.358 192.352 170.435 192.817 170.602 193.049 cv
170.763 193.281 170.965 193.394 171.209 193.394 cv
171.448 193.394 171.644 193.281 171.811 193.049 cv
171.978 192.817 172.061 192.352 172.061 191.649 cv
172.061 190.947 171.978 190.482 171.811 190.25 cv
171.644 190.023 171.442 189.904 171.204 189.904 cv
170.959 189.904 170.769 190.006 170.626 190.208 cv
170.447 190.47 170.358 190.952 170.358 191.649 cv
1 /0 /CSD get_res sepcs
.85 sep
f
173.099 192.471 mo
173.099 191.947 li
174.707 191.947 li
174.707 192.471 li
173.099 192.471 li
f
175.157 192.626 mo
175.681 192.555 li
175.741 192.852 175.842 193.067 175.985 193.198 cv
176.128 193.329 176.306 193.394 176.515 193.394 cv
176.759 193.394 176.967 193.311 177.134 193.138 cv
177.301 192.971 177.39 192.757 177.39 192.507 cv
177.39 192.269 177.307 192.066 177.152 191.911 cv
176.997 191.756 176.795 191.673 176.556 191.673 cv
176.455 191.673 176.33 191.697 176.187 191.733 cv
176.247 191.274 li
176.33 191.28 li
176.55 191.28 176.753 191.226 176.932 191.107 cv
177.11 190.988 177.2 190.81 177.2 190.565 cv
177.2 190.375 177.134 190.22 177.003 190.095 cv
176.872 189.97 176.705 189.904 176.503 189.904 cv
176.3 189.904 176.128 189.97 175.991 190.095 cv
175.854 190.226 175.77 190.416 175.735 190.667 cv
175.21 190.577 li
175.27 190.226 175.419 189.952 175.645 189.761 cv
175.872 189.571 176.151 189.47 176.491 189.47 cv
176.723 189.47 176.938 189.523 177.134 189.624 cv
177.325 189.726 177.474 189.863 177.581 190.029 cv
177.688 190.202 177.742 190.387 177.742 190.577 cv
177.742 190.768 177.688 190.935 177.593 191.083 cv
177.491 191.238 177.343 191.357 177.152 191.441 cv
177.402 191.5 177.593 191.625 177.736 191.804 cv
177.879 191.989 177.95 192.221 177.95 192.495 cv
177.95 192.864 177.813 193.18 177.539 193.436 cv
177.265 193.698 176.926 193.823 176.515 193.823 cv
176.134 193.823 175.824 193.716 175.58 193.49 cv
175.33 193.269 175.193 192.983 175.157 192.626 cv
f
178.494 192.632 mo
179.042 192.59 li
179.077 192.858 179.173 193.061 179.322 193.192 cv
179.471 193.329 179.649 193.394 179.858 193.394 cv
180.108 193.394 180.322 193.299 180.501 193.108 cv
180.674 192.918 180.763 192.668 180.763 192.352 cv
180.763 192.054 180.674 191.822 180.507 191.649 cv
180.34 191.477 180.12 191.387 179.852 191.387 cv
179.685 191.387 179.53 191.429 179.393 191.506 cv
179.256 191.584 179.149 191.679 179.077 191.798 cv
178.583 191.739 li
178.994 189.547 li
181.114 189.547 li
181.114 190.047 li
179.417 190.047 li
179.185 191.191 li
179.441 191.012 179.709 190.923 179.989 190.923 cv
180.358 190.923 180.674 191.054 180.93 191.31 cv
181.186 191.572 181.317 191.899 181.317 192.304 cv
181.317 192.691 181.204 193.025 180.977 193.305 cv
180.703 193.65 180.334 193.817 179.858 193.817 cv
179.471 193.817 179.155 193.71 178.911 193.495 cv
178.661 193.281 178.524 192.995 178.494 192.632 cv
f
184.641 194.996 mo
184.35 194.633 184.105 194.21 183.909 193.728 cv
183.706 193.239 183.611 192.733 183.611 192.209 cv
183.611 191.751 183.682 191.31 183.831 190.881 cv
184.004 190.393 184.272 189.904 184.641 189.416 cv
185.017 189.416 li
184.778 189.821 184.623 190.113 184.552 190.279 cv
184.433 190.547 184.338 190.827 184.272 191.119 cv
184.189 191.483 184.147 191.846 184.147 192.209 cv
184.147 193.144 184.433 194.067 185.017 194.996 cv
184.641 194.996 li
f
185.704 193.65 mo
185.71 193.597 li
186.157 191.822 li
186.181 191.715 186.199 191.614 186.199 191.53 cv
186.199 191.363 186.139 191.274 186.026 191.274 cv
185.901 191.274 185.806 191.351 185.746 191.5 cv
185.687 191.649 185.627 191.834 185.573 192.06 cv
185.556 192.09 li
185.526 192.096 li
185.454 192.096 li
185.419 192.078 li
185.407 192.036 li
185.448 191.864 185.49 191.715 185.532 191.596 cv
185.567 191.477 185.633 191.369 185.716 191.268 cv
185.8 191.173 185.901 191.119 186.032 191.119 cv
186.175 191.119 186.306 191.167 186.425 191.262 cv
186.538 191.357 186.598 191.477 186.598 191.619 cv
186.717 191.465 186.854 191.346 187.015 191.256 cv
187.169 191.167 187.342 191.119 187.521 191.119 cv
187.658 191.119 187.777 191.149 187.884 191.197 cv
187.985 191.244 188.063 191.322 188.122 191.417 cv
188.182 191.512 188.212 191.631 188.212 191.762 cv
188.212 191.929 188.17 192.126 188.099 192.352 cv
188.027 192.584 187.938 192.84 187.831 193.126 cv
187.771 193.257 187.747 193.376 187.747 193.484 cv
187.747 193.603 187.789 193.662 187.884 193.662 cv
188.039 193.662 188.164 193.579 188.271 193.412 cv
188.372 193.245 188.444 193.067 188.492 192.876 cv
188.539 192.84 li
188.611 192.84 li
188.646 192.858 li
188.664 192.894 li
188.658 192.912 li
188.605 193.138 188.509 193.347 188.378 193.531 cv
188.241 193.722 188.075 193.811 187.872 193.811 cv
187.729 193.811 187.61 193.763 187.515 193.674 cv
187.414 193.579 187.366 193.466 187.366 193.323 cv
187.414 193.09 li
187.461 192.959 187.515 192.805 187.58 192.626 cv
187.646 192.447 187.7 192.281 187.741 192.114 cv
187.783 191.947 187.807 191.804 187.807 191.673 cv
187.807 191.566 187.783 191.471 187.735 191.393 cv
187.688 191.316 187.616 191.274 187.509 191.274 cv
187.36 191.274 187.223 191.31 187.104 191.369 cv
186.985 191.435 186.878 191.518 186.788 191.625 cv
186.693 191.733 186.61 191.858 186.538 192.001 cv
186.133 193.621 li
186.044 193.758 li
185.883 193.811 li
185.758 193.769 li
185.704 193.65 li
f
190.305 192.959 mo
190.222 192.924 li
190.192 192.84 li
190.222 192.757 li
190.305 192.721 li
194.045 192.721 li
194.117 192.757 li
194.152 192.84 li
194.117 192.924 li
194.045 192.959 li
190.305 192.959 li
190.305 191.804 mo
190.222 191.768 li
190.192 191.685 li
190.222 191.608 li
190.305 191.566 li
194.045 191.566 li
194.117 191.608 li
194.152 191.685 li
194.117 191.768 li
194.045 191.804 li
190.305 191.804 li
f
195.104 192.626 mo
195.628 192.555 li
195.687 192.852 195.789 193.067 195.932 193.198 cv
196.074 193.329 196.253 193.394 196.462 193.394 cv
196.706 193.394 196.914 193.311 197.081 193.138 cv
197.248 192.971 197.337 192.757 197.337 192.507 cv
197.337 192.269 197.254 192.066 197.099 191.911 cv
196.944 191.756 196.741 191.673 196.503 191.673 cv
196.402 191.673 196.277 191.697 196.134 191.733 cv
196.194 191.274 li
196.277 191.28 li
196.497 191.28 196.7 191.226 196.878 191.107 cv
197.057 190.988 197.146 190.81 197.146 190.565 cv
197.146 190.375 197.081 190.22 196.95 190.095 cv
196.819 189.97 196.652 189.904 196.45 189.904 cv
196.247 189.904 196.074 189.97 195.937 190.095 cv
195.801 190.226 195.717 190.416 195.681 190.667 cv
195.157 190.577 li
195.217 190.226 195.366 189.952 195.592 189.761 cv
195.818 189.571 196.098 189.47 196.438 189.47 cv
196.67 189.47 196.884 189.523 197.081 189.624 cv
197.272 189.726 197.42 189.863 197.528 190.029 cv
197.635 190.202 197.688 190.387 197.688 190.577 cv
197.688 190.768 197.635 190.935 197.54 191.083 cv
197.438 191.238 197.289 191.357 197.099 191.441 cv
197.349 191.5 197.54 191.625 197.682 191.804 cv
197.825 191.989 197.897 192.221 197.897 192.495 cv
197.897 192.864 197.76 193.18 197.486 193.436 cv
197.212 193.698 196.873 193.823 196.462 193.823 cv
196.08 193.823 195.771 193.716 195.527 193.49 cv
195.276 193.269 195.139 192.983 195.104 192.626 cv
f
200.412 193.752 mo
199.888 193.752 li
199.888 190.416 li
199.757 190.536 199.59 190.661 199.388 190.78 cv
199.185 190.899 199.001 190.988 198.84 191.048 cv
198.84 190.542 li
199.132 190.405 199.388 190.238 199.608 190.041 cv
199.822 189.851 199.977 189.66 200.073 189.47 cv
200.412 189.47 li
200.412 193.752 li
f
204.523 193.251 mo
204.523 193.752 li
201.706 193.752 li
201.7 193.627 201.724 193.507 201.772 193.388 cv
201.843 193.198 201.956 193.013 202.111 192.823 cv
202.266 192.638 202.498 192.423 202.796 192.173 cv
203.261 191.798 203.57 191.5 203.737 191.274 cv
203.898 191.054 203.981 190.845 203.981 190.643 cv
203.981 190.44 203.904 190.262 203.755 190.119 cv
203.606 189.976 203.415 189.904 203.177 189.904 cv
202.927 189.904 202.725 189.982 202.576 190.131 cv
202.421 190.285 202.343 190.494 202.343 190.762 cv
201.807 190.702 li
201.843 190.303 201.98 190 202.218 189.785 cv
202.457 189.577 202.784 189.47 203.189 189.47 cv
203.594 189.47 203.922 189.589 204.16 189.815 cv
204.398 190.041 204.517 190.321 204.517 190.655 cv
204.517 190.827 204.481 190.994 204.41 191.161 cv
204.339 191.328 204.225 191.5 204.065 191.679 cv
203.904 191.864 203.636 192.114 203.261 192.429 cv
202.945 192.691 202.742 192.87 202.653 192.965 cv
202.564 193.061 202.492 193.156 202.433 193.251 cv
204.523 193.251 li
f
205.115 191.649 mo
205.115 191.149 205.162 190.744 205.269 190.434 cv
205.371 190.125 205.526 189.886 205.728 189.72 cv
205.931 189.553 206.193 189.47 206.502 189.47 cv
206.729 189.47 206.931 189.517 207.104 189.612 cv
207.271 189.708 207.413 189.839 207.527 190.011 cv
207.64 190.184 207.729 190.393 207.795 190.643 cv
207.854 190.893 207.89 191.232 207.89 191.649 cv
207.89 192.15 207.836 192.555 207.735 192.864 cv
207.634 193.174 207.479 193.406 207.277 193.573 cv
207.074 193.74 206.812 193.817 206.502 193.817 cv
206.085 193.817 205.764 193.674 205.532 193.382 cv
205.252 193.031 205.115 192.453 205.115 191.649 cv
205.651 191.649 mo
205.651 192.352 205.728 192.817 205.895 193.049 cv
206.056 193.281 206.258 193.394 206.502 193.394 cv
206.74 193.394 206.937 193.281 207.104 193.049 cv
207.271 192.817 207.354 192.352 207.354 191.649 cv
207.354 190.947 207.271 190.482 207.104 190.25 cv
206.937 190.023 206.735 189.904 206.496 189.904 cv
206.252 189.904 206.062 190.006 205.919 190.208 cv
205.74 190.47 205.651 190.952 205.651 191.649 cv
f
209.256 191.441 mo
209.035 191.363 208.874 191.25 208.767 191.101 cv
208.66 190.958 208.612 190.78 208.612 190.571 cv
208.612 190.262 208.72 190.006 208.946 189.791 cv
209.172 189.577 209.47 189.47 209.839 189.47 cv
210.209 189.47 210.512 189.583 210.739 189.797 cv
210.965 190.011 211.078 190.274 211.078 190.583 cv
211.078 190.786 211.024 190.958 210.923 191.101 cv
210.816 191.25 210.661 191.363 210.447 191.441 cv
210.709 191.524 210.905 191.661 211.042 191.852 cv
211.179 192.042 211.251 192.269 211.251 192.531 cv
211.251 192.9 211.12 193.204 210.864 193.448 cv
210.602 193.698 210.262 193.817 209.845 193.817 cv
209.422 193.817 209.083 193.698 208.827 193.448 cv
208.571 193.204 208.446 192.894 208.446 192.519 cv
208.446 192.245 208.511 192.013 208.654 191.822 cv
208.791 191.637 208.994 191.512 209.256 191.441 cv
209.148 190.553 mo
209.148 190.756 209.214 190.923 209.345 191.048 cv
209.476 191.179 209.643 191.238 209.851 191.238 cv
210.054 191.238 210.214 191.179 210.345 191.048 cv
210.477 190.923 210.542 190.768 210.542 190.583 cv
210.542 190.393 210.471 190.232 210.34 190.101 cv
210.209 189.97 210.042 189.904 209.845 189.904 cv
209.643 189.904 209.476 189.97 209.345 190.095 cv
209.214 190.226 209.148 190.375 209.148 190.553 cv
208.982 192.519 mo
208.982 192.674 209.017 192.817 209.089 192.954 cv
209.16 193.096 209.262 193.204 209.405 193.281 cv
209.541 193.359 209.69 193.394 209.851 193.394 cv
210.101 193.394 210.304 193.317 210.471 193.156 cv
210.631 192.995 210.715 192.787 210.715 192.537 cv
210.715 192.287 210.631 192.084 210.465 191.917 cv
210.298 191.751 210.083 191.667 209.833 191.667 cv
209.583 191.667 209.381 191.751 209.22 191.911 cv
209.059 192.078 208.982 192.281 208.982 192.519 cv
f
214.534 193.251 mo
214.534 193.752 li
211.717 193.752 li
211.711 193.627 211.735 193.507 211.783 193.388 cv
211.854 193.198 211.967 193.013 212.122 192.823 cv
212.277 192.638 212.509 192.423 212.807 192.173 cv
213.272 191.798 213.581 191.5 213.748 191.274 cv
213.909 191.054 213.992 190.845 213.992 190.643 cv
213.992 190.44 213.915 190.262 213.766 190.119 cv
213.617 189.976 213.426 189.904 213.188 189.904 cv
212.938 189.904 212.736 189.982 212.587 190.131 cv
212.432 190.285 212.354 190.494 212.354 190.762 cv
211.818 190.702 li
211.854 190.303 211.991 190 212.229 189.785 cv
212.468 189.577 212.795 189.47 213.2 189.47 cv
213.605 189.47 213.933 189.589 214.171 189.815 cv
214.409 190.041 214.528 190.321 214.528 190.655 cv
214.528 190.827 214.492 190.994 214.421 191.161 cv
214.349 191.328 214.236 191.5 214.076 191.679 cv
213.915 191.864 213.647 192.114 213.272 192.429 cv
212.956 192.691 212.753 192.87 212.664 192.965 cv
212.575 193.061 212.503 193.156 212.444 193.251 cv
214.534 193.251 li
f
215.614 194.996 mo
215.239 194.996 li
215.816 194.067 216.108 193.144 216.108 192.209 cv
216.108 191.846 216.067 191.483 215.983 191.125 cv
215.912 190.839 215.822 190.559 215.703 190.285 cv
215.626 190.119 215.471 189.827 215.239 189.416 cv
215.614 189.416 li
215.971 189.904 216.239 190.393 216.418 190.881 cv
216.567 191.31 216.644 191.751 216.644 192.209 cv
216.644 192.733 216.543 193.239 216.341 193.728 cv
216.138 194.21 215.9 194.633 215.614 194.996 cv
f
152.896 202.279 mo
164.807 202.279 li
.718349 .18613 .110262 0 cmyk
@
169.822 202.461 mo
170.346 202.39 li
170.405 202.687 170.507 202.902 170.65 203.033 cv
170.793 203.164 170.971 203.229 171.18 203.229 cv
171.424 203.229 171.632 203.146 171.799 202.973 cv
171.966 202.806 172.055 202.592 172.055 202.342 cv
172.055 202.104 171.972 201.901 171.817 201.746 cv
171.662 201.592 171.46 201.508 171.221 201.508 cv
171.12 201.508 170.995 201.532 170.852 201.568 cv
170.912 201.109 li
170.995 201.115 li
171.215 201.115 171.418 201.061 171.597 200.942 cv
171.775 200.823 171.865 200.645 171.865 200.4 cv
171.865 200.21 171.799 200.055 171.668 199.93 cv
171.537 199.805 171.37 199.739 171.168 199.739 cv
170.965 199.739 170.793 199.805 170.656 199.93 cv
170.519 200.061 170.435 200.252 170.4 200.502 cv
169.875 200.412 li
169.935 200.061 170.084 199.787 170.31 199.596 cv
170.536 199.406 170.816 199.305 171.156 199.305 cv
171.388 199.305 171.603 199.358 171.799 199.459 cv
171.99 199.561 172.139 199.698 172.246 199.864 cv
172.353 200.037 172.407 200.222 172.407 200.412 cv
172.407 200.603 172.353 200.77 172.258 200.919 cv
172.156 201.073 172.008 201.193 171.817 201.276 cv
172.067 201.335 172.258 201.461 172.401 201.639 cv
172.544 201.824 172.615 202.056 172.615 202.33 cv
172.615 202.699 172.478 203.015 172.204 203.271 cv
171.93 203.533 171.591 203.658 171.18 203.658 cv
170.799 203.658 170.489 203.551 170.245 203.325 cv
169.995 203.104 169.858 202.818 169.822 202.461 cv
1 /0 /CSD get_res sepcs
.85 sep
f
173.159 202.467 mo
173.707 202.425 li
173.742 202.693 173.838 202.896 173.987 203.027 cv
174.135 203.164 174.314 203.229 174.523 203.229 cv
174.773 203.229 174.987 203.134 175.166 202.943 cv
175.339 202.753 175.428 202.503 175.428 202.187 cv
175.428 201.889 175.339 201.657 175.172 201.484 cv
175.005 201.312 174.785 201.222 174.517 201.222 cv
174.35 201.222 174.195 201.264 174.058 201.341 cv
173.921 201.419 173.814 201.514 173.742 201.633 cv
173.248 201.574 li
173.659 199.382 li
175.779 199.382 li
175.779 199.882 li
174.082 199.882 li
173.85 201.026 li
174.106 200.847 174.374 200.758 174.654 200.758 cv
175.023 200.758 175.339 200.889 175.595 201.145 cv
175.851 201.407 175.982 201.734 175.982 202.139 cv
175.982 202.527 175.869 202.86 175.642 203.14 cv
175.368 203.485 174.999 203.652 174.523 203.652 cv
174.135 203.652 173.82 203.545 173.576 203.331 cv
173.326 203.116 173.189 202.83 173.159 202.467 cv
f
176.436 202.306 mo
176.436 201.782 li
178.044 201.782 li
178.044 202.306 li
176.436 202.306 li
f
178.494 202.467 mo
179.042 202.425 li
179.077 202.693 179.173 202.896 179.322 203.027 cv
179.471 203.164 179.649 203.229 179.858 203.229 cv
180.108 203.229 180.322 203.134 180.501 202.943 cv
180.674 202.753 180.763 202.503 180.763 202.187 cv
180.763 201.889 180.674 201.657 180.507 201.484 cv
180.34 201.312 180.12 201.222 179.852 201.222 cv
179.685 201.222 179.53 201.264 179.393 201.341 cv
179.256 201.419 179.149 201.514 179.077 201.633 cv
178.583 201.574 li
178.994 199.382 li
181.114 199.382 li
181.114 199.882 li
179.417 199.882 li
179.185 201.026 li
179.441 200.847 179.709 200.758 179.989 200.758 cv
180.358 200.758 180.674 200.889 180.93 201.145 cv
181.186 201.407 181.317 201.734 181.317 202.139 cv
181.317 202.527 181.204 202.86 180.977 203.14 cv
180.703 203.485 180.334 203.652 179.858 203.652 cv
179.471 203.652 179.155 203.545 178.911 203.331 cv
178.661 203.116 178.524 202.83 178.494 202.467 cv
f
181.831 202.467 mo
182.379 202.425 li
182.414 202.693 182.51 202.896 182.659 203.027 cv
182.808 203.164 182.986 203.229 183.195 203.229 cv
183.445 203.229 183.659 203.134 183.838 202.943 cv
184.011 202.753 184.1 202.503 184.1 202.187 cv
184.1 201.889 184.011 201.657 183.844 201.484 cv
183.677 201.312 183.457 201.222 183.189 201.222 cv
183.022 201.222 182.867 201.264 182.73 201.341 cv
182.593 201.419 182.486 201.514 182.414 201.633 cv
181.92 201.574 li
182.331 199.382 li
184.451 199.382 li
184.451 199.882 li
182.754 199.882 li
182.522 201.026 li
182.778 200.847 183.046 200.758 183.326 200.758 cv
183.695 200.758 184.011 200.889 184.267 201.145 cv
184.523 201.407 184.654 201.734 184.654 202.139 cv
184.654 202.527 184.541 202.86 184.314 203.14 cv
184.04 203.485 183.671 203.652 183.195 203.652 cv
182.808 203.652 182.492 203.545 182.248 203.331 cv
181.998 203.116 181.861 202.83 181.831 202.467 cv
f
187.978 204.831 mo
187.686 204.468 187.442 204.045 187.246 203.563 cv
187.043 203.074 186.948 202.568 186.948 202.044 cv
186.948 201.586 187.019 201.145 187.168 200.716 cv
187.341 200.228 187.609 199.739 187.978 199.251 cv
188.354 199.251 li
188.115 199.656 187.96 199.948 187.889 200.115 cv
187.77 200.383 187.675 200.662 187.609 200.954 cv
187.526 201.318 187.484 201.681 187.484 202.044 cv
187.484 202.979 187.77 203.902 188.354 204.831 cv
187.978 204.831 li
f
189.041 203.485 mo
189.047 203.432 li
189.494 201.657 li
189.518 201.55 189.536 201.449 189.536 201.365 cv
189.536 201.198 189.476 201.109 189.363 201.109 cv
189.238 201.109 189.143 201.187 189.083 201.335 cv
189.024 201.484 188.964 201.669 188.91 201.895 cv
188.893 201.925 li
188.863 201.931 li
188.791 201.931 li
188.756 201.913 li
188.744 201.871 li
188.785 201.699 188.827 201.55 188.869 201.431 cv
188.904 201.312 188.97 201.204 189.053 201.103 cv
189.137 201.008 189.238 200.954 189.369 200.954 cv
189.512 200.954 189.643 201.002 189.762 201.097 cv
189.875 201.193 189.935 201.312 189.935 201.455 cv
190.054 201.3 190.191 201.181 190.352 201.091 cv
190.506 201.002 190.679 200.954 190.858 200.954 cv
190.995 200.954 191.114 200.984 191.221 201.032 cv
191.322 201.079 191.4 201.157 191.459 201.252 cv
191.519 201.347 191.549 201.466 191.549 201.597 cv
191.549 201.764 191.507 201.961 191.436 202.187 cv
191.364 202.419 191.275 202.675 191.168 202.961 cv
191.108 203.092 191.084 203.211 191.084 203.319 cv
191.084 203.438 191.126 203.497 191.221 203.497 cv
191.376 203.497 191.501 203.414 191.608 203.247 cv
191.709 203.08 191.781 202.902 191.829 202.711 cv
191.876 202.675 li
191.948 202.675 li
191.983 202.693 li
192.001 202.729 li
191.995 202.747 li
191.942 202.973 191.846 203.182 191.715 203.366 cv
191.578 203.557 191.412 203.646 191.209 203.646 cv
191.066 203.646 190.947 203.599 190.852 203.509 cv
190.751 203.414 190.703 203.301 190.703 203.158 cv
190.751 202.926 li
190.798 202.795 190.852 202.64 190.917 202.461 cv
190.983 202.282 191.036 202.116 191.078 201.949 cv
191.12 201.782 191.144 201.639 191.144 201.508 cv
191.144 201.401 191.12 201.306 191.072 201.228 cv
191.025 201.151 190.953 201.109 190.846 201.109 cv
190.697 201.109 190.56 201.145 190.441 201.204 cv
190.322 201.27 190.215 201.353 190.125 201.461 cv
190.03 201.568 189.947 201.693 189.875 201.836 cv
189.47 203.456 li
189.381 203.593 li
189.22 203.646 li
189.095 203.605 li
189.041 203.485 li
f
193.642 202.795 mo
193.559 202.759 li
193.529 202.675 li
193.559 202.592 li
193.642 202.556 li
197.382 202.556 li
197.454 202.592 li
197.489 202.675 li
197.454 202.759 li
197.382 202.795 li
193.642 202.795 li
193.642 201.639 mo
193.559 201.603 li
193.529 201.52 li
193.559 201.443 li
193.642 201.401 li
197.382 201.401 li
197.454 201.443 li
197.489 201.52 li
197.454 201.603 li
197.382 201.639 li
193.642 201.639 li
f
198.47 199.882 mo
198.47 199.376 li
201.234 199.376 li
201.234 199.787 li
200.96 200.079 200.686 200.466 200.424 200.942 cv
200.156 201.419 199.947 201.913 199.805 202.413 cv
199.697 202.771 199.632 203.164 199.608 203.587 cv
199.066 203.587 li
199.072 203.253 199.137 202.848 199.263 202.372 cv
199.388 201.895 199.566 201.437 199.805 200.996 cv
200.043 200.555 200.293 200.186 200.561 199.882 cv
198.47 199.882 li
f
203.749 203.587 mo
203.225 203.587 li
203.225 200.252 li
203.094 200.371 202.927 200.496 202.725 200.615 cv
202.522 200.734 202.337 200.823 202.177 200.883 cv
202.177 200.377 li
202.469 200.24 202.725 200.073 202.945 199.876 cv
203.159 199.686 203.314 199.495 203.409 199.305 cv
203.749 199.305 li
203.749 203.587 li
f
205.919 201.276 mo
205.698 201.198 205.537 201.085 205.43 200.936 cv
205.323 200.793 205.275 200.615 205.275 200.406 cv
205.275 200.097 205.383 199.841 205.609 199.626 cv
205.835 199.412 206.133 199.305 206.502 199.305 cv
206.872 199.305 207.175 199.418 207.402 199.632 cv
207.628 199.847 207.741 200.109 207.741 200.418 cv
207.741 200.621 207.687 200.793 207.586 200.936 cv
207.479 201.085 207.324 201.198 207.11 201.276 cv
207.372 201.359 207.568 201.496 207.705 201.687 cv
207.842 201.877 207.914 202.104 207.914 202.366 cv
207.914 202.735 207.783 203.039 207.527 203.283 cv
207.265 203.533 206.925 203.652 206.508 203.652 cv
206.085 203.652 205.746 203.533 205.49 203.283 cv
205.234 203.039 205.109 202.729 205.109 202.354 cv
205.109 202.08 205.174 201.848 205.317 201.657 cv
205.454 201.472 205.657 201.347 205.919 201.276 cv
205.811 200.389 mo
205.811 200.591 205.877 200.758 206.008 200.883 cv
206.139 201.014 206.306 201.073 206.514 201.073 cv
206.717 201.073 206.877 201.014 207.008 200.883 cv
207.14 200.758 207.205 200.603 207.205 200.418 cv
207.205 200.228 207.134 200.067 207.003 199.936 cv
206.872 199.805 206.705 199.739 206.508 199.739 cv
206.306 199.739 206.139 199.805 206.008 199.93 cv
205.877 200.061 205.811 200.21 205.811 200.389 cv
205.645 202.354 mo
205.645 202.509 205.68 202.652 205.752 202.789 cv
205.823 202.932 205.925 203.039 206.068 203.116 cv
206.204 203.194 206.353 203.229 206.514 203.229 cv
206.764 203.229 206.967 203.152 207.134 202.991 cv
207.294 202.83 207.378 202.622 207.378 202.372 cv
207.378 202.122 207.294 201.919 207.128 201.752 cv
206.961 201.586 206.746 201.502 206.496 201.502 cv
206.246 201.502 206.044 201.586 205.883 201.746 cv
205.722 201.913 205.645 202.116 205.645 202.354 cv
f
208.452 201.484 mo
208.452 200.984 208.499 200.579 208.606 200.269 cv
208.708 199.96 208.863 199.721 209.065 199.555 cv
209.268 199.388 209.53 199.305 209.839 199.305 cv
210.066 199.305 210.268 199.352 210.441 199.448 cv
210.608 199.543 210.75 199.674 210.864 199.847 cv
210.977 200.019 211.066 200.228 211.132 200.478 cv
211.191 200.728 211.227 201.067 211.227 201.484 cv
211.227 201.985 211.173 202.39 211.072 202.699 cv
210.971 203.009 210.816 203.241 210.613 203.408 cv
210.411 203.575 210.149 203.652 209.839 203.652 cv
209.422 203.652 209.101 203.509 208.869 203.217 cv
208.589 202.866 208.452 202.288 208.452 201.484 cv
208.988 201.484 mo
208.988 202.187 209.065 202.652 209.232 202.884 cv
209.393 203.116 209.595 203.229 209.839 203.229 cv
210.077 203.229 210.274 203.116 210.441 202.884 cv
210.608 202.652 210.691 202.187 210.691 201.484 cv
210.691 200.782 210.608 200.317 210.441 200.085 cv
210.274 199.858 210.072 199.739 209.833 199.739 cv
209.589 199.739 209.399 199.841 209.256 200.043 cv
209.077 200.305 208.988 200.788 208.988 201.484 cv
f
212.593 201.276 mo
212.372 201.198 212.211 201.085 212.104 200.936 cv
211.997 200.793 211.949 200.615 211.949 200.406 cv
211.949 200.097 212.057 199.841 212.283 199.626 cv
212.509 199.412 212.807 199.305 213.176 199.305 cv
213.545 199.305 213.849 199.418 214.076 199.632 cv
214.302 199.847 214.415 200.109 214.415 200.418 cv
214.415 200.621 214.361 200.793 214.26 200.936 cv
214.153 201.085 213.998 201.198 213.784 201.276 cv
214.046 201.359 214.242 201.496 214.379 201.687 cv
214.516 201.877 214.588 202.104 214.588 202.366 cv
214.588 202.735 214.457 203.039 214.201 203.283 cv
213.939 203.533 213.599 203.652 213.182 203.652 cv
212.759 203.652 212.42 203.533 212.164 203.283 cv
211.908 203.039 211.783 202.729 211.783 202.354 cv
211.783 202.08 211.848 201.848 211.991 201.657 cv
212.128 201.472 212.331 201.347 212.593 201.276 cv
212.485 200.389 mo
212.485 200.591 212.551 200.758 212.682 200.883 cv
212.813 201.014 212.98 201.073 213.188 201.073 cv
213.391 201.073 213.551 201.014 213.682 200.883 cv
213.813 200.758 213.879 200.603 213.879 200.418 cv
213.879 200.228 213.808 200.067 213.677 199.936 cv
213.545 199.805 213.379 199.739 213.182 199.739 cv
212.98 199.739 212.813 199.805 212.682 199.93 cv
212.551 200.061 212.485 200.21 212.485 200.389 cv
212.319 202.354 mo
212.319 202.509 212.354 202.652 212.426 202.789 cv
212.497 202.932 212.599 203.039 212.741 203.116 cv
212.878 203.194 213.027 203.229 213.188 203.229 cv
213.438 203.229 213.641 203.152 213.808 202.991 cv
213.968 202.83 214.052 202.622 214.052 202.372 cv
214.052 202.122 213.968 201.919 213.802 201.752 cv
213.635 201.586 213.42 201.502 213.17 201.502 cv
212.92 201.502 212.718 201.586 212.557 201.746 cv
212.396 201.913 212.319 202.116 212.319 202.354 cv
f
215.614 204.831 mo
215.239 204.831 li
215.816 203.902 216.108 202.979 216.108 202.044 cv
216.108 201.681 216.067 201.318 215.983 200.96 cv
215.912 200.674 215.822 200.394 215.703 200.121 cv
215.626 199.954 215.471 199.662 215.239 199.251 cv
215.614 199.251 li
215.971 199.739 216.239 200.228 216.418 200.716 cv
216.567 201.145 216.644 201.586 216.644 202.044 cv
216.644 202.568 216.543 203.074 216.341 203.563 cv
216.138 204.045 215.9 204.468 215.614 204.831 cv
f
152.896 212.114 mo
164.807 212.114 li
.85745 .505058 .385168 .136477 cmyk
@
169.822 212.302 mo
170.37 212.26 li
170.405 212.528 170.501 212.731 170.65 212.862 cv
170.799 212.999 170.977 213.064 171.186 213.064 cv
171.436 213.064 171.65 212.969 171.829 212.778 cv
172.002 212.588 172.091 212.338 172.091 212.022 cv
172.091 211.724 172.002 211.492 171.835 211.319 cv
171.668 211.147 171.448 211.057 171.18 211.057 cv
171.013 211.057 170.858 211.099 170.721 211.176 cv
170.584 211.254 170.477 211.349 170.405 211.468 cv
169.911 211.409 li
170.322 209.217 li
172.442 209.217 li
172.442 209.717 li
170.745 209.717 li
170.513 210.861 li
170.769 210.682 171.037 210.593 171.317 210.593 cv
171.686 210.593 172.002 210.724 172.258 210.98 cv
172.514 211.242 172.645 211.57 172.645 211.974 cv
172.645 212.362 172.532 212.695 172.305 212.975 cv
172.031 213.32 171.662 213.487 171.186 213.487 cv
170.799 213.487 170.483 213.38 170.239 213.166 cv
169.989 212.951 169.852 212.665 169.822 212.302 cv
1 /0 /CSD get_res sepcs
.85 sep
f
173.159 212.302 mo
173.707 212.26 li
173.742 212.528 173.838 212.731 173.987 212.862 cv
174.135 212.999 174.314 213.064 174.523 213.064 cv
174.773 213.064 174.987 212.969 175.166 212.778 cv
175.339 212.588 175.428 212.338 175.428 212.022 cv
175.428 211.724 175.339 211.492 175.172 211.319 cv
175.005 211.147 174.785 211.057 174.517 211.057 cv
174.35 211.057 174.195 211.099 174.058 211.176 cv
173.921 211.254 173.814 211.349 173.742 211.468 cv
173.248 211.409 li
173.659 209.217 li
175.779 209.217 li
175.779 209.717 li
174.082 209.717 li
173.85 210.861 li
174.106 210.682 174.374 210.593 174.654 210.593 cv
175.023 210.593 175.339 210.724 175.595 210.98 cv
175.851 211.242 175.982 211.57 175.982 211.974 cv
175.982 212.362 175.869 212.695 175.642 212.975 cv
175.368 213.32 174.999 213.487 174.523 213.487 cv
174.135 213.487 173.82 213.38 173.576 213.166 cv
173.326 212.951 173.189 212.665 173.159 212.302 cv
f
176.436 212.141 mo
176.436 211.617 li
178.044 211.617 li
178.044 212.141 li
176.436 212.141 li
f
180.465 213.422 mo
179.941 213.422 li
179.941 210.087 li
179.81 210.206 179.643 210.331 179.441 210.45 cv
179.238 210.569 179.054 210.658 178.893 210.718 cv
178.893 210.212 li
179.185 210.075 179.441 209.908 179.661 209.711 cv
179.876 209.521 180.03 209.33 180.126 209.14 cv
180.465 209.14 li
180.465 213.422 li
f
181.831 211.319 mo
181.831 210.819 181.878 210.414 181.986 210.104 cv
182.087 209.795 182.242 209.557 182.444 209.39 cv
182.647 209.223 182.909 209.14 183.218 209.14 cv
183.445 209.14 183.647 209.187 183.82 209.283 cv
183.987 209.378 184.13 209.509 184.243 209.682 cv
184.356 209.854 184.445 210.063 184.511 210.313 cv
184.57 210.563 184.606 210.902 184.606 211.319 cv
184.606 211.82 184.553 212.225 184.451 212.534 cv
184.35 212.844 184.195 213.076 183.993 213.243 cv
183.79 213.41 183.528 213.487 183.218 213.487 cv
182.802 213.487 182.48 213.344 182.248 213.052 cv
181.968 212.701 181.831 212.123 181.831 211.319 cv
182.367 211.319 mo
182.367 212.022 182.444 212.487 182.611 212.719 cv
182.772 212.951 182.974 213.064 183.218 213.064 cv
183.457 213.064 183.653 212.951 183.82 212.719 cv
183.987 212.487 184.07 212.022 184.07 211.319 cv
184.07 210.617 183.987 210.152 183.82 209.92 cv
183.653 209.694 183.451 209.574 183.213 209.574 cv
182.968 209.574 182.778 209.676 182.635 209.878 cv
182.456 210.14 182.367 210.623 182.367 211.319 cv
f
185.168 211.319 mo
185.168 210.819 185.215 210.414 185.323 210.104 cv
185.424 209.795 185.579 209.557 185.781 209.39 cv
185.984 209.223 186.246 209.14 186.555 209.14 cv
186.782 209.14 186.984 209.187 187.157 209.283 cv
187.324 209.378 187.467 209.509 187.58 209.682 cv
187.693 209.854 187.782 210.063 187.848 210.313 cv
187.907 210.563 187.943 210.902 187.943 211.319 cv
187.943 211.82 187.89 212.225 187.788 212.534 cv
187.687 212.844 187.532 213.076 187.33 213.243 cv
187.127 213.41 186.865 213.487 186.555 213.487 cv
186.139 213.487 185.817 213.344 185.585 213.052 cv
185.305 212.701 185.168 212.123 185.168 211.319 cv
185.704 211.319 mo
185.704 212.022 185.781 212.487 185.948 212.719 cv
186.109 212.951 186.311 213.064 186.555 213.064 cv
186.794 213.064 186.99 212.951 187.157 212.719 cv
187.324 212.487 187.407 212.022 187.407 211.319 cv
187.407 210.617 187.324 210.152 187.157 209.92 cv
186.99 209.694 186.788 209.574 186.55 209.574 cv
186.305 209.574 186.115 209.676 185.972 209.878 cv
185.793 210.14 185.704 210.623 185.704 211.319 cv
f
191.315 214.666 mo
191.023 214.303 190.779 213.88 190.583 213.398 cv
190.38 212.91 190.285 212.403 190.285 211.879 cv
190.285 211.421 190.356 210.98 190.505 210.551 cv
190.678 210.063 190.946 209.574 191.315 209.086 cv
191.691 209.086 li
191.452 209.491 191.297 209.783 191.226 209.95 cv
191.107 210.218 191.012 210.498 190.946 210.789 cv
190.863 211.153 190.821 211.516 190.821 211.879 cv
190.821 212.814 191.107 213.737 191.691 214.666 cv
191.315 214.666 li
f
192.378 213.32 mo
192.384 213.267 li
192.831 211.492 li
192.855 211.385 192.873 211.284 192.873 211.2 cv
192.873 211.034 192.813 210.944 192.7 210.944 cv
192.575 210.944 192.48 211.022 192.42 211.171 cv
192.36 211.319 192.301 211.504 192.247 211.73 cv
192.229 211.76 li
192.2 211.766 li
192.128 211.766 li
192.092 211.748 li
192.081 211.706 li
192.122 211.534 192.164 211.385 192.206 211.266 cv
192.241 211.147 192.307 211.039 192.39 210.938 cv
192.474 210.843 192.575 210.789 192.706 210.789 cv
192.849 210.789 192.98 210.837 193.099 210.932 cv
193.212 211.028 193.272 211.147 193.272 211.29 cv
193.391 211.135 193.528 211.016 193.689 210.926 cv
193.843 210.837 194.016 210.789 194.195 210.789 cv
194.332 210.789 194.451 210.819 194.558 210.867 cv
194.659 210.914 194.737 210.992 194.796 211.087 cv
194.856 211.182 194.886 211.302 194.886 211.433 cv
194.886 211.599 194.844 211.796 194.772 212.022 cv
194.701 212.254 194.612 212.51 194.504 212.796 cv
194.445 212.927 194.421 213.046 194.421 213.154 cv
194.421 213.273 194.463 213.332 194.558 213.332 cv
194.713 213.332 194.838 213.249 194.945 213.082 cv
195.046 212.915 195.118 212.737 195.166 212.546 cv
195.213 212.51 li
195.285 212.51 li
195.32 212.528 li
195.338 212.564 li
195.332 212.582 li
195.279 212.808 195.183 213.017 195.052 213.201 cv
194.915 213.392 194.749 213.481 194.546 213.481 cv
194.403 213.481 194.284 213.434 194.189 213.344 cv
194.088 213.249 194.04 213.136 194.04 212.993 cv
194.088 212.761 li
194.135 212.63 194.189 212.475 194.254 212.296 cv
194.32 212.117 194.373 211.951 194.415 211.784 cv
194.457 211.617 194.481 211.474 194.481 211.343 cv
194.481 211.236 194.457 211.141 194.409 211.063 cv
194.362 210.986 194.29 210.944 194.183 210.944 cv
194.034 210.944 193.897 210.98 193.778 211.039 cv
193.659 211.105 193.552 211.188 193.462 211.296 cv
193.367 211.403 193.284 211.528 193.212 211.671 cv
192.807 213.291 li
192.718 213.428 li
192.557 213.481 li
192.432 213.44 li
192.378 213.32 li
f
196.979 212.63 mo
196.896 212.594 li
196.866 212.51 li
196.896 212.427 li
196.979 212.391 li
200.719 212.391 li
200.791 212.427 li
200.826 212.51 li
200.791 212.594 li
200.719 212.63 li
196.979 212.63 li
196.979 211.474 mo
196.896 211.438 li
196.866 211.355 li
196.896 211.278 li
196.979 211.236 li
200.719 211.236 li
200.791 211.278 li
200.826 211.355 li
200.791 211.438 li
200.719 211.474 li
196.979 211.474 li
f
201.778 212.302 mo
202.326 212.26 li
202.361 212.528 202.457 212.731 202.605 212.862 cv
202.754 212.999 202.933 213.064 203.141 213.064 cv
203.392 213.064 203.606 212.969 203.785 212.778 cv
203.957 212.588 204.047 212.338 204.047 212.022 cv
204.047 211.724 203.957 211.492 203.791 211.319 cv
203.624 211.147 203.404 211.057 203.136 211.057 cv
202.969 211.057 202.814 211.099 202.677 211.176 cv
202.54 211.254 202.433 211.349 202.361 211.468 cv
201.867 211.409 li
202.278 209.217 li
204.398 209.217 li
204.398 209.717 li
202.701 209.717 li
202.469 210.861 li
202.725 210.682 202.993 210.593 203.273 210.593 cv
203.642 210.593 203.957 210.724 204.213 210.98 cv
204.47 211.242 204.601 211.57 204.601 211.974 cv
204.601 212.362 204.487 212.695 204.261 212.975 cv
203.987 213.32 203.618 213.487 203.141 213.487 cv
202.754 213.487 202.439 213.38 202.195 213.166 cv
201.944 212.951 201.807 212.665 201.778 212.302 cv
f
207.086 213.422 mo
206.562 213.422 li
206.562 210.087 li
206.431 210.206 206.264 210.331 206.062 210.45 cv
205.859 210.569 205.674 210.658 205.514 210.718 cv
205.514 210.212 li
205.805 210.075 206.062 209.908 206.282 209.711 cv
206.496 209.521 206.651 209.33 206.746 209.14 cv
207.086 209.14 li
207.086 213.422 li
f
208.481 209.717 mo
208.481 209.211 li
211.245 209.211 li
211.245 209.622 li
210.971 209.914 210.697 210.301 210.435 210.777 cv
210.167 211.254 209.958 211.748 209.815 212.248 cv
209.708 212.606 209.643 212.999 209.619 213.422 cv
209.077 213.422 li
209.083 213.088 209.148 212.683 209.273 212.207 cv
209.399 211.73 209.577 211.272 209.815 210.831 cv
210.054 210.39 210.304 210.021 210.572 209.717 cv
208.481 209.717 li
f
211.818 209.717 mo
211.818 209.211 li
214.582 209.211 li
214.582 209.622 li
214.308 209.914 214.034 210.301 213.772 210.777 cv
213.504 211.254 213.295 211.748 213.152 212.248 cv
213.045 212.606 212.98 212.999 212.956 213.422 cv
212.414 213.422 li
212.42 213.088 212.485 212.683 212.61 212.207 cv
212.736 211.73 212.914 211.272 213.152 210.831 cv
213.391 210.39 213.641 210.021 213.909 209.717 cv
211.818 209.717 li
f
215.614 214.666 mo
215.239 214.666 li
215.816 213.737 216.108 212.814 216.108 211.879 cv
216.108 211.516 216.067 211.153 215.983 210.795 cv
215.912 210.509 215.822 210.23 215.703 209.956 cv
215.626 209.789 215.471 209.497 215.239 209.086 cv
215.614 209.086 li
215.971 209.574 216.239 210.063 216.418 210.551 cv
216.567 210.98 216.644 211.421 216.644 211.879 cv
216.644 212.403 216.543 212.91 216.341 213.398 cv
216.138 213.88 215.9 214.303 215.614 214.666 cv
f
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
