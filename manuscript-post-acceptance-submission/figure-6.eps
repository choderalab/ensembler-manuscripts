%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: figure-6.pdf
%%Creator: Adobe Acrobat 10.1.14
%%For: choderaj
%%CreationDate: 1/21/16, 5:38 PM
%%BoundingBox: 0 0 271 206
%%HiResBoundingBox: 0 0 271 205.8170
%%CropBox: 0 0 271 205.8170
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$None SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_AGM_Core/driver_media_override gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 753 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.2-c001 63.139439, 2010/09/27-13:37:26        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdfx="http://ns.adobe.com/pdfx/1.3/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreateDate="2016-01-21T15:44:09-05:00"
   xmp:CreatorTool="TeX"
   xmp:ModifyDate="2016-01-21T15:44:09-05:00"
   pdfx:PTEX.Fullbanner="This is pdfTeX, Version 3.14159265-2.6-1.40.16 (TeX Live 2015) kpathsea version 6.2.1"
   pdf:Producer="pdfTeX-1.40.16"
   pdf:Trapped="False"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/driver_media_override gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -205.817 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 205.817 li
271 205.817 li
271 0 li
cp
clp
.499994 193.362 mo
270.508 193.362 li
270.508 .499209 li
.499994 .499209 li
.499994 193.362 li
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
27.0427 153.654 mo
246.135 153.654 li
246.135 14.3853 li
27.0427 14.3853 li
27.0427 153.654 li
f
1 /0 /CSD get_res sepcs
.85 sep
f
.857168 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
27.0427 153.654 mo
27.0427 153.654 li
@
27.0427 14.3853 mo
27.0427 14.3853 li
f
27.0427 14.3853 mo
27.0427 14.3853 li
@
21.7917 165.028 mo
21.1128 165.028 li
21.1128 160.708 li
20.9431 160.862 20.7271 161.024 20.4648 161.178 cv
20.2025 161.333 19.9634 161.448 19.7551 161.526 cv
19.7551 160.87 li
20.1331 160.692 20.4648 160.476 20.7502 160.222 cv
21.028 159.975 21.2285 159.728 21.352 159.481 cv
21.7917 159.481 li
21.7917 165.028 li
f
25.6952 165.028 mo
25.6952 163.709 li
23.3037 163.709 li
23.3037 163.084 li
25.8187 159.504 li
26.3741 159.504 li
26.3741 163.084 li
27.1224 163.084 li
27.1224 163.709 li
26.3741 163.709 li
26.3741 165.028 li
25.6952 165.028 li
25.6952 163.084 mo
25.6952 160.592 li
23.9672 163.084 li
25.6952 163.084 li
f
27.8167 162.305 mo
27.8167 161.657 27.8785 161.132 28.0173 160.731 cv
28.1485 160.33 28.349 160.021 28.6113 159.805 cv
28.8736 159.589 29.2131 159.481 29.6142 159.481 cv
29.9074 159.481 30.1697 159.543 30.3934 159.666 cv
30.6094 159.79 30.7945 159.959 30.9411 160.183 cv
31.0877 160.407 31.2034 160.677 31.2883 161.001 cv
31.3654 161.325 31.4117 161.765 31.4117 162.305 cv
31.4117 162.953 31.3423 163.477 31.2111 163.878 cv
31.08 164.28 30.8794 164.58 30.6171 164.796 cv
30.3548 165.012 30.0154 165.113 29.6142 165.113 cv
29.0742 165.113 28.6576 164.928 28.3568 164.55 cv
27.9942 164.094 27.8167 163.346 27.8167 162.305 cv
28.511 162.305 mo
28.511 163.215 28.6113 163.817 28.8273 164.118 cv
29.0356 164.418 29.2979 164.565 29.6142 164.565 cv
29.9228 164.565 30.1774 164.418 30.3934 164.118 cv
30.6094 163.817 30.7174 163.215 30.7174 162.305 cv
30.7174 161.394 30.6094 160.793 30.3934 160.492 cv
30.1774 160.199 29.9151 160.044 29.6065 160.044 cv
29.2902 160.044 29.0433 160.175 28.8582 160.438 cv
28.6268 160.777 28.511 161.402 28.511 162.305 cv
f
32.106 162.305 mo
32.106 161.657 32.1677 161.132 32.3066 160.731 cv
32.4377 160.33 32.6383 160.021 32.9006 159.805 cv
33.1629 159.589 33.5023 159.481 33.9035 159.481 cv
34.1966 159.481 34.4589 159.543 34.6826 159.666 cv
34.8987 159.79 35.0838 159.959 35.2304 160.183 cv
35.377 160.407 35.4927 160.677 35.5775 161.001 cv
35.6547 161.325 35.701 161.765 35.701 162.305 cv
35.701 162.953 35.6315 163.477 35.5004 163.878 cv
35.3692 164.28 35.1687 164.58 34.9064 164.796 cv
34.6441 165.012 34.3046 165.113 33.9035 165.113 cv
33.3635 165.113 32.9469 164.928 32.646 164.55 cv
32.2834 164.094 32.106 163.346 32.106 162.305 cv
32.8003 162.305 mo
32.8003 163.215 32.9006 163.817 33.1166 164.118 cv
33.3249 164.418 33.5872 164.565 33.9035 164.565 cv
34.2121 164.565 34.4666 164.418 34.6826 164.118 cv
34.8987 163.817 35.0067 163.215 35.0067 162.305 cv
35.0067 161.394 34.8987 160.793 34.6826 160.492 cv
34.4666 160.199 34.2043 160.044 33.8958 160.044 cv
33.5795 160.044 33.3326 160.175 33.1475 160.438 cv
32.916 160.777 32.8003 161.402 32.8003 162.305 cv
f
36.3953 162.305 mo
36.3953 161.657 36.457 161.132 36.5958 160.731 cv
36.727 160.33 36.9276 160.021 37.1899 159.805 cv
37.4522 159.589 37.7916 159.481 38.1927 159.481 cv
38.4859 159.481 38.7482 159.543 38.9719 159.666 cv
39.1879 159.79 39.3731 159.959 39.5196 160.183 cv
39.6662 160.407 39.7819 160.677 39.8668 161.001 cv
39.9439 161.325 39.9902 161.765 39.9902 162.305 cv
39.9902 162.953 39.9208 163.477 39.7897 163.878 cv
39.6585 164.28 39.4579 164.58 39.1956 164.796 cv
38.9333 165.012 38.5939 165.113 38.1927 165.113 cv
37.6527 165.113 37.2361 164.928 36.9353 164.55 cv
36.5727 164.094 36.3953 163.346 36.3953 162.305 cv
37.0896 162.305 mo
37.0896 163.215 37.1899 163.817 37.4059 164.118 cv
37.6142 164.418 37.8765 164.565 38.1927 164.565 cv
38.5013 164.565 38.7559 164.418 38.9719 164.118 cv
39.1879 163.817 39.2959 163.215 39.2959 162.305 cv
39.2959 161.394 39.1879 160.793 38.9719 160.492 cv
38.7559 160.199 38.4936 160.044 38.185 160.044 cv
37.8687 160.044 37.6219 160.175 37.4367 160.438 cv
37.2053 160.777 37.0896 161.402 37.0896 162.305 cv
f
18.451 162.621 mo
14.8098 162.621 li
14.8098 161.988 li
18.451 161.988 li
18.451 162.621 li
f
f
54.4293 153.654 mo
54.4293 153.654 li
@
54.4293 14.3853 mo
54.4293 14.3853 li
f
54.4293 14.3853 mo
54.4293 14.3853 li
@
49.1782 165.028 mo
48.4993 165.028 li
48.4993 160.708 li
48.3296 160.862 48.1136 161.024 47.8513 161.178 cv
47.589 161.333 47.3499 161.448 47.1416 161.526 cv
47.1416 160.87 li
47.5196 160.692 47.8513 160.476 48.1368 160.222 cv
48.4145 159.975 48.6151 159.728 48.7385 159.481 cv
49.1782 159.481 li
49.1782 165.028 li
f
50.914 163.57 mo
51.5929 163.477 li
51.67 163.863 51.8012 164.141 51.9863 164.31 cv
52.1715 164.48 52.4029 164.565 52.6729 164.565 cv
52.9892 164.565 53.2592 164.457 53.4752 164.233 cv
53.6912 164.017 53.8069 163.74 53.8069 163.416 cv
53.8069 163.107 53.6989 162.845 53.4983 162.644 cv
53.2978 162.444 53.0355 162.336 52.7269 162.336 cv
52.5957 162.336 52.4337 162.366 52.2486 162.413 cv
52.3257 161.819 li
52.4337 161.826 li
52.7192 161.826 52.9815 161.757 53.2129 161.603 cv
53.4443 161.448 53.5601 161.217 53.5601 160.901 cv
53.5601 160.654 53.4752 160.453 53.3055 160.291 cv
53.1358 160.129 52.9198 160.044 52.6575 160.044 cv
52.3952 160.044 52.1715 160.129 51.994 160.291 cv
51.8166 160.461 51.7086 160.708 51.6623 161.032 cv
50.9834 160.916 li
51.0606 160.461 51.2534 160.106 51.5466 159.859 cv
51.8397 159.612 52.2023 159.481 52.642 159.481 cv
52.9429 159.481 53.2206 159.551 53.4752 159.682 cv
53.7221 159.813 53.9149 159.99 54.0538 160.206 cv
54.1927 160.43 54.2621 160.669 54.2621 160.916 cv
54.2621 161.163 54.1927 161.379 54.0692 161.572 cv
53.9381 161.772 53.7452 161.927 53.4983 162.035 cv
53.8224 162.112 54.0692 162.274 54.2544 162.505 cv
54.4395 162.744 54.5321 163.045 54.5321 163.4 cv
54.5321 163.878 54.3547 164.287 53.9998 164.619 cv
53.6449 164.958 53.2052 165.12 52.6729 165.12 cv
52.1792 165.12 51.778 164.982 51.4617 164.688 cv
51.1377 164.403 50.9603 164.033 50.914 163.57 cv
f
55.2033 162.305 mo
55.2033 161.657 55.265 161.132 55.4038 160.731 cv
55.535 160.33 55.7356 160.021 55.9978 159.805 cv
56.2601 159.589 56.5996 159.481 57.0007 159.481 cv
57.2939 159.481 57.5562 159.543 57.7799 159.666 cv
57.9959 159.79 58.1811 159.959 58.3276 160.183 cv
58.4742 160.407 58.5899 160.677 58.6748 161.001 cv
58.7519 161.325 58.7982 161.765 58.7982 162.305 cv
58.7982 162.953 58.7288 163.477 58.5976 163.878 cv
58.4665 164.28 58.2659 164.58 58.0036 164.796 cv
57.7413 165.012 57.4019 165.113 57.0007 165.113 cv
56.4607 165.113 56.0441 164.928 55.7433 164.55 cv
55.3807 164.094 55.2033 163.346 55.2033 162.305 cv
55.8976 162.305 mo
55.8976 163.215 55.9978 163.817 56.2139 164.118 cv
56.4221 164.418 56.6844 164.565 57.0007 164.565 cv
57.3093 164.565 57.5639 164.418 57.7799 164.118 cv
57.9959 163.817 58.1039 163.215 58.1039 162.305 cv
58.1039 161.394 57.9959 160.793 57.7799 160.492 cv
57.5639 160.199 57.3016 160.044 56.993 160.044 cv
56.6767 160.044 56.4299 160.175 56.2447 160.438 cv
56.0133 160.777 55.8976 161.402 55.8976 162.305 cv
f
59.4925 162.305 mo
59.4925 161.657 59.5542 161.132 59.6931 160.731 cv
59.8242 160.33 60.0248 160.021 60.2871 159.805 cv
60.5494 159.589 60.8888 159.481 61.29 159.481 cv
61.5832 159.481 61.8454 159.543 62.0692 159.666 cv
62.2852 159.79 62.4703 159.959 62.6169 160.183 cv
62.7635 160.407 62.8792 160.677 62.9641 161.001 cv
63.0412 161.325 63.0875 161.765 63.0875 162.305 cv
63.0875 162.953 63.0181 163.477 62.8869 163.878 cv
62.7558 164.28 62.5552 164.58 62.2929 164.796 cv
62.0306 165.012 61.6912 165.113 61.29 165.113 cv
60.75 165.113 60.3334 164.928 60.0325 164.55 cv
59.67 164.094 59.4925 163.346 59.4925 162.305 cv
60.1868 162.305 mo
60.1868 163.215 60.2871 163.817 60.5031 164.118 cv
60.7114 164.418 60.9737 164.565 61.29 164.565 cv
61.5986 164.565 61.8532 164.418 62.0692 164.118 cv
62.2852 163.817 62.3932 163.215 62.3932 162.305 cv
62.3932 161.394 62.2852 160.793 62.0692 160.492 cv
61.8532 160.199 61.5909 160.044 61.2823 160.044 cv
60.966 160.044 60.7191 160.175 60.534 160.438 cv
60.3025 160.777 60.1868 161.402 60.1868 162.305 cv
f
63.7818 162.305 mo
63.7818 161.657 63.8435 161.132 63.9824 160.731 cv
64.1135 160.33 64.3141 160.021 64.5764 159.805 cv
64.8387 159.589 65.1781 159.481 65.5793 159.481 cv
65.8724 159.481 66.1347 159.543 66.3584 159.666 cv
66.5744 159.79 66.7596 159.959 66.9062 160.183 cv
67.0527 160.407 67.1685 160.677 67.2533 161.001 cv
67.3305 161.325 67.3768 161.765 67.3768 162.305 cv
67.3768 162.953 67.3073 163.477 67.1762 163.878 cv
67.045 164.28 66.8445 164.58 66.5822 164.796 cv
66.3199 165.012 65.9804 165.113 65.5793 165.113 cv
65.0393 165.113 64.6227 164.928 64.3218 164.55 cv
63.9592 164.094 63.7818 163.346 63.7818 162.305 cv
64.4761 162.305 mo
64.4761 163.215 64.5764 163.817 64.7924 164.118 cv
65.0007 164.418 65.263 164.565 65.5793 164.565 cv
65.8878 164.565 66.1424 164.418 66.3584 164.118 cv
66.5744 163.817 66.6824 163.215 66.6824 162.305 cv
66.6824 161.394 66.5744 160.793 66.3584 160.492 cv
66.1424 160.199 65.8801 160.044 65.5716 160.044 cv
65.2553 160.044 65.0084 160.175 64.8232 160.438 cv
64.5918 160.777 64.4761 161.402 64.4761 162.305 cv
f
45.8375 162.621 mo
42.1963 162.621 li
42.1963 161.988 li
45.8375 161.988 li
45.8375 162.621 li
f
f
81.8158 153.654 mo
81.8158 153.654 li
@
81.8158 14.3853 mo
81.8158 14.3853 li
f
81.8158 14.3853 mo
81.8158 14.3853 li
@
76.5647 165.028 mo
75.8859 165.028 li
75.8859 160.708 li
75.7161 160.862 75.5001 161.024 75.2378 161.178 cv
74.9755 161.333 74.7364 161.448 74.5281 161.526 cv
74.5281 160.87 li
74.9061 160.692 75.2378 160.476 75.5233 160.222 cv
75.801 159.975 76.0016 159.728 76.125 159.481 cv
76.5647 159.481 li
76.5647 165.028 li
f
81.8569 164.38 mo
81.8569 165.028 li
78.2079 165.028 li
78.2002 164.866 78.2311 164.712 78.2928 164.557 cv
78.3854 164.31 78.5319 164.071 78.7325 163.824 cv
78.9331 163.585 79.234 163.308 79.6197 162.984 cv
80.2214 162.498 80.6226 162.112 80.8386 161.819 cv
81.0469 161.533 81.1549 161.263 81.1549 161.001 cv
81.1549 160.739 81.0546 160.507 80.8617 160.322 cv
80.6689 160.137 80.422 160.044 80.1134 160.044 cv
79.7894 160.044 79.5271 160.145 79.3343 160.337 cv
79.1337 160.538 79.0334 160.808 79.0334 161.155 cv
78.3391 161.078 li
78.3854 160.561 78.5628 160.168 78.8714 159.89 cv
79.18 159.62 79.6043 159.481 80.1288 159.481 cv
80.6534 159.481 81.0777 159.635 81.3863 159.929 cv
81.6949 160.222 81.8492 160.584 81.8492 161.016 cv
81.8492 161.24 81.8029 161.456 81.7103 161.672 cv
81.6177 161.888 81.4712 162.112 81.2629 162.343 cv
81.0546 162.582 80.7074 162.906 80.2214 163.315 cv
79.8125 163.655 79.5503 163.886 79.4345 164.01 cv
79.3188 164.133 79.2262 164.256 79.1491 164.38 cv
81.8569 164.38 li
f
82.5898 162.305 mo
82.5898 161.657 82.6515 161.132 82.7904 160.731 cv
82.9215 160.33 83.1221 160.021 83.3844 159.805 cv
83.6467 159.589 83.9861 159.481 84.3873 159.481 cv
84.6804 159.481 84.9427 159.543 85.1664 159.666 cv
85.3824 159.79 85.5676 159.959 85.7141 160.183 cv
85.8607 160.407 85.9764 160.677 86.0613 161.001 cv
86.1385 161.325 86.1847 161.765 86.1847 162.305 cv
86.1847 162.953 86.1153 163.477 85.9842 163.878 cv
85.853 164.28 85.6524 164.58 85.3901 164.796 cv
85.1278 165.012 84.7884 165.113 84.3873 165.113 cv
83.8472 165.113 83.4307 164.928 83.1298 164.55 cv
82.7672 164.094 82.5898 163.346 82.5898 162.305 cv
83.2841 162.305 mo
83.2841 163.215 83.3844 163.817 83.6004 164.118 cv
83.8087 164.418 84.071 164.565 84.3873 164.565 cv
84.6958 164.565 84.9504 164.418 85.1664 164.118 cv
85.3824 163.817 85.4904 163.215 85.4904 162.305 cv
85.4904 161.394 85.3824 160.793 85.1664 160.492 cv
84.9504 160.199 84.6881 160.044 84.3795 160.044 cv
84.0632 160.044 83.8164 160.175 83.6312 160.438 cv
83.3998 160.777 83.2841 161.402 83.2841 162.305 cv
f
86.879 162.305 mo
86.879 161.657 86.9408 161.132 87.0796 160.731 cv
87.2108 160.33 87.4113 160.021 87.6736 159.805 cv
87.9359 159.589 88.2754 159.481 88.6765 159.481 cv
88.9697 159.481 89.232 159.543 89.4557 159.666 cv
89.6717 159.79 89.8568 159.959 90.0034 160.183 cv
90.15 160.407 90.2657 160.677 90.3506 161.001 cv
90.4277 161.325 90.474 161.765 90.474 162.305 cv
90.474 162.953 90.4046 163.477 90.2734 163.878 cv
90.1423 164.28 89.9417 164.58 89.6794 164.796 cv
89.4171 165.012 89.0777 165.113 88.6765 165.113 cv
88.1365 165.113 87.7199 164.928 87.4191 164.55 cv
87.0565 164.094 86.879 163.346 86.879 162.305 cv
87.5733 162.305 mo
87.5733 163.215 87.6736 163.817 87.8896 164.118 cv
88.0979 164.418 88.3602 164.565 88.6765 164.565 cv
88.9851 164.565 89.2397 164.418 89.4557 164.118 cv
89.6717 163.817 89.7797 163.215 89.7797 162.305 cv
89.7797 161.394 89.6717 160.793 89.4557 160.492 cv
89.2397 160.199 88.9774 160.044 88.6688 160.044 cv
88.3525 160.044 88.1056 160.175 87.9205 160.438 cv
87.6891 160.777 87.5733 161.402 87.5733 162.305 cv
f
91.1683 162.305 mo
91.1683 161.657 91.23 161.132 91.3689 160.731 cv
91.5 160.33 91.7006 160.021 91.9629 159.805 cv
92.2252 159.589 92.5646 159.481 92.9658 159.481 cv
93.2589 159.481 93.5212 159.543 93.7449 159.666 cv
93.961 159.79 94.1461 159.959 94.2927 160.183 cv
94.4393 160.407 94.555 160.677 94.6398 161.001 cv
94.717 161.325 94.7633 161.765 94.7633 162.305 cv
94.7633 162.953 94.6938 163.477 94.5627 163.878 cv
94.4315 164.28 94.231 164.58 93.9687 164.796 cv
93.7064 165.012 93.3669 165.113 92.9658 165.113 cv
92.4258 165.113 92.0092 164.928 91.7083 164.55 cv
91.3457 164.094 91.1683 163.346 91.1683 162.305 cv
91.8626 162.305 mo
91.8626 163.215 91.9629 163.817 92.1789 164.118 cv
92.3872 164.418 92.6495 164.565 92.9658 164.565 cv
93.2744 164.565 93.5289 164.418 93.7449 164.118 cv
93.961 163.817 94.069 163.215 94.069 162.305 cv
94.069 161.394 93.961 160.793 93.7449 160.492 cv
93.5289 160.199 93.2666 160.044 92.9581 160.044 cv
92.6418 160.044 92.3949 160.175 92.2098 160.438 cv
91.9783 160.777 91.8626 161.402 91.8626 162.305 cv
f
73.2241 162.621 mo
69.5828 162.621 li
69.5828 161.988 li
73.2241 161.988 li
73.2241 162.621 li
f
f
109.202 153.654 mo
109.202 153.654 li
@
109.202 14.3853 mo
109.202 14.3853 li
f
109.202 14.3853 mo
109.202 14.3853 li
@
104.219 165.028 mo
103.54 165.028 li
103.54 160.708 li
103.371 160.862 103.155 161.024 102.892 161.178 cv
102.63 161.333 102.391 161.448 102.182 161.526 cv
102.182 160.87 li
102.561 160.692 102.892 160.476 103.178 160.222 cv
103.455 159.975 103.656 159.728 103.779 159.481 cv
104.219 159.481 li
104.219 165.028 li
f
108.508 165.028 mo
107.83 165.028 li
107.83 160.708 li
107.66 160.862 107.444 161.024 107.181 161.178 cv
106.919 161.333 106.68 161.448 106.472 161.526 cv
106.472 160.87 li
106.85 160.692 107.181 160.476 107.467 160.222 cv
107.745 159.975 107.945 159.728 108.069 159.481 cv
108.508 159.481 li
108.508 165.028 li
f
110.244 162.305 mo
110.244 161.657 110.306 161.132 110.445 160.731 cv
110.576 160.33 110.776 160.021 111.039 159.805 cv
111.301 159.589 111.64 159.481 112.042 159.481 cv
112.335 159.481 112.597 159.543 112.821 159.666 cv
113.037 159.79 113.222 159.959 113.369 160.183 cv
113.515 160.407 113.631 160.677 113.716 161.001 cv
113.793 161.325 113.839 161.765 113.839 162.305 cv
113.839 162.953 113.77 163.477 113.639 163.878 cv
113.507 164.28 113.307 164.58 113.045 164.796 cv
112.782 165.012 112.443 165.113 112.042 165.113 cv
111.502 165.113 111.085 164.928 110.784 164.55 cv
110.422 164.094 110.244 163.346 110.244 162.305 cv
110.938 162.305 mo
110.938 163.215 111.039 163.817 111.255 164.118 cv
111.463 164.418 111.725 164.565 112.042 164.565 cv
112.35 164.565 112.605 164.418 112.821 164.118 cv
113.037 163.817 113.145 163.215 113.145 162.305 cv
113.145 161.394 113.037 160.793 112.821 160.492 cv
112.605 160.199 112.342 160.044 112.034 160.044 cv
111.718 160.044 111.471 160.175 111.286 160.438 cv
111.054 160.777 110.938 161.402 110.938 162.305 cv
f
114.533 162.305 mo
114.533 161.657 114.595 161.132 114.734 160.731 cv
114.865 160.33 115.066 160.021 115.328 159.805 cv
115.59 159.589 115.93 159.481 116.331 159.481 cv
116.624 159.481 116.886 159.543 117.11 159.666 cv
117.326 159.79 117.511 159.959 117.658 160.183 cv
117.804 160.407 117.92 160.677 118.005 161.001 cv
118.082 161.325 118.128 161.765 118.128 162.305 cv
118.128 162.953 118.059 163.477 117.928 163.878 cv
117.797 164.28 117.596 164.58 117.334 164.796 cv
117.071 165.012 116.732 165.113 116.331 165.113 cv
115.791 165.113 115.374 164.928 115.073 164.55 cv
114.711 164.094 114.533 163.346 114.533 162.305 cv
115.228 162.305 mo
115.228 163.215 115.328 163.817 115.544 164.118 cv
115.752 164.418 116.015 164.565 116.331 164.565 cv
116.639 164.565 116.894 164.418 117.11 164.118 cv
117.326 163.817 117.434 163.215 117.434 162.305 cv
117.434 161.394 117.326 160.793 117.11 160.492 cv
116.894 160.199 116.632 160.044 116.323 160.044 cv
116.007 160.044 115.76 160.175 115.575 160.438 cv
115.343 160.777 115.228 161.402 115.228 162.305 cv
f
118.823 162.305 mo
118.823 161.657 118.884 161.132 119.023 160.731 cv
119.154 160.33 119.355 160.021 119.617 159.805 cv
119.88 159.589 120.219 159.481 120.62 159.481 cv
120.913 159.481 121.176 159.543 121.399 159.666 cv
121.615 159.79 121.8 159.959 121.947 160.183 cv
122.094 160.407 122.209 160.677 122.294 161.001 cv
122.371 161.325 122.418 161.765 122.418 162.305 cv
122.418 162.953 122.348 163.477 122.217 163.878 cv
122.086 164.28 121.885 164.58 121.623 164.796 cv
121.361 165.012 121.021 165.113 120.62 165.113 cv
120.08 165.113 119.664 164.928 119.363 164.55 cv
119 164.094 118.823 163.346 118.823 162.305 cv
119.517 162.305 mo
119.517 163.215 119.617 163.817 119.833 164.118 cv
120.042 164.418 120.304 164.565 120.62 164.565 cv
120.929 164.565 121.183 164.418 121.399 164.118 cv
121.615 163.817 121.723 163.215 121.723 162.305 cv
121.723 161.394 121.615 160.793 121.399 160.492 cv
121.183 160.199 120.921 160.044 120.612 160.044 cv
120.296 160.044 120.049 160.175 119.864 160.438 cv
119.633 160.777 119.517 161.402 119.517 162.305 cv
f
100.878 162.621 mo
97.2372 162.621 li
97.2372 161.988 li
100.878 161.988 li
100.878 162.621 li
f
f
136.589 153.654 mo
136.589 153.654 li
@
136.589 14.3853 mo
136.589 14.3853 li
f
136.589 14.3853 mo
136.589 14.3853 li
@
131.338 165.028 mo
130.659 165.028 li
130.659 160.708 li
130.489 160.862 130.273 161.024 130.011 161.178 cv
129.749 161.333 129.509 161.448 129.301 161.526 cv
129.301 160.87 li
129.679 160.692 130.011 160.476 130.296 160.222 cv
130.574 159.975 130.775 159.728 130.898 159.481 cv
131.338 159.481 li
131.338 165.028 li
f
133.074 162.305 mo
133.074 161.657 133.135 161.132 133.274 160.731 cv
133.405 160.33 133.606 160.021 133.868 159.805 cv
134.13 159.589 134.47 159.481 134.871 159.481 cv
135.164 159.481 135.426 159.543 135.65 159.666 cv
135.866 159.79 136.051 159.959 136.198 160.183 cv
136.344 160.407 136.46 160.677 136.545 161.001 cv
136.622 161.325 136.669 161.765 136.669 162.305 cv
136.669 162.953 136.599 163.477 136.468 163.878 cv
136.337 164.28 136.136 164.58 135.874 164.796 cv
135.612 165.012 135.272 165.113 134.871 165.113 cv
134.331 165.113 133.914 164.928 133.614 164.55 cv
133.251 164.094 133.074 163.346 133.074 162.305 cv
133.768 162.305 mo
133.768 163.215 133.868 163.817 134.084 164.118 cv
134.292 164.418 134.555 164.565 134.871 164.565 cv
135.18 164.565 135.434 164.418 135.65 164.118 cv
135.866 163.817 135.974 163.215 135.974 162.305 cv
135.974 161.394 135.866 160.793 135.65 160.492 cv
135.434 160.199 135.172 160.044 134.863 160.044 cv
134.547 160.044 134.3 160.175 134.115 160.438 cv
133.884 160.777 133.768 161.402 133.768 162.305 cv
f
137.363 162.305 mo
137.363 161.657 137.425 161.132 137.563 160.731 cv
137.695 160.33 137.895 160.021 138.157 159.805 cv
138.42 159.589 138.759 159.481 139.16 159.481 cv
139.453 159.481 139.716 159.543 139.939 159.666 cv
140.155 159.79 140.341 159.959 140.487 160.183 cv
140.634 160.407 140.749 160.677 140.834 161.001 cv
140.911 161.325 140.958 161.765 140.958 162.305 cv
140.958 162.953 140.888 163.477 140.757 163.878 cv
140.626 164.28 140.425 164.58 140.163 164.796 cv
139.901 165.012 139.561 165.113 139.16 165.113 cv
138.62 165.113 138.204 164.928 137.903 164.55 cv
137.54 164.094 137.363 163.346 137.363 162.305 cv
138.057 162.305 mo
138.057 163.215 138.157 163.817 138.373 164.118 cv
138.582 164.418 138.844 164.565 139.16 164.565 cv
139.469 164.565 139.723 164.418 139.939 164.118 cv
140.155 163.817 140.263 163.215 140.263 162.305 cv
140.263 161.394 140.155 160.793 139.939 160.492 cv
139.723 160.199 139.461 160.044 139.153 160.044 cv
138.836 160.044 138.589 160.175 138.404 160.438 cv
138.173 160.777 138.057 161.402 138.057 162.305 cv
f
141.652 162.305 mo
141.652 161.657 141.714 161.132 141.853 160.731 cv
141.984 160.33 142.184 160.021 142.447 159.805 cv
142.709 159.589 143.048 159.481 143.45 159.481 cv
143.743 159.481 144.005 159.543 144.229 159.666 cv
144.445 159.79 144.63 159.959 144.776 160.183 cv
144.923 160.407 145.039 160.677 145.124 161.001 cv
145.201 161.325 145.247 161.765 145.247 162.305 cv
145.247 162.953 145.178 163.477 145.046 163.878 cv
144.915 164.28 144.715 164.58 144.452 164.796 cv
144.19 165.012 143.851 165.113 143.45 165.113 cv
142.91 165.113 142.493 164.928 142.192 164.55 cv
141.83 164.094 141.652 163.346 141.652 162.305 cv
142.346 162.305 mo
142.346 163.215 142.447 163.817 142.663 164.118 cv
142.871 164.418 143.133 164.565 143.45 164.565 cv
143.758 164.565 144.013 164.418 144.229 164.118 cv
144.445 163.817 144.553 163.215 144.553 162.305 cv
144.553 161.394 144.445 160.793 144.229 160.492 cv
144.013 160.199 143.75 160.044 143.442 160.044 cv
143.126 160.044 142.879 160.175 142.694 160.438 cv
142.462 160.777 142.346 161.402 142.346 162.305 cv
f
145.941 162.305 mo
145.941 161.657 146.003 161.132 146.142 160.731 cv
146.273 160.33 146.474 160.021 146.736 159.805 cv
146.998 159.589 147.338 159.481 147.739 159.481 cv
148.032 159.481 148.294 159.543 148.518 159.666 cv
148.734 159.79 148.919 159.959 149.066 160.183 cv
149.212 160.407 149.328 160.677 149.413 161.001 cv
149.49 161.325 149.536 161.765 149.536 162.305 cv
149.536 162.953 149.467 163.477 149.336 163.878 cv
149.205 164.28 149.004 164.58 148.742 164.796 cv
148.479 165.012 148.14 165.113 147.739 165.113 cv
147.199 165.113 146.782 164.928 146.481 164.55 cv
146.119 164.094 145.941 163.346 145.941 162.305 cv
146.636 162.305 mo
146.636 163.215 146.736 163.817 146.952 164.118 cv
147.16 164.418 147.423 164.565 147.739 164.565 cv
148.047 164.565 148.302 164.418 148.518 164.118 cv
148.734 163.817 148.842 163.215 148.842 162.305 cv
148.842 161.394 148.734 160.793 148.518 160.492 cv
148.302 160.199 148.04 160.044 147.731 160.044 cv
147.415 160.044 147.168 160.175 146.983 160.438 cv
146.751 160.777 146.636 161.402 146.636 162.305 cv
f
127.997 162.621 mo
124.356 162.621 li
124.356 161.988 li
127.997 161.988 li
127.997 162.621 li
f
f
163.975 153.654 mo
163.975 153.654 li
@
163.975 14.3853 mo
163.975 14.3853 li
f
163.975 14.3853 mo
163.975 14.3853 li
@
158.431 163.747 mo
159.079 163.693 li
159.133 164.002 159.241 164.218 159.395 164.357 cv
159.549 164.496 159.75 164.565 159.997 164.565 cv
160.197 164.565 160.383 164.519 160.537 164.426 cv
160.691 164.334 160.822 164.202 160.923 164.04 cv
161.023 163.886 161.108 163.67 161.177 163.392 cv
161.247 163.122 161.285 162.845 161.285 162.567 cv
161.277 162.428 li
161.139 162.644 160.953 162.822 160.722 162.953 cv
160.491 163.092 160.236 163.153 159.958 163.153 cv
159.503 163.153 159.117 162.991 158.801 162.66 cv
158.485 162.328 158.33 161.888 158.33 161.348 cv
158.33 160.793 158.492 160.337 158.824 159.998 cv
159.148 159.659 159.565 159.481 160.066 159.481 cv
160.421 159.481 160.745 159.581 161.046 159.774 cv
161.339 159.967 161.571 160.245 161.725 160.6 cv
161.879 160.962 161.956 161.479 161.956 162.15 cv
161.956 162.86 161.879 163.423 161.725 163.84 cv
161.571 164.256 161.347 164.573 161.046 164.789 cv
160.737 165.005 160.383 165.113 159.981 165.113 cv
159.549 165.113 159.194 164.997 158.917 164.758 cv
158.639 164.526 158.477 164.187 158.431 163.747 cv
161.208 161.317 mo
161.208 160.932 161.1 160.623 160.892 160.391 cv
160.683 160.16 160.437 160.044 160.143 160.044 cv
159.842 160.044 159.58 160.168 159.356 160.415 cv
159.133 160.661 159.025 160.986 159.025 161.371 cv
159.025 161.726 159.125 162.012 159.341 162.228 cv
159.549 162.451 159.812 162.559 160.128 162.559 cv
160.437 162.559 160.699 162.451 160.899 162.228 cv
161.1 162.012 161.208 161.703 161.208 161.317 cv
f
162.62 162.305 mo
162.62 161.657 162.681 161.132 162.82 160.731 cv
162.951 160.33 163.152 160.021 163.414 159.805 cv
163.677 159.589 164.016 159.481 164.417 159.481 cv
164.71 159.481 164.973 159.543 165.196 159.666 cv
165.412 159.79 165.598 159.959 165.744 160.183 cv
165.891 160.407 166.006 160.677 166.091 161.001 cv
166.168 161.325 166.215 161.765 166.215 162.305 cv
166.215 162.953 166.145 163.477 166.014 163.878 cv
165.883 164.28 165.682 164.58 165.42 164.796 cv
165.158 165.012 164.818 165.113 164.417 165.113 cv
163.877 165.113 163.461 164.928 163.16 164.55 cv
162.797 164.094 162.62 163.346 162.62 162.305 cv
163.314 162.305 mo
163.314 163.215 163.414 163.817 163.63 164.118 cv
163.839 164.418 164.101 164.565 164.417 164.565 cv
164.726 164.565 164.98 164.418 165.196 164.118 cv
165.412 163.817 165.52 163.215 165.52 162.305 cv
165.52 161.394 165.412 160.793 165.196 160.492 cv
164.98 160.199 164.718 160.044 164.409 160.044 cv
164.093 160.044 163.846 160.175 163.661 160.438 cv
163.43 160.777 163.314 161.402 163.314 162.305 cv
f
166.909 162.305 mo
166.909 161.657 166.971 161.132 167.11 160.731 cv
167.241 160.33 167.441 160.021 167.704 159.805 cv
167.966 159.589 168.305 159.481 168.706 159.481 cv
169 159.481 169.262 159.543 169.486 159.666 cv
169.702 159.79 169.887 159.959 170.033 160.183 cv
170.18 160.407 170.296 160.677 170.381 161.001 cv
170.458 161.325 170.504 161.765 170.504 162.305 cv
170.504 162.953 170.435 163.477 170.303 163.878 cv
170.172 164.28 169.972 164.58 169.709 164.796 cv
169.447 165.012 169.108 165.113 168.706 165.113 cv
168.166 165.113 167.75 164.928 167.449 164.55 cv
167.086 164.094 166.909 163.346 166.909 162.305 cv
167.603 162.305 mo
167.603 163.215 167.704 163.817 167.92 164.118 cv
168.128 164.418 168.39 164.565 168.706 164.565 cv
169.015 164.565 169.27 164.418 169.486 164.118 cv
169.702 163.817 169.81 163.215 169.81 162.305 cv
169.81 161.394 169.702 160.793 169.486 160.492 cv
169.27 160.199 169.007 160.044 168.699 160.044 cv
168.382 160.044 168.136 160.175 167.95 160.438 cv
167.719 160.777 167.603 161.402 167.603 162.305 cv
f
171.198 162.305 mo
171.198 161.657 171.26 161.132 171.399 160.731 cv
171.53 160.33 171.731 160.021 171.993 159.805 cv
172.255 159.589 172.595 159.481 172.996 159.481 cv
173.289 159.481 173.551 159.543 173.775 159.666 cv
173.991 159.79 174.176 159.959 174.323 160.183 cv
174.469 160.407 174.585 160.677 174.67 161.001 cv
174.747 161.325 174.793 161.765 174.793 162.305 cv
174.793 162.953 174.724 163.477 174.593 163.878 cv
174.461 164.28 174.261 164.58 173.999 164.796 cv
173.736 165.012 173.397 165.113 172.996 165.113 cv
172.456 165.113 172.039 164.928 171.738 164.55 cv
171.376 164.094 171.198 163.346 171.198 162.305 cv
171.893 162.305 mo
171.893 163.215 171.993 163.817 172.209 164.118 cv
172.417 164.418 172.679 164.565 172.996 164.565 cv
173.304 164.565 173.559 164.418 173.775 164.118 cv
173.991 163.817 174.099 163.215 174.099 162.305 cv
174.099 161.394 173.991 160.793 173.775 160.492 cv
173.559 160.199 173.297 160.044 172.988 160.044 cv
172.672 160.044 172.425 160.175 172.24 160.438 cv
172.008 160.777 171.893 161.402 171.893 162.305 cv
f
157.543 162.621 mo
153.902 162.621 li
153.902 161.988 li
157.543 161.988 li
157.543 162.621 li
f
f
191.362 153.654 mo
191.362 153.654 li
@
191.362 14.3853 mo
191.362 14.3853 li
f
191.362 14.3853 mo
191.362 14.3853 li
@
186.758 162.035 mo
186.473 161.934 186.265 161.788 186.126 161.595 cv
185.987 161.41 185.925 161.178 185.925 160.908 cv
185.925 160.507 186.064 160.175 186.357 159.898 cv
186.65 159.62 187.036 159.481 187.514 159.481 cv
187.993 159.481 188.386 159.628 188.679 159.905 cv
188.972 160.183 189.119 160.523 189.119 160.924 cv
189.119 161.186 189.05 161.41 188.918 161.595 cv
188.78 161.788 188.579 161.934 188.301 162.035 cv
188.641 162.143 188.895 162.32 189.073 162.567 cv
189.25 162.814 189.343 163.107 189.343 163.446 cv
189.343 163.925 189.173 164.318 188.841 164.634 cv
188.502 164.958 188.062 165.113 187.522 165.113 cv
186.974 165.113 186.535 164.958 186.203 164.634 cv
185.871 164.318 185.709 163.917 185.709 163.431 cv
185.709 163.076 185.794 162.775 185.979 162.528 cv
186.157 162.289 186.419 162.127 186.758 162.035 cv
186.62 160.885 mo
186.62 161.148 186.704 161.364 186.874 161.526 cv
187.044 161.695 187.26 161.772 187.53 161.772 cv
187.792 161.772 188 161.695 188.17 161.526 cv
188.34 161.364 188.425 161.163 188.425 160.924 cv
188.425 160.677 188.332 160.469 188.162 160.299 cv
187.993 160.129 187.777 160.044 187.522 160.044 cv
187.26 160.044 187.044 160.129 186.874 160.291 cv
186.704 160.461 186.62 160.654 186.62 160.885 cv
186.404 163.431 mo
186.404 163.632 186.45 163.817 186.542 163.994 cv
186.635 164.179 186.766 164.318 186.951 164.418 cv
187.129 164.519 187.322 164.565 187.53 164.565 cv
187.854 164.565 188.116 164.465 188.332 164.256 cv
188.54 164.048 188.648 163.778 188.648 163.454 cv
188.648 163.13 188.54 162.868 188.324 162.652 cv
188.108 162.436 187.831 162.328 187.507 162.328 cv
187.183 162.328 186.92 162.436 186.712 162.644 cv
186.504 162.86 186.404 163.122 186.404 163.431 cv
f
190.006 162.305 mo
190.006 161.657 190.068 161.132 190.207 160.731 cv
190.338 160.33 190.539 160.021 190.801 159.805 cv
191.063 159.589 191.403 159.481 191.804 159.481 cv
192.097 159.481 192.359 159.543 192.583 159.666 cv
192.799 159.79 192.984 159.959 193.131 160.183 cv
193.277 160.407 193.393 160.677 193.478 161.001 cv
193.555 161.325 193.601 161.765 193.601 162.305 cv
193.601 162.953 193.532 163.477 193.401 163.878 cv
193.269 164.28 193.069 164.58 192.807 164.796 cv
192.544 165.012 192.205 165.113 191.804 165.113 cv
191.264 165.113 190.847 164.928 190.546 164.55 cv
190.184 164.094 190.006 163.346 190.006 162.305 cv
190.701 162.305 mo
190.701 163.215 190.801 163.817 191.017 164.118 cv
191.225 164.418 191.487 164.565 191.804 164.565 cv
192.112 164.565 192.367 164.418 192.583 164.118 cv
192.799 163.817 192.907 163.215 192.907 162.305 cv
192.907 161.394 192.799 160.793 192.583 160.492 cv
192.367 160.199 192.105 160.044 191.796 160.044 cv
191.48 160.044 191.233 160.175 191.048 160.438 cv
190.816 160.777 190.701 161.402 190.701 162.305 cv
f
194.296 162.305 mo
194.296 161.657 194.357 161.132 194.496 160.731 cv
194.627 160.33 194.828 160.021 195.09 159.805 cv
195.352 159.589 195.692 159.481 196.093 159.481 cv
196.386 159.481 196.648 159.543 196.872 159.666 cv
197.088 159.79 197.273 159.959 197.42 160.183 cv
197.566 160.407 197.682 160.677 197.767 161.001 cv
197.844 161.325 197.89 161.765 197.89 162.305 cv
197.89 162.953 197.821 163.477 197.69 163.878 cv
197.559 164.28 197.358 164.58 197.096 164.796 cv
196.834 165.012 196.494 165.113 196.093 165.113 cv
195.553 165.113 195.136 164.928 194.836 164.55 cv
194.473 164.094 194.296 163.346 194.296 162.305 cv
194.99 162.305 mo
194.99 163.215 195.09 163.817 195.306 164.118 cv
195.514 164.418 195.777 164.565 196.093 164.565 cv
196.402 164.565 196.656 164.418 196.872 164.118 cv
197.088 163.817 197.196 163.215 197.196 162.305 cv
197.196 161.394 197.088 160.793 196.872 160.492 cv
196.656 160.199 196.394 160.044 196.085 160.044 cv
195.769 160.044 195.522 160.175 195.337 160.438 cv
195.106 160.777 194.99 161.402 194.99 162.305 cv
f
198.585 162.305 mo
198.585 161.657 198.646 161.132 198.785 160.731 cv
198.916 160.33 199.117 160.021 199.379 159.805 cv
199.642 159.589 199.981 159.481 200.382 159.481 cv
200.675 159.481 200.938 159.543 201.161 159.666 cv
201.377 159.79 201.563 159.959 201.709 160.183 cv
201.856 160.407 201.971 160.677 202.056 161.001 cv
202.133 161.325 202.18 161.765 202.18 162.305 cv
202.18 162.953 202.11 163.477 201.979 163.878 cv
201.848 164.28 201.647 164.58 201.385 164.796 cv
201.123 165.012 200.783 165.113 200.382 165.113 cv
199.842 165.113 199.426 164.928 199.125 164.55 cv
198.762 164.094 198.585 163.346 198.585 162.305 cv
199.279 162.305 mo
199.279 163.215 199.379 163.817 199.595 164.118 cv
199.804 164.418 200.066 164.565 200.382 164.565 cv
200.691 164.565 200.945 164.418 201.161 164.118 cv
201.377 163.817 201.485 163.215 201.485 162.305 cv
201.485 161.394 201.377 160.793 201.161 160.492 cv
200.945 160.199 200.683 160.044 200.375 160.044 cv
200.058 160.044 199.811 160.175 199.626 160.438 cv
199.395 160.777 199.279 161.402 199.279 162.305 cv
f
184.93 162.621 mo
181.289 162.621 li
181.289 161.988 li
184.93 161.988 li
184.93 162.621 li
f
f
218.748 153.654 mo
218.748 153.654 li
@
218.748 14.3853 mo
218.748 14.3853 li
f
218.748 14.3853 mo
218.748 14.3853 li
@
213.142 160.229 mo
213.142 159.574 li
216.722 159.574 li
216.722 160.106 li
216.367 160.484 216.012 160.986 215.672 161.603 cv
215.325 162.22 215.055 162.86 214.87 163.508 cv
214.731 163.971 214.646 164.48 214.616 165.028 cv
213.914 165.028 li
213.921 164.596 214.006 164.071 214.168 163.454 cv
214.33 162.837 214.562 162.243 214.87 161.672 cv
215.179 161.101 215.503 160.623 215.85 160.229 cv
213.142 160.229 li
f
217.393 162.305 mo
217.393 161.657 217.454 161.132 217.593 160.731 cv
217.724 160.33 217.925 160.021 218.187 159.805 cv
218.45 159.589 218.789 159.481 219.19 159.481 cv
219.483 159.481 219.746 159.543 219.969 159.666 cv
220.185 159.79 220.371 159.959 220.517 160.183 cv
220.664 160.407 220.779 160.677 220.864 161.001 cv
220.941 161.325 220.988 161.765 220.988 162.305 cv
220.988 162.953 220.918 163.477 220.787 163.878 cv
220.656 164.28 220.455 164.58 220.193 164.796 cv
219.931 165.012 219.591 165.113 219.19 165.113 cv
218.65 165.113 218.234 164.928 217.933 164.55 cv
217.57 164.094 217.393 163.346 217.393 162.305 cv
218.087 162.305 mo
218.087 163.215 218.187 163.817 218.403 164.118 cv
218.612 164.418 218.874 164.565 219.19 164.565 cv
219.499 164.565 219.753 164.418 219.969 164.118 cv
220.185 163.817 220.293 163.215 220.293 162.305 cv
220.293 161.394 220.185 160.793 219.969 160.492 cv
219.753 160.199 219.491 160.044 219.183 160.044 cv
218.866 160.044 218.619 160.175 218.434 160.438 cv
218.203 160.777 218.087 161.402 218.087 162.305 cv
f
221.682 162.305 mo
221.682 161.657 221.744 161.132 221.883 160.731 cv
222.014 160.33 222.214 160.021 222.477 159.805 cv
222.739 159.589 223.078 159.481 223.48 159.481 cv
223.773 159.481 224.035 159.543 224.259 159.666 cv
224.475 159.79 224.66 159.959 224.806 160.183 cv
224.953 160.407 225.069 160.677 225.154 161.001 cv
225.231 161.325 225.277 161.765 225.277 162.305 cv
225.277 162.953 225.208 163.477 225.076 163.878 cv
224.945 164.28 224.745 164.58 224.482 164.796 cv
224.22 165.012 223.881 165.113 223.48 165.113 cv
222.939 165.113 222.523 164.928 222.222 164.55 cv
221.859 164.094 221.682 163.346 221.682 162.305 cv
222.376 162.305 mo
222.376 163.215 222.477 163.817 222.693 164.118 cv
222.901 164.418 223.163 164.565 223.48 164.565 cv
223.788 164.565 224.043 164.418 224.259 164.118 cv
224.475 163.817 224.583 163.215 224.583 162.305 cv
224.583 161.394 224.475 160.793 224.259 160.492 cv
224.043 160.199 223.78 160.044 223.472 160.044 cv
223.156 160.044 222.909 160.175 222.723 160.438 cv
222.492 160.777 222.376 161.402 222.376 162.305 cv
f
225.971 162.305 mo
225.971 161.657 226.033 161.132 226.172 160.731 cv
226.303 160.33 226.504 160.021 226.766 159.805 cv
227.028 159.589 227.368 159.481 227.769 159.481 cv
228.062 159.481 228.324 159.543 228.548 159.666 cv
228.764 159.79 228.949 159.959 229.096 160.183 cv
229.242 160.407 229.358 160.677 229.443 161.001 cv
229.52 161.325 229.566 161.765 229.566 162.305 cv
229.566 162.953 229.497 163.477 229.366 163.878 cv
229.235 164.28 229.034 164.58 228.772 164.796 cv
228.509 165.012 228.17 165.113 227.769 165.113 cv
227.229 165.113 226.812 164.928 226.511 164.55 cv
226.149 164.094 225.971 163.346 225.971 162.305 cv
226.666 162.305 mo
226.666 163.215 226.766 163.817 226.982 164.118 cv
227.19 164.418 227.452 164.565 227.769 164.565 cv
228.077 164.565 228.332 164.418 228.548 164.118 cv
228.764 163.817 228.872 163.215 228.872 162.305 cv
228.872 161.394 228.764 160.793 228.548 160.492 cv
228.332 160.199 228.07 160.044 227.761 160.044 cv
227.445 160.044 227.198 160.175 227.013 160.438 cv
226.781 160.777 226.666 161.402 226.666 162.305 cv
f
212.316 162.621 mo
208.675 162.621 li
208.675 161.988 li
212.316 161.988 li
212.316 162.621 li
f
f
246.135 153.654 mo
246.135 153.654 li
@
246.135 14.3853 mo
246.135 14.3853 li
f
246.135 14.3853 mo
246.135 14.3853 li
@
244.008 160.854 mo
243.329 160.908 li
243.267 160.646 243.182 160.453 243.074 160.33 cv
242.889 160.145 242.658 160.044 242.395 160.044 cv
242.179 160.044 241.987 160.106 241.825 160.222 cv
241.609 160.376 241.447 160.607 241.323 160.901 cv
241.2 161.202 241.13 161.626 241.13 162.181 cv
241.292 161.934 241.493 161.757 241.732 161.634 cv
241.963 161.51 242.21 161.448 242.473 161.448 cv
242.92 161.448 243.306 161.618 243.622 161.95 cv
243.938 162.282 244.1 162.714 244.1 163.238 cv
244.1 163.585 244.023 163.909 243.877 164.202 cv
243.722 164.503 243.522 164.727 243.26 164.881 cv
242.997 165.036 242.704 165.113 242.372 165.113 cv
241.801 165.113 241.346 164.912 240.991 164.496 cv
240.637 164.087 240.459 163.4 240.459 162.444 cv
240.459 161.379 240.652 160.607 241.045 160.114 cv
241.385 159.697 241.848 159.481 242.434 159.481 cv
242.866 159.481 243.229 159.605 243.506 159.851 cv
243.784 160.098 243.946 160.43 244.008 160.854 cv
241.238 163.238 mo
241.238 163.47 241.285 163.693 241.385 163.909 cv
241.477 164.125 241.616 164.287 241.801 164.395 cv
241.979 164.511 242.164 164.565 242.365 164.565 cv
242.642 164.565 242.889 164.449 243.098 164.218 cv
243.298 163.986 243.406 163.678 243.406 163.277 cv
243.406 162.899 243.298 162.598 243.098 162.374 cv
242.897 162.158 242.642 162.042 242.334 162.042 cv
242.025 162.042 241.771 162.158 241.555 162.374 cv
241.339 162.598 241.238 162.883 241.238 163.238 cv
f
244.779 162.305 mo
244.779 161.657 244.841 161.132 244.98 160.731 cv
245.111 160.33 245.312 160.021 245.574 159.805 cv
245.836 159.589 246.176 159.481 246.577 159.481 cv
246.87 159.481 247.132 159.543 247.356 159.666 cv
247.572 159.79 247.757 159.959 247.904 160.183 cv
248.05 160.407 248.166 160.677 248.251 161.001 cv
248.328 161.325 248.374 161.765 248.374 162.305 cv
248.374 162.953 248.305 163.477 248.174 163.878 cv
248.043 164.28 247.842 164.58 247.58 164.796 cv
247.317 165.012 246.978 165.113 246.577 165.113 cv
246.037 165.113 245.62 164.928 245.319 164.55 cv
244.957 164.094 244.779 163.346 244.779 162.305 cv
245.474 162.305 mo
245.474 163.215 245.574 163.817 245.79 164.118 cv
245.998 164.418 246.26 164.565 246.577 164.565 cv
246.885 164.565 247.14 164.418 247.356 164.118 cv
247.572 163.817 247.68 163.215 247.68 162.305 cv
247.68 161.394 247.572 160.793 247.356 160.492 cv
247.14 160.199 246.878 160.044 246.569 160.044 cv
246.253 160.044 246.006 160.175 245.821 160.438 cv
245.589 160.777 245.474 161.402 245.474 162.305 cv
f
249.069 162.305 mo
249.069 161.657 249.13 161.132 249.269 160.731 cv
249.4 160.33 249.601 160.021 249.863 159.805 cv
250.125 159.589 250.465 159.481 250.866 159.481 cv
251.159 159.481 251.421 159.543 251.645 159.666 cv
251.861 159.79 252.046 159.959 252.193 160.183 cv
252.339 160.407 252.455 160.677 252.54 161.001 cv
252.617 161.325 252.664 161.765 252.664 162.305 cv
252.664 162.953 252.594 163.477 252.463 163.878 cv
252.332 164.28 252.131 164.58 251.869 164.796 cv
251.607 165.012 251.267 165.113 250.866 165.113 cv
250.326 165.113 249.909 164.928 249.609 164.55 cv
249.246 164.094 249.069 163.346 249.069 162.305 cv
249.763 162.305 mo
249.763 163.215 249.863 163.817 250.079 164.118 cv
250.287 164.418 250.55 164.565 250.866 164.565 cv
251.175 164.565 251.429 164.418 251.645 164.118 cv
251.861 163.817 251.969 163.215 251.969 162.305 cv
251.969 161.394 251.861 160.793 251.645 160.492 cv
251.429 160.199 251.167 160.044 250.858 160.044 cv
250.542 160.044 250.295 160.175 250.11 160.438 cv
249.879 160.777 249.763 161.402 249.763 162.305 cv
f
253.358 162.305 mo
253.358 161.657 253.42 161.132 253.558 160.731 cv
253.69 160.33 253.89 160.021 254.152 159.805 cv
254.415 159.589 254.754 159.481 255.155 159.481 cv
255.448 159.481 255.711 159.543 255.934 159.666 cv
256.15 159.79 256.336 159.959 256.482 160.183 cv
256.629 160.407 256.744 160.677 256.829 161.001 cv
256.906 161.325 256.953 161.765 256.953 162.305 cv
256.953 162.953 256.883 163.477 256.752 163.878 cv
256.621 164.28 256.42 164.58 256.158 164.796 cv
255.896 165.012 255.556 165.113 255.155 165.113 cv
254.615 165.113 254.199 164.928 253.898 164.55 cv
253.535 164.094 253.358 163.346 253.358 162.305 cv
254.052 162.305 mo
254.052 163.215 254.152 163.817 254.368 164.118 cv
254.577 164.418 254.839 164.565 255.155 164.565 cv
255.464 164.565 255.718 164.418 255.934 164.118 cv
256.15 163.817 256.258 163.215 256.258 162.305 cv
256.258 161.394 256.15 160.793 255.934 160.492 cv
255.718 160.199 255.456 160.044 255.148 160.044 cv
254.831 160.044 254.584 160.175 254.399 160.438 cv
254.168 160.777 254.052 161.402 254.052 162.305 cv
f
239.703 162.621 mo
236.062 162.621 li
236.062 161.988 li
239.703 161.988 li
239.703 162.621 li
f
88.4495 178.12 mo
88.4495 172.044 li
92.5482 172.044 li
92.5482 172.765 li
89.2557 172.765 li
89.2557 174.641 li
92.107 174.641 li
92.107 175.362 li
89.2557 175.362 li
89.2557 178.12 li
88.4495 178.12 li
f
93.4986 172.901 mo
93.4986 172.044 li
94.2454 172.044 li
94.2454 172.901 li
93.4986 172.901 li
93.4986 178.12 mo
93.4986 173.716 li
94.2454 173.716 li
94.2454 178.12 li
93.4986 178.12 li
f
95.3825 178.12 mo
95.3825 173.716 li
96.0529 173.716 li
96.0529 174.344 li
96.3753 173.868 96.8421 173.622 97.4531 173.622 cv
97.7161 173.622 97.9622 173.673 98.1829 173.767 cv
98.4035 173.86 98.5732 173.987 98.6835 174.14 cv
98.7938 174.293 98.8702 174.479 98.9126 174.691 cv
98.9381 174.827 98.9551 175.073 98.9551 175.413 cv
98.9551 178.12 li
98.2083 178.12 li
98.2083 175.447 li
98.2083 175.141 98.1744 174.921 98.1235 174.768 cv
98.064 174.615 97.9622 174.496 97.818 174.403 cv
97.6652 174.318 97.4955 174.267 97.3003 174.267 cv
96.9778 174.267 96.6978 174.369 96.4687 174.573 cv
96.2396 174.776 96.1292 175.158 96.1292 175.718 cv
96.1292 178.12 li
95.3825 178.12 li
f
102.969 177.577 mo
102.689 177.814 102.426 177.984 102.171 178.077 cv
101.917 178.162 101.637 178.213 101.348 178.213 cv
100.864 178.213 100.491 178.103 100.236 177.865 cv
99.9734 177.628 99.8461 177.331 99.8461 176.957 cv
99.8461 176.745 99.8885 176.55 99.9904 176.372 cv
100.092 176.193 100.219 176.049 100.381 175.939 cv
100.533 175.837 100.712 175.752 100.915 175.693 cv
101.06 175.659 101.28 175.625 101.577 175.583 cv
102.18 175.515 102.621 175.43 102.91 175.328 cv
102.91 175.226 102.91 175.167 102.91 175.133 cv
102.91 174.827 102.842 174.615 102.706 174.488 cv
102.511 174.318 102.222 174.233 101.849 174.233 cv
101.492 174.233 101.238 174.301 101.068 174.42 cv
100.898 174.547 100.78 174.768 100.703 175.073 cv
99.9734 174.972 li
100.041 174.666 100.152 174.411 100.304 174.216 cv
100.457 174.03 100.669 173.877 100.958 173.775 cv
101.246 173.673 101.577 173.622 101.959 173.622 cv
102.332 173.622 102.638 173.673 102.876 173.758 cv
103.113 173.843 103.283 173.953 103.393 174.089 cv
103.504 174.225 103.58 174.386 103.622 174.59 cv
103.648 174.725 103.665 174.955 103.665 175.286 cv
103.665 176.278 li
103.665 176.974 103.673 177.407 103.707 177.594 cv
103.741 177.78 103.801 177.95 103.902 178.12 cv
103.122 178.12 li
103.037 177.967 102.986 177.789 102.969 177.577 cv
102.91 175.913 mo
102.638 176.024 102.231 176.117 101.688 176.193 cv
101.382 176.244 101.161 176.295 101.034 176.346 cv
100.907 176.397 100.814 176.482 100.746 176.584 cv
100.678 176.694 100.644 176.813 100.644 176.94 cv
100.644 177.144 100.712 177.305 100.864 177.441 cv
101.017 177.577 101.238 177.636 101.526 177.636 cv
101.815 177.636 102.069 177.577 102.29 177.449 cv
102.511 177.322 102.68 177.152 102.791 176.932 cv
102.867 176.762 102.91 176.516 102.91 176.185 cv
102.91 175.913 li
f
104.802 178.12 mo
104.802 172.044 li
105.549 172.044 li
105.549 178.12 li
104.802 178.12 li
f
109.062 179.8 mo
109.062 173.716 li
109.741 173.716 li
109.741 174.293 li
109.893 174.072 110.08 173.902 110.284 173.792 cv
110.488 173.682 110.725 173.622 111.014 173.622 cv
111.387 173.622 111.718 173.724 112.006 173.911 cv
112.295 174.106 112.507 174.378 112.66 174.734 cv
112.804 175.09 112.881 175.472 112.881 175.888 cv
112.881 176.338 112.796 176.745 112.634 177.102 cv
112.473 177.466 112.236 177.746 111.93 177.933 cv
111.625 178.12 111.302 178.213 110.963 178.213 cv
110.708 178.213 110.488 178.162 110.292 178.06 cv
110.089 177.959 109.927 177.831 109.809 177.662 cv
109.809 179.8 li
109.062 179.8 li
109.741 175.947 mo
109.741 176.516 109.851 176.932 110.08 177.203 cv
110.309 177.475 110.589 177.602 110.912 177.602 cv
111.243 177.602 111.523 177.466 111.76 177.186 cv
111.998 176.906 112.117 176.474 112.117 175.88 cv
112.117 175.319 111.998 174.904 111.769 174.624 cv
111.54 174.352 111.268 174.208 110.946 174.208 cv
110.623 174.208 110.343 174.361 110.106 174.658 cv
109.86 174.955 109.741 175.387 109.741 175.947 cv
f
113.5 175.922 mo
113.5 175.107 113.721 174.505 114.179 174.106 cv
114.552 173.783 115.019 173.622 115.562 173.622 cv
116.165 173.622 116.657 173.826 117.047 174.216 cv
117.429 174.615 117.624 175.158 117.624 175.854 cv
117.624 176.423 117.539 176.872 117.37 177.195 cv
117.2 177.517 116.945 177.772 116.623 177.95 cv
116.3 178.12 115.944 178.213 115.562 178.213 cv
114.943 178.213 114.442 178.018 114.069 177.628 cv
113.687 177.237 113.5 176.669 113.5 175.922 cv
114.272 175.922 mo
114.272 176.482 114.391 176.906 114.637 177.186 cv
114.875 177.466 115.189 177.602 115.562 177.602 cv
115.935 177.602 116.241 177.466 116.487 177.186 cv
116.733 176.906 116.86 176.474 116.86 175.896 cv
116.86 175.353 116.733 174.946 116.487 174.658 cv
116.232 174.378 115.927 174.233 115.562 174.233 cv
115.189 174.233 114.875 174.378 114.637 174.658 cv
114.391 174.938 114.272 175.362 114.272 175.922 cv
f
120.128 177.449 mo
120.238 178.111 li
120.017 178.145 119.831 178.171 119.669 178.171 cv
119.398 178.171 119.186 178.128 119.041 178.052 cv
118.889 177.967 118.787 177.857 118.727 177.712 cv
118.659 177.577 118.634 177.28 118.634 176.83 cv
118.634 174.301 li
118.091 174.301 li
118.091 173.716 li
118.634 173.716 li
118.634 172.629 li
119.372 172.18 li
119.372 173.716 li
120.128 173.716 li
120.128 174.301 li
119.372 174.301 li
119.372 176.872 li
119.372 177.093 119.381 177.229 119.415 177.288 cv
119.542 177.432 li
119.601 177.466 119.686 177.483 119.797 177.483 cv
119.881 177.483 119.992 177.475 120.128 177.449 cv
f
123.87 176.703 mo
124.642 176.796 li
124.515 177.254 124.286 177.602 123.963 177.848 cv
123.632 178.094 123.216 178.213 122.707 178.213 cv
122.062 178.213 121.545 178.018 121.171 177.628 cv
120.798 177.237 120.611 176.677 120.611 175.956 cv
120.611 175.218 120.798 174.641 121.18 174.233 cv
121.553 173.826 122.054 173.622 122.665 173.622 cv
123.25 173.622 123.734 173.826 124.107 174.225 cv
124.481 174.624 124.668 175.184 124.668 175.913 cv
124.659 176.109 li
121.375 176.109 li
121.4 176.601 121.536 176.966 121.782 177.22 cv
122.028 177.475 122.334 177.602 122.707 177.602 cv
122.979 177.602 123.216 177.534 123.412 177.39 cv
123.598 177.254 123.751 177.025 123.87 176.703 cv
121.417 175.498 mo
123.878 175.498 li
123.844 175.124 123.751 174.853 123.598 174.666 cv
123.361 174.378 123.047 174.233 122.673 174.233 cv
122.325 174.233 122.037 174.352 121.808 174.581 cv
121.57 174.81 121.443 175.116 121.417 175.498 cv
f
125.576 178.12 mo
125.576 173.716 li
126.246 173.716 li
126.246 174.344 li
126.568 173.868 127.035 173.622 127.646 173.622 cv
127.909 173.622 128.155 173.673 128.376 173.767 cv
128.597 173.86 128.766 173.987 128.877 174.14 cv
128.987 174.293 129.063 174.479 129.106 174.691 cv
129.131 174.827 129.148 175.073 129.148 175.413 cv
129.148 178.12 li
128.401 178.12 li
128.401 175.447 li
128.401 175.141 128.367 174.921 128.316 174.768 cv
128.257 174.615 128.155 174.496 128.011 174.403 cv
127.858 174.318 127.689 174.267 127.493 174.267 cv
127.171 174.267 126.891 174.369 126.662 174.573 cv
126.433 174.776 126.322 175.158 126.322 175.718 cv
126.322 178.12 li
125.576 178.12 li
f
131.923 177.449 mo
132.033 178.111 li
131.813 178.145 131.626 178.171 131.465 178.171 cv
131.193 178.171 130.981 178.128 130.837 178.052 cv
130.684 177.967 130.582 177.857 130.523 177.712 cv
130.455 177.577 130.43 177.28 130.43 176.83 cv
130.43 174.301 li
129.886 174.301 li
129.886 173.716 li
130.43 173.716 li
130.43 172.629 li
131.168 172.18 li
131.168 173.716 li
131.923 173.716 li
131.923 174.301 li
131.168 174.301 li
131.168 176.872 li
131.168 177.093 131.176 177.229 131.21 177.288 cv
131.338 177.432 li
131.397 177.466 131.482 177.483 131.592 177.483 cv
131.677 177.483 131.787 177.475 131.923 177.449 cv
f
132.653 172.901 mo
132.653 172.044 li
133.4 172.044 li
133.4 172.901 li
132.653 172.901 li
132.653 178.12 mo
132.653 173.716 li
133.4 173.716 li
133.4 178.12 li
132.653 178.12 li
f
137.405 177.577 mo
137.125 177.814 136.862 177.984 136.607 178.077 cv
136.353 178.162 136.073 178.213 135.784 178.213 cv
135.3 178.213 134.927 178.103 134.672 177.865 cv
134.409 177.628 134.282 177.331 134.282 176.957 cv
134.282 176.745 134.325 176.55 134.426 176.372 cv
134.528 176.193 134.656 176.049 134.817 175.939 cv
134.969 175.837 135.148 175.752 135.351 175.693 cv
135.496 175.659 135.716 175.625 136.013 175.583 cv
136.616 175.515 137.057 175.43 137.346 175.328 cv
137.346 175.226 137.346 175.167 137.346 175.133 cv
137.346 174.827 137.278 174.615 137.142 174.488 cv
136.947 174.318 136.658 174.233 136.285 174.233 cv
135.928 174.233 135.674 174.301 135.504 174.42 cv
135.334 174.547 135.216 174.768 135.139 175.073 cv
134.409 174.972 li
134.477 174.666 134.588 174.411 134.74 174.216 cv
134.893 174.03 135.105 173.877 135.394 173.775 cv
135.682 173.673 136.013 173.622 136.395 173.622 cv
136.769 173.622 137.074 173.673 137.312 173.758 cv
137.549 173.843 137.719 173.953 137.829 174.089 cv
137.94 174.225 138.016 174.386 138.058 174.59 cv
138.084 174.725 138.101 174.955 138.101 175.286 cv
138.101 176.278 li
138.101 176.974 138.109 177.407 138.143 177.594 cv
138.177 177.78 138.237 177.95 138.338 178.12 cv
137.558 178.12 li
137.473 177.967 137.422 177.789 137.405 177.577 cv
137.346 175.913 mo
137.074 176.024 136.667 176.117 136.124 176.193 cv
135.818 176.244 135.597 176.295 135.47 176.346 cv
135.343 176.397 135.25 176.482 135.182 176.584 cv
135.114 176.694 135.08 176.813 135.08 176.94 cv
135.08 177.144 135.148 177.305 135.3 177.441 cv
135.453 177.577 135.674 177.636 135.962 177.636 cv
136.251 177.636 136.505 177.577 136.726 177.449 cv
136.947 177.322 137.116 177.152 137.227 176.932 cv
137.303 176.762 137.346 176.516 137.346 176.185 cv
137.346 175.913 li
f
139.238 178.12 mo
139.238 172.044 li
139.985 172.044 li
139.985 178.12 li
139.238 178.12 li
f
146.51 176.703 mo
147.283 176.796 li
147.155 177.254 146.926 177.602 146.604 177.848 cv
146.273 178.094 145.857 178.213 145.348 178.213 cv
144.703 178.213 144.185 178.018 143.812 177.628 cv
143.438 177.237 143.252 176.677 143.252 175.956 cv
143.252 175.218 143.438 174.641 143.82 174.233 cv
144.194 173.826 144.694 173.622 145.305 173.622 cv
145.891 173.622 146.375 173.826 146.748 174.225 cv
147.121 174.624 147.308 175.184 147.308 175.913 cv
147.3 176.109 li
144.016 176.109 li
144.041 176.601 144.177 176.966 144.423 177.22 cv
144.669 177.475 144.974 177.602 145.348 177.602 cv
145.619 177.602 145.857 177.534 146.052 177.39 cv
146.239 177.254 146.392 177.025 146.51 176.703 cv
144.058 175.498 mo
146.519 175.498 li
146.485 175.124 146.392 174.853 146.239 174.666 cv
146.001 174.378 145.687 174.233 145.314 174.233 cv
144.966 174.233 144.677 174.352 144.448 174.581 cv
144.211 174.81 144.083 175.116 144.058 175.498 cv
f
148.216 178.12 mo
148.216 173.716 li
148.886 173.716 li
148.886 174.344 li
149.209 173.868 149.676 173.622 150.287 173.622 cv
150.55 173.622 150.796 173.673 151.016 173.767 cv
151.237 173.86 151.407 173.987 151.517 174.14 cv
151.627 174.293 151.704 174.479 151.746 174.691 cv
151.772 174.827 151.789 175.073 151.789 175.413 cv
151.789 178.12 li
151.042 178.12 li
151.042 175.447 li
151.042 175.141 151.008 174.921 150.957 174.768 cv
150.898 174.615 150.796 174.496 150.652 174.403 cv
150.499 174.318 150.329 174.267 150.134 174.267 cv
149.811 174.267 149.531 174.369 149.302 174.573 cv
149.073 174.776 148.963 175.158 148.963 175.718 cv
148.963 178.12 li
148.216 178.12 li
f
155.947 176.703 mo
156.719 176.796 li
156.592 177.254 156.363 177.602 156.04 177.848 cv
155.709 178.094 155.293 178.213 154.784 178.213 cv
154.139 178.213 153.622 178.018 153.248 177.628 cv
152.875 177.237 152.688 176.677 152.688 175.956 cv
152.688 175.218 152.875 174.641 153.257 174.233 cv
153.63 173.826 154.131 173.622 154.742 173.622 cv
155.327 173.622 155.811 173.826 156.184 174.225 cv
156.558 174.624 156.744 175.184 156.744 175.913 cv
156.736 176.109 li
153.452 176.109 li
153.477 176.601 153.613 176.966 153.859 177.22 cv
154.105 177.475 154.411 177.602 154.784 177.602 cv
155.056 177.602 155.293 177.534 155.489 177.39 cv
155.675 177.254 155.828 177.025 155.947 176.703 cv
153.494 175.498 mo
155.955 175.498 li
155.921 175.124 155.828 174.853 155.675 174.666 cv
155.438 174.378 155.124 174.233 154.75 174.233 cv
154.402 174.233 154.114 174.352 153.885 174.581 cv
153.647 174.81 153.52 175.116 153.494 175.498 cv
f
157.644 178.12 mo
157.644 173.716 li
158.314 173.716 li
158.314 174.386 li
158.484 174.08 158.637 173.877 158.79 173.775 cv
158.934 173.673 159.095 173.622 159.265 173.622 cv
159.519 173.622 159.774 173.707 160.037 173.86 cv
159.774 174.556 li
159.587 174.454 159.409 174.394 159.231 174.394 cv
159.061 174.394 158.917 174.445 158.79 174.539 cv
158.654 174.641 158.56 174.776 158.51 174.946 cv
158.425 175.218 158.391 175.506 158.391 175.82 cv
158.391 178.12 li
157.644 178.12 li
f
160.342 178.476 mo
161.064 178.587 li
161.098 178.807 161.183 178.968 161.318 179.07 cv
161.505 179.206 161.751 179.282 162.074 179.282 cv
162.413 179.282 162.685 179.206 162.871 179.07 cv
163.058 178.934 163.194 178.739 163.262 178.493 cv
163.296 178.34 163.313 178.026 163.313 177.543 cv
162.982 177.933 162.574 178.12 162.091 178.12 cv
161.48 178.12 161.013 177.908 160.682 177.466 cv
160.351 177.034 160.19 176.507 160.19 175.896 cv
160.19 175.481 160.266 175.09 160.419 174.734 cv
160.572 174.378 160.792 174.106 161.081 173.911 cv
161.369 173.724 161.709 173.622 162.099 173.622 cv
162.617 173.622 163.041 173.834 163.38 174.25 cv
163.38 173.716 li
164.068 173.716 li
164.068 177.526 li
164.068 178.205 163.991 178.68 163.856 178.968 cv
163.72 179.257 163.499 179.478 163.194 179.647 cv
162.888 179.809 162.523 179.893 162.082 179.893 cv
161.556 179.893 161.132 179.775 160.809 179.537 cv
160.487 179.299 160.326 178.951 160.342 178.476 cv
160.962 175.837 mo
160.962 176.414 161.072 176.838 161.301 177.102 cv
161.531 177.373 161.819 177.5 162.167 177.5 cv
162.506 177.5 162.786 177.373 163.024 177.11 cv
163.253 176.847 163.372 176.431 163.372 175.863 cv
163.372 175.328 163.253 174.921 163.016 174.649 cv
162.778 174.378 162.489 174.233 162.15 174.233 cv
161.819 174.233 161.539 174.369 161.31 174.641 cv
161.072 174.912 160.962 175.311 160.962 175.837 cv
f
165.162 179.809 mo
165.078 179.104 li
165.239 179.147 165.383 179.172 165.51 179.172 cv
165.672 179.172 165.799 179.138 165.901 179.087 cv
166.003 179.028 166.079 178.951 166.147 178.858 cv
166.198 178.782 166.274 178.595 166.376 178.298 cv
166.444 178.12 li
164.772 173.716 li
165.578 173.716 li
166.495 176.27 li
166.614 176.592 166.715 176.932 166.809 177.288 cv
166.894 176.949 166.995 176.609 167.114 176.287 cv
168.056 173.716 li
168.803 173.716 li
167.131 178.188 li
166.945 178.663 166.809 178.994 166.715 179.181 cv
166.58 179.427 166.427 179.605 166.257 179.724 cv
166.087 179.834 165.884 179.893 165.646 179.893 cv
165.493 179.893 165.332 179.859 165.162 179.809 cv
f
173.224 179.893 mo
172.808 179.376 172.46 178.773 172.18 178.086 cv
171.892 177.39 171.756 176.669 171.756 175.922 cv
171.756 175.269 171.858 174.641 172.07 174.03 cv
172.316 173.334 172.698 172.638 173.224 171.942 cv
173.759 171.942 li
173.419 172.519 173.199 172.935 173.097 173.173 cv
172.927 173.554 172.791 173.953 172.698 174.369 cv
172.579 174.887 172.52 175.404 172.52 175.922 cv
172.52 177.254 172.927 178.57 173.759 179.893 cv
173.224 179.893 li
f
174.624 178.12 mo
174.624 172.044 li
175.371 172.044 li
175.371 175.506 li
177.136 173.716 li
178.104 173.716 li
176.423 175.353 li
178.273 178.12 li
177.357 178.12 li
175.897 175.871 li
175.371 176.372 li
175.371 178.12 li
174.624 178.12 li
f
180.505 178.12 mo
180.505 172.765 li
178.502 172.765 li
178.502 172.044 li
183.322 172.044 li
183.322 172.765 li
181.311 172.765 li
181.311 178.12 li
180.505 178.12 li
f
184.544 179.893 mo
184.01 179.893 li
184.833 178.57 185.249 177.254 185.249 175.922 cv
185.249 175.404 185.189 174.887 185.07 174.378 cv
184.969 173.97 184.841 173.571 184.672 173.181 cv
184.561 172.943 184.341 172.528 184.01 171.942 cv
184.544 171.942 li
185.053 172.638 185.435 173.334 185.69 174.03 cv
185.902 174.641 186.012 175.269 186.012 175.922 cv
186.012 176.669 185.868 177.39 185.58 178.086 cv
185.291 178.773 184.952 179.376 184.544 179.893 cv
f
gsave
27.0427 153.654 mo
246.135 153.654 li
246.135 14.3853 li
27.0427 14.3853 li
27.0427 153.654 li
clp
67.6265 150.353 mo
65.3893 150.297 li
63.1444 150.012 li
61.9499 149.812 li
63.8104 149.666 li
66.5625 149.752 li
69.3201 150.07 li
69.5283 150.099 li
67.6265 150.353 li
201.629 125.305 mo
200.622 125.211 li
198.381 124.921 li
197.358 124.609 li
196.157 123.88 li
193.968 122.311 li
191.782 120.165 li
189.593 117.101 li
187.399 112.876 li
185.202 107.415 li
183.003 100.837 li
180.802 93.4428 li
178.602 85.6637 li
178.601 85.6633 li
176.4 77.9972 li
176.4 77.9943 li
175.186 74.1111 li
177.038 77.8874 li
177.042 77.8952 li
179.807 82.6763 li
179.809 82.6801 li
182.574 87.1062 li
185.335 91.7422 li
188.096 97.0221 li
190.859 103.054 li
193.623 109.549 li
193.623 109.549 li
196.388 115.908 li
196.39 115.914 li
199.155 121.47 li
199.162 121.483 li
201.629 125.305 li
158.831 61.3648 mo
157.908 58.4887 li
155.655 50.8288 li
153.401 43.0803 li
153.4 43.0776 li
151.147 35.9234 li
151.144 35.916 li
148.89 30.0388 li
148.883 30.0223 li
146.629 25.9612 li
146.601 25.9265 li
144.347 23.9676 li
144.255 23.9363 li
143.689 23.9717 li
144.091 23.0931 li
146.832 19.2655 li
149.527 17.7383 li
152.206 18.4039 li
154.934 21.2091 li
157.686 26.0458 li
160.446 32.6477 li
163.209 40.5568 li
165.973 49.1294 li
168.738 57.6437 li
168.739 57.6468 li
169.696 60.3566 li
167.573 57.6893 li
167.524 57.6516 li
165.323 56.6866 li
165.234 56.6813 li
163.033 57.3536 li
162.987 57.3787 li
160.786 59.251 li
160.775 59.2617 li
158.831 61.3648 li
/1 
[/DeviceCMYK] /CSA add_res
.162325 .0855116 .022034 0 cmyk
f
69.5283 150.099 mo
69.3201 150.07 li
66.5625 149.752 li
63.8104 149.666 li
61.9499 149.812 li
60.9373 149.642 li
61.0204 149.627 li
61.0327 149.626 li
63.7973 149.409 li
63.8113 149.408 li
66.5759 149.495 li
66.5867 149.496 li
69.3511 149.815 li
69.3541 149.815 li
70.2182 149.936 li
69.8582 150.055 li
69.5283 150.099 li
201.954 125.336 mo
201.629 125.305 li
199.162 121.483 li
199.155 121.47 li
196.39 115.914 li
196.388 115.908 li
193.623 109.549 li
193.623 109.549 li
190.859 103.054 li
188.096 97.0221 li
185.335 91.7422 li
182.574 87.1062 li
179.809 82.6801 li
179.807 82.6763 li
177.042 77.8952 li
177.038 77.8874 li
175.186 74.1111 li
174.684 72.5023 li
177.267 77.77 li
180.029 82.5459 li
182.792 86.9701 li
182.793 86.9724 li
185.558 91.6137 li
185.561 91.6199 li
188.326 96.9061 li
188.329 96.9122 li
191.093 102.949 li
191.095 102.952 li
193.859 109.448 li
193.859 109.447 li
196.622 115.803 li
199.382 121.349 li
201.954 125.336 li
170.585 62.1034 mo
169.789 60.4785 li
169.774 60.455 li
169.696 60.3566 li
168.739 57.6468 li
168.738 57.6437 li
165.973 49.1294 li
163.209 40.5568 li
160.446 32.6477 li
157.686 26.0458 li
154.934 21.2091 li
152.206 18.4039 li
149.527 17.7383 li
146.832 19.2655 li
144.091 23.0931 li
143.689 23.9717 li
143.398 23.9899 li
143.862 22.9749 li
143.875 22.9535 li
146.639 19.0927 li
146.68 19.0557 li
149.445 17.4892 li
149.539 17.4764 li
152.304 18.1631 li
152.365 18.1983 li
155.13 21.0416 li
155.149 21.0676 li
157.914 25.9253 li
157.921 25.9393 li
160.685 32.5521 li
160.688 32.5592 li
163.452 40.4736 li
163.453 40.4766 li
166.218 49.0502 li
168.982 57.5624 li
170.585 62.1034 li
f
grestore
gsave
27.0427 153.654 mo
246.135 153.654 li
246.135 14.3853 li
27.0427 14.3853 li
27.0427 153.654 li
clp
56.6771 150.493 mo
55.2448 150.184 li
55.241 150.183 li
53.04 149.776 li
53.0317 149.775 li
51.9652 149.649 li
54.1189 149.4 li
56.36 149.369 li
58.6034 149.554 li
60.142 149.783 li
58.2558 150.117 li
58.2484 150.118 li
56.6771 150.493 li
73.0196 150.271 mo
72.1149 150.2 li
70.7925 150.016 li
72.1816 149.554 li
72.2033 149.544 li
74.457 148.296 li
74.4736 148.286 li
76.7274 146.537 li
76.7386 146.527 li
78.9924 144.318 li
78.9997 144.31 li
81.2535 141.701 li
81.2584 141.695 li
83.5122 138.741 li
83.5159 138.735 li
85.7411 135.502 li
83.722 139.005 li
81.5256 142.387 li
79.332 145.23 li
77.1422 147.495 li
74.9563 149.201 li
73.0196 150.271 li
217.109 134.555 mo
215.921 133.887 li
215.911 133.882 li
213.147 132.612 li
213.14 132.609 li
210.378 131.527 li
207.625 130.321 li
204.882 128.515 li
202.136 125.618 li
202.132 125.611 li
202.845 125.678 li
205.085 126.058 li
207.323 126.747 li
209.564 127.77 li
211.81 129.062 li
214.06 130.51 li
216.313 131.998 li
216.315 131.999 li
218.569 133.433 li
218.573 133.435 li
220.088 134.331 li
218.089 134.516 li
217.109 134.555 li
94.3586 119.659 mo
94.7951 118.742 li
94.7962 118.74 li
97.05 113.753 li
97.0503 113.752 li
99.3041 108.693 li
99.3036 108.694 li
101.557 103.761 li
103.809 99.1075 li
106.061 94.7867 li
108.314 90.7433 li
110.567 86.8435 li
112.821 82.9276 li
112.822 82.9259 li
115.076 78.864 li
115.077 78.8616 li
117.331 74.5804 li
117.332 74.5779 li
119.586 70.058 li
119.587 70.0558 li
121.841 65.3089 li
121.842 65.307 li
123.427 61.8228 li
123.328 62.1378 li
121.128 68.8691 li
118.928 75.0581 li
116.729 80.665 li
114.529 85.7553 li
112.33 90.4167 li
110.131 94.7122 li
107.932 98.6707 li
105.733 102.314 li
103.534 105.693 li
101.334 108.913 li
99.1332 112.113 li
99.1319 112.115 li
96.9309 115.443 li
96.9287 115.447 li
94.7276 119.015 li
94.7254 119.018 li
94.3586 119.659 li
139.174 34.5104 mo
138.97 34.1573 li
138.933 34.1169 li
136.732 32.5544 li
136.61 32.5399 li
136.069 32.7562 li
137.613 29.7064 li
139.853 26.2827 li
142.061 24.3312 li
143.277 24.2551 li
141.098 29.0243 li
141.093 29.0352 li
139.174 34.5104 li
.169833 .00601205 .17142 0 cmyk
f
66.2198 151.808 mo
64.0308 151.749 li
61.839 151.506 li
59.6441 151.124 li
57.4453 150.659 li
57.4459 150.659 li
57.2584 150.619 li
58.3044 150.369 li
60.9384 149.903 li
63.1045 150.266 li
63.1096 150.267 li
65.3634 150.553 li
65.3764 150.554 li
67.6302 150.61 li
67.6504 150.609 li
69.9042 150.309 li
69.9278 150.303 li
70.242 150.199 li
72.0832 150.455 li
72.0908 150.456 li
72.5405 150.491 li
70.5903 151.195 li
68.4063 151.64 li
66.2198 151.808 li
215.899 134.604 mo
213.718 134.403 li
211.539 133.792 li
209.356 132.742 li
207.165 131.33 li
204.967 129.714 li
204.967 129.715 li
202.766 128.084 li
202.762 128.081 li
200.561 126.576 li
200.556 126.572 li
198.355 125.214 li
198.354 125.214 li
198.248 125.149 li
198.316 125.17 li
198.337 125.175 li
200.591 125.466 li
200.596 125.467 li
201.806 125.58 li
201.927 125.767 li
201.941 125.786 li
204.706 128.702 li
204.729 128.721 li
207.493 130.542 li
207.512 130.553 li
210.277 131.763 li
210.281 131.765 li
213.043 132.847 li
215.799 134.114 li
216.619 134.575 li
215.899 134.604 li
154.269 64.4839 mo
152.148 63.5556 li
149.976 60.5675 li
147.782 55.7213 li
145.583 49.6934 li
145.583 49.6934 li
143.382 43.438 li
143.38 43.4326 li
141.179 37.9714 li
141.171 37.9549 li
139.344 34.8034 li
141.334 29.1259 li
143.568 24.2369 li
144.218 24.1963 li
146.415 26.1058 li
148.653 30.1394 li
150.902 36.0042 li
153.155 43.1538 li
155.408 50.901 li
157.662 58.5628 li
157.663 58.5657 li
158.63 61.5817 li
158.577 61.6391 li
156.398 63.6579 li
154.269 64.4839 li
.310002 .0839857 .207431 0 cmyk
f
57.2584 150.619 mo
56.6771 150.493 li
58.2484 150.118 li
58.2558 150.117 li
60.142 149.783 li
60.8516 149.888 li
60.9384 149.903 li
58.3044 150.369 li
57.2584 150.619 li
72.5405 150.491 mo
72.0908 150.456 li
72.0832 150.455 li
70.242 150.199 li
70.7925 150.016 li
72.1149 150.2 li
73.0196 150.271 li
72.773 150.408 li
72.5405 150.491 li
216.619 134.575 mo
215.799 134.114 li
213.043 132.847 li
210.281 131.765 li
210.277 131.763 li
207.512 130.553 li
207.493 130.542 li
204.729 128.721 li
204.706 128.702 li
201.941 125.786 li
201.927 125.767 li
201.806 125.58 li
202.132 125.611 li
202.136 125.618 li
204.882 128.515 li
207.625 130.321 li
210.378 131.527 li
213.14 132.609 li
213.147 132.612 li
215.911 133.882 li
215.921 133.887 li
217.109 134.555 li
216.619 134.575 li
139.344 34.8034 mo
139.174 34.5104 li
141.093 29.0352 li
141.098 29.0243 li
143.277 24.2551 li
143.568 24.2369 li
141.334 29.1259 li
139.344 34.8034 li
f
70.7925 150.016 mo
70.2182 149.936 li
72.0891 149.314 li
74.3238 148.076 li
76.5639 146.339 li
78.8085 144.138 li
81.0563 141.536 li
83.3058 138.587 li
85.5562 135.317 li
87.7086 131.87 li
85.9204 135.191 li
85.7411 135.502 li
83.5159 138.735 li
83.5122 138.741 li
81.2584 141.695 li
81.2535 141.701 li
78.9997 144.31 li
78.9924 144.318 li
76.7386 146.527 li
76.7274 146.537 li
74.4736 148.286 li
74.457 148.296 li
72.2033 149.544 li
72.1816 149.554 li
70.7925 150.016 li
60.142 149.783 mo
58.6034 149.554 li
56.36 149.369 li
54.1189 149.4 li
51.9652 149.649 li
51.1259 149.549 li
51.8312 149.406 li
51.842 149.404 li
54.0958 149.143 li
54.1089 149.143 li
56.3626 149.112 li
56.3749 149.113 li
58.6288 149.298 li
58.6371 149.299 li
60.891 149.634 li
60.8932 149.634 li
60.9373 149.642 li
60.142 149.783 li
220.088 134.331 mo
218.573 133.435 li
218.569 133.433 li
216.315 131.999 li
216.313 131.998 li
214.06 130.51 li
211.81 129.062 li
209.564 127.77 li
207.323 126.747 li
205.085 126.058 li
202.845 125.678 li
202.132 125.611 li
201.954 125.336 li
202.873 125.422 li
202.883 125.424 li
205.137 125.806 li
205.153 125.81 li
207.407 126.504 li
207.422 126.51 li
209.676 127.538 li
209.687 127.544 li
211.941 128.84 li
211.946 128.844 li
214.2 130.295 li
214.201 130.296 li
216.454 131.783 li
218.705 133.215 li
220.536 134.298 li
220.29 134.312 li
220.286 134.313 li
220.088 134.331 li
92.6718 122.605 mo
94.5624 118.632 li
96.8156 113.647 li
96.8154 113.648 li
99.0692 108.589 li
99.0696 108.587 li
101.323 103.653 li
101.325 103.651 li
103.578 98.9937 li
103.58 98.9903 li
105.834 94.666 li
105.836 94.6628 li
108.09 90.6176 li
108.09 90.6158 li
110.344 86.715 li
112.598 82.8 li
114.85 78.7403 li
117.102 74.4621 li
119.355 69.9445 li
121.608 65.199 li
123.861 60.2475 li
124.057 59.8001 li
123.427 61.8228 li
121.842 65.307 li
121.841 65.3089 li
119.587 70.0558 li
119.586 70.058 li
117.332 74.5779 li
117.331 74.5804 li
115.077 78.8616 li
115.076 78.864 li
112.822 82.9259 li
112.821 82.9276 li
110.567 86.8435 li
108.314 90.7433 li
106.061 94.7867 li
103.809 99.1075 li
101.557 103.761 li
99.3036 108.694 li
99.3041 108.693 li
97.0503 113.752 li
97.05 113.753 li
94.7962 118.74 li
94.7951 118.742 li
94.3586 119.659 li
92.6718 122.605 li
135.707 32.9008 mo
137.386 29.5839 li
137.394 29.5715 li
139.647 26.1274 li
139.67 26.1015 li
141.924 24.1093 li
142.001 24.0772 li
143.398 23.9899 li
143.277 24.2551 li
142.061 24.3312 li
139.853 26.2827 li
137.613 29.7064 li
136.069 32.7562 li
135.707 32.9008 li
.169833 .00601205 .17142 0 cmyk
f
67.6302 150.61 mo
65.3764 150.554 li
65.3634 150.553 li
63.1096 150.267 li
63.1045 150.266 li
60.9384 149.903 li
61.059 149.881 li
61.9499 149.812 li
63.1444 150.012 li
65.3893 150.297 li
67.6265 150.353 li
69.5283 150.099 li
70.242 150.199 li
69.9278 150.303 li
69.9042 150.309 li
67.6504 150.609 li
67.6302 150.61 li
201.806 125.58 mo
200.596 125.467 li
200.591 125.466 li
198.337 125.175 li
198.316 125.17 li
198.248 125.149 li
197.358 124.609 li
198.381 124.921 li
200.622 125.211 li
201.629 125.305 li
201.806 125.58 li
158.63 61.5817 mo
157.663 58.5657 li
157.662 58.5628 li
155.408 50.901 li
153.155 43.1538 li
150.902 36.0042 li
148.653 30.1394 li
146.415 26.1058 li
144.218 24.1963 li
143.568 24.2369 li
143.689 23.9717 li
144.255 23.9363 li
144.347 23.9676 li
146.601 25.9265 li
146.629 25.9612 li
148.883 30.0223 li
148.89 30.0388 li
151.144 35.916 li
151.147 35.9234 li
153.4 43.0776 li
153.401 43.0803 li
155.655 50.8288 li
157.908 58.4887 li
158.831 61.3648 li
158.63 61.5817 li
.310002 .0839857 .207431 0 cmyk
f
70.242 150.199 mo
69.5283 150.099 li
69.8582 150.055 li
70.2182 149.936 li
70.7925 150.016 li
70.242 150.199 li
60.9384 149.903 mo
60.8516 149.888 li
60.142 149.783 li
60.9373 149.642 li
61.9499 149.812 li
61.059 149.881 li
60.9384 149.903 li
202.132 125.611 mo
201.806 125.58 li
201.629 125.305 li
201.954 125.336 li
202.132 125.611 li
143.277 24.2551 mo
143.398 23.9899 li
143.689 23.9717 li
143.568 24.2369 li
143.277 24.2551 li
f
grestore
gsave
27.0427 153.654 mo
246.135 153.654 li
246.135 14.3853 li
27.0427 14.3853 li
27.0427 153.654 li
clp
28.8579 153.441 mo
31.0191 153.216 li
31.0248 153.215 li
33.2259 152.887 li
33.2318 152.886 li
35.4329 152.452 li
35.438 152.45 li
37.6391 151.921 li
37.6423 151.92 li
39.8433 151.332 li
42.0423 150.745 li
44.2373 150.234 li
46.4286 149.872 li
48.6174 149.711 li
50.1296 149.752 li
49.5774 149.864 li
49.5705 149.866 li
47.3167 150.456 li
47.314 150.456 li
45.0612 151.096 li
42.8097 151.712 li
40.5608 152.247 li
38.313 152.675 li
36.065 152.992 li
33.8164 153.209 li
31.5661 153.348 li
29.3149 153.432 li
28.8579 153.441 li
246.135 147.352 mo
245.747 147.136 li
243.495 145.822 li
243.494 145.822 li
241.24 144.517 li
241.238 144.516 li
238.984 143.27 li
238.981 143.268 li
236.727 142.104 li
236.724 142.103 li
234.471 141.014 li
234.468 141.013 li
232.215 139.978 li
232.213 139.978 li
229.96 138.966 li
227.707 137.946 li
225.455 136.889 li
223.205 135.764 li
220.955 134.545 li
220.931 134.531 li
222.501 134.435 li
224.687 134.513 li
226.872 134.881 li
229.058 135.55 li
231.248 136.49 li
233.442 137.643 li
235.638 138.951 li
237.837 140.358 li
240.037 141.807 li
240.038 141.807 li
242.239 143.233 li
242.243 143.235 li
244.444 144.555 li
244.452 144.559 li
246.135 145.415 li
246.135 147.352 li
173.044 68.563 mo
171.745 65.3869 li
171.324 64.1947 li
171.756 65.0771 li
173.044 68.563 li
124.988 57.6745 mo
125.775 55.1502 li
127.975 48.1626 li
130.174 41.8251 li
132.368 36.7824 li
134.54 33.6444 li
135.531 33.2481 li
135.133 34.0354 li
135.13 34.0411 li
132.876 39.0932 li
132.875 39.0956 li
130.621 44.4261 li
128.367 49.8087 li
128.368 49.808 li
126.114 55.1058 li
124.988 57.6745 li
.0393378 .186892 .0989395 0 cmyk
f
196.362 124.305 mo
196.154 124.241 li
193.927 122.866 li
191.692 120.577 li
189.772 117.794 li
191.58 120.323 li
191.594 120.34 li
193.795 122.501 li
193.81 122.514 li
196.012 124.091 li
196.02 124.097 li
196.362 124.305 li
188.97 116.459 mo
187.199 113.255 li
184.946 108.682 li
184.947 108.683 li
182.693 104 li
182.692 103.997 li
180.438 99.566 li
180.435 99.5605 li
178.181 95.6207 li
178.177 95.6132 li
175.923 92.232 li
175.918 92.2248 li
173.664 89.2974 li
173.661 89.2936 li
171.408 86.5831 li
169.157 83.7759 li
166.91 80.5329 li
164.662 76.5401 li
162.412 71.5637 li
160.161 65.512 li
158.921 61.646 li
160.958 59.4419 li
163.133 57.5918 li
165.263 56.9412 li
167.392 57.8743 li
169.564 60.6042 li
170.348 62.203 li
171.503 65.4755 li
171.506 65.4813 li
174.27 72.2422 li
174.274 72.2501 li
174.444 72.5976 li
176.154 78.0697 li
178.354 85.7341 li
178.354 85.7337 li
180.555 93.5141 li
180.556 93.5157 li
182.757 100.912 li
182.758 100.917 li
184.959 107.5 li
184.962 107.507 li
187.163 112.978 li
187.168 112.989 li
188.97 116.459 li
.188602 .27805 .125338 0 cmyk
f
174.444 72.5976 mo
174.274 72.2501 li
174.27 72.2422 li
171.506 65.4813 li
171.503 65.4755 li
170.348 62.203 li
171.324 64.1947 li
171.745 65.3869 li
173.044 68.563 li
173.954 71.0281 li
174.444 72.5976 li
f
33.4138 153.492 mo
33.8344 153.466 li
33.8388 153.465 li
36.0925 153.248 li
36.0981 153.247 li
38.3519 152.93 li
38.358 152.929 li
40.6119 152.499 li
40.6176 152.498 li
42.8714 151.961 li
42.8755 151.96 li
45.1293 151.344 li
45.1305 151.344 li
47.3831 150.704 li
49.6321 150.116 li
51.1368 149.809 li
52.9973 150.03 li
55.1925 150.435 li
56.0989 150.631 li
55.4838 150.778 li
55.482 150.779 li
52.719 151.482 li
49.9585 152.12 li
47.1999 152.629 li
44.4415 152.995 li
41.6822 153.233 li
38.9212 153.375 li
36.1596 153.453 li
33.4138 153.492 li
74.8659 150.417 mo
73.4848 150.308 li
75.0895 149.421 li
75.1064 149.41 li
77.3075 147.692 li
77.3208 147.68 li
79.5219 145.404 li
79.5313 145.393 li
81.7324 142.539 li
81.7384 142.531 li
83.9395 139.142 li
83.943 139.136 li
86.1441 135.318 li
86.1459 135.314 li
87.931 131.999 li
88.0266 131.846 li
88.0295 131.842 li
90.2833 127.861 li
90.2857 127.857 li
92.5395 123.482 li
92.5413 123.478 li
92.9001 122.724 li
94.9476 119.148 li
97.1465 115.583 li
99.3455 112.258 li
101.546 109.058 li
103.747 105.838 li
103.749 105.835 li
105.95 102.452 li
105.952 102.449 li
108.153 98.8016 li
108.156 98.7976 li
110.357 94.8353 li
110.359 94.8315 li
112.56 90.532 li
112.562 90.5283 li
114.763 85.8629 li
114.765 85.8591 li
116.966 80.7651 li
116.967 80.7611 li
119.169 75.1499 li
119.17 75.1459 li
121.371 68.9538 li
121.372 68.9507 li
123.573 62.2167 li
123.574 62.215 li
124.298 59.8899 li
126.35 55.2081 li
126.351 55.2068 li
128.604 49.9086 li
128.605 49.9079 li
130.858 44.5257 li
133.112 39.1969 li
135.363 34.1489 li
135.893 33.1035 li
136.64 32.8047 li
138.761 34.3104 li
139.062 34.83 li
138.329 36.9232 li
138.327 36.9284 li
135.563 46.0399 li
135.562 46.0414 li
132.797 55.5816 li
132.798 55.5816 li
130.034 64.7332 li
127.271 72.8446 li
124.511 79.5722 li
121.751 84.957 li
118.991 89.3839 li
116.228 93.4236 li
116.226 93.4253 li
113.462 97.6106 li
113.459 97.6156 li
110.694 102.257 li
110.691 102.262 li
107.927 107.388 li
107.925 107.391 li
105.161 112.819 li
105.161 112.819 li
102.396 118.304 li
102.397 118.303 li
99.6326 123.658 li
96.8693 128.783 li
94.1069 133.618 li
91.3453 138.079 li
88.5862 142.027 li
85.8311 145.3 li
83.0827 147.768 li
80.3425 149.387 li
77.6065 150.219 li
74.8659 150.417 li
245.529 147.306 mo
243.535 146.788 li
243.533 146.788 li
240.77 146.116 li
240.77 146.116 li
238.008 145.41 li
235.25 144.58 li
232.494 143.55 li
229.738 142.276 li
226.981 140.755 li
224.221 139.033 li
221.457 137.212 li
221.456 137.211 li
218.691 135.446 li
218.685 135.442 li
217.535 134.796 li
218.102 134.773 li
218.109 134.772 li
220.308 134.569 li
220.473 134.559 li
220.826 134.768 li
220.831 134.77 li
223.084 135.992 li
223.088 135.994 li
225.342 137.119 li
225.345 137.121 li
227.599 138.179 li
227.6 138.18 li
229.854 139.2 li
232.108 140.212 li
234.36 141.247 li
236.611 142.334 li
238.862 143.496 li
241.113 144.74 li
243.365 146.045 li
243.365 146.045 li
245.529 147.306 li
.189425 .216098 .2598 0 cmyk
f
246.135 153.525 mo
243.503 153.525 li
240.738 153.525 li
237.974 153.525 li
235.209 153.525 li
232.445 153.525 li
229.68 153.525 li
226.916 153.525 li
224.151 153.525 li
221.387 153.525 li
218.622 153.525 li
215.857 153.525 li
213.093 153.525 li
210.328 153.525 li
207.564 153.525 li
204.799 153.525 li
202.035 153.525 li
199.27 153.525 li
196.506 153.525 li
193.741 153.525 li
190.977 153.525 li
188.212 153.525 li
185.447 153.525 li
182.683 153.525 li
179.918 153.525 li
177.154 153.525 li
174.389 153.525 li
171.625 153.525 li
168.86 153.525 li
166.096 153.525 li
163.331 153.525 li
160.566 153.525 li
157.802 153.525 li
155.037 153.525 li
152.273 153.525 li
149.508 153.525 li
146.744 153.525 li
143.979 153.525 li
141.215 153.525 li
138.45 153.525 li
135.686 153.525 li
132.921 153.525 li
130.156 153.525 li
127.392 153.525 li
124.627 153.525 li
121.863 153.525 li
119.098 153.525 li
116.334 153.525 li
113.569 153.525 li
110.805 153.525 li
108.04 153.525 li
105.276 153.525 li
102.511 153.525 li
99.7465 153.525 li
96.9819 153.525 li
94.2174 153.525 li
91.4528 153.525 li
88.6883 153.525 li
85.9237 153.525 li
83.1592 153.525 li
80.3947 153.525 li
77.63 153.525 li
74.8655 153.525 li
72.1009 153.525 li
69.3364 153.525 li
66.5718 153.525 li
63.8073 153.525 li
61.0428 153.525 li
58.2782 153.525 li
55.5137 153.525 li
52.7491 153.525 li
49.9846 153.525 li
47.22 153.525 li
44.4555 153.525 li
41.6909 153.525 li
41.0107 153.525 li
41.6976 153.49 li
41.702 153.489 li
44.4666 153.251 li
44.4724 153.25 li
47.237 152.884 li
47.2434 152.883 li
50.008 152.372 li
50.0135 152.371 li
52.7781 151.732 li
52.7808 151.731 li
55.5444 151.028 li
56.6801 150.757 li
57.3915 150.911 li
57.3921 150.911 li
59.5932 151.376 li
59.5978 151.377 li
61.7989 151.76 li
61.8067 151.761 li
64.0078 152.005 li
64.0184 152.006 li
66.2195 152.065 li
66.2329 152.065 li
68.4339 151.896 li
68.4498 151.893 li
70.6509 151.445 li
70.6688 151.44 li
72.8699 150.646 li
72.8885 150.638 li
73.0764 150.534 li
74.8553 150.674 li
74.8748 150.674 li
77.6394 150.474 li
77.6675 150.469 li
80.432 149.629 li
80.46 149.616 li
83.2246 147.983 li
83.2451 147.968 li
86.0096 145.485 li
86.0221 145.472 li
88.7866 142.188 li
88.7936 142.179 li
91.5582 138.223 li
91.5621 138.217 li
94.3267 133.751 li
94.329 133.747 li
97.0936 128.909 li
97.095 128.906 li
99.8596 123.779 li
99.8607 123.777 li
102.625 118.421 li
102.626 118.42 li
105.39 112.935 li
105.39 112.935 li
108.154 107.509 li
110.917 102.387 li
113.678 97.7498 li
116.44 93.5682 li
119.204 89.5267 li
119.207 89.5222 li
121.972 85.0885 li
121.977 85.079 li
124.742 79.6848 li
124.746 79.675 li
127.511 72.9386 li
127.514 72.9312 li
130.278 64.8139 li
130.28 64.8096 li
133.044 55.6545 li
133.045 55.6531 li
135.809 46.1135 li
138.572 37.0058 li
139.232 35.123 li
140.944 38.0759 li
143.14 43.5261 li
145.34 49.7787 li
145.341 49.7801 li
147.542 55.8138 li
147.546 55.8227 li
149.747 60.6855 li
149.76 60.708 li
151.961 63.7351 li
152.013 63.7773 li
154.214 64.7407 li
154.313 64.7428 li
156.514 63.8888 li
156.554 63.8632 li
158.719 61.8583 li
159.917 65.5932 li
159.919 65.5988 li
162.172 71.6577 li
162.176 71.6659 li
164.43 76.6512 li
164.435 76.6614 li
166.689 80.6644 li
166.695 80.6746 li
168.949 83.926 li
168.954 83.9332 li
171.208 86.7449 li
171.209 86.7466 li
173.461 89.456 li
175.711 92.3785 li
177.96 95.7522 li
180.21 99.6857 li
182.462 104.113 li
184.715 108.795 li
184.716 108.796 li
186.969 113.371 li
186.972 113.376 li
189.226 117.454 li
189.233 117.464 li
191.487 120.732 li
191.5 120.749 li
193.754 123.057 li
193.779 123.076 li
196.032 124.469 li
196.062 124.482 li
197.252 124.845 li
198.221 125.433 li
198.22 125.433 li
200.418 126.79 li
202.615 128.292 li
204.814 129.921 li
204.815 129.922 li
207.016 131.539 li
207.022 131.544 li
209.223 132.962 li
209.237 132.97 li
211.438 134.028 li
211.459 134.036 li
213.66 134.654 li
213.683 134.658 li
215.884 134.861 li
215.901 134.862 li
217.046 134.815 li
218.556 135.665 li
221.316 137.428 li
224.08 139.248 li
224.083 139.25 li
226.848 140.975 li
226.854 140.979 li
229.618 142.504 li
229.626 142.508 li
232.391 143.785 li
232.4 143.789 li
235.164 144.822 li
235.172 144.825 li
237.937 145.657 li
237.942 145.659 li
240.707 146.366 li
240.708 146.366 li
243.471 147.037 li
246.135 147.73 li
246.135 153.525 li
.303197 .282017 .288945 0 cmyk
f
246.135 153.525 mo
245.684 153.525 li
243.43 153.525 li
241.176 153.525 li
238.922 153.525 li
236.668 153.525 li
234.415 153.525 li
232.161 153.525 li
229.907 153.525 li
227.653 153.525 li
225.399 153.525 li
223.146 153.525 li
220.892 153.525 li
218.638 153.525 li
216.384 153.525 li
214.13 153.525 li
211.877 153.525 li
209.623 153.525 li
207.369 153.525 li
205.115 153.525 li
202.861 153.525 li
200.608 153.525 li
198.354 153.525 li
196.1 153.525 li
193.846 153.525 li
191.592 153.525 li
189.339 153.525 li
187.085 153.525 li
184.831 153.525 li
182.577 153.525 li
180.323 153.525 li
178.07 153.525 li
175.816 153.525 li
173.562 153.525 li
171.308 153.525 li
169.054 153.525 li
166.801 153.525 li
164.547 153.525 li
162.293 153.525 li
160.039 153.525 li
157.785 153.525 li
155.532 153.525 li
153.278 153.525 li
151.024 153.525 li
148.77 153.525 li
146.516 153.525 li
144.263 153.525 li
142.009 153.525 li
139.755 153.525 li
137.501 153.525 li
135.247 153.525 li
132.994 153.525 li
130.74 153.525 li
128.486 153.525 li
126.232 153.525 li
123.978 153.525 li
121.725 153.525 li
119.471 153.525 li
117.217 153.525 li
114.963 153.525 li
112.709 153.525 li
110.456 153.525 li
108.202 153.525 li
105.948 153.525 li
103.694 153.525 li
101.44 153.525 li
99.1866 153.525 li
96.9328 153.525 li
94.679 153.525 li
92.4252 153.525 li
90.1714 153.525 li
87.9176 153.525 li
85.6638 153.525 li
83.41 153.525 li
81.1562 153.525 li
78.9024 153.525 li
76.6486 153.525 li
74.3948 153.525 li
72.141 153.525 li
69.8872 153.525 li
67.6334 153.525 li
65.3796 153.525 li
63.1258 153.525 li
60.872 153.525 li
58.6182 153.525 li
56.3644 153.525 li
54.1106 153.525 li
51.8568 153.525 li
49.603 153.525 li
47.3492 153.525 li
45.0954 153.525 li
42.8416 153.525 li
40.5878 153.525 li
38.334 153.525 li
36.0802 153.525 li
33.8264 153.525 li
32.8761 153.525 li
33.4138 153.492 li
36.1596 153.453 li
38.9212 153.375 li
41.6822 153.233 li
44.4415 152.995 li
47.1999 152.629 li
49.9585 152.12 li
52.719 151.482 li
55.482 150.779 li
55.4838 150.778 li
56.0989 150.631 li
56.6801 150.757 li
55.5444 151.028 li
52.7808 151.731 li
52.7781 151.732 li
50.0135 152.371 li
50.008 152.372 li
47.2434 152.883 li
47.237 152.884 li
44.4724 153.25 li
44.4666 153.251 li
41.702 153.489 li
41.6976 153.49 li
41.0107 153.525 li
41.6909 153.525 li
44.4555 153.525 li
47.22 153.525 li
49.9846 153.525 li
52.7491 153.525 li
55.5137 153.525 li
58.2782 153.525 li
61.0428 153.525 li
63.8073 153.525 li
66.5718 153.525 li
69.3364 153.525 li
72.1009 153.525 li
74.8655 153.525 li
77.63 153.525 li
80.3947 153.525 li
83.1592 153.525 li
85.9237 153.525 li
88.6883 153.525 li
91.4528 153.525 li
94.2174 153.525 li
96.9819 153.525 li
99.7465 153.525 li
102.511 153.525 li
105.276 153.525 li
108.04 153.525 li
110.805 153.525 li
113.569 153.525 li
116.334 153.525 li
119.098 153.525 li
121.863 153.525 li
124.627 153.525 li
127.392 153.525 li
130.156 153.525 li
132.921 153.525 li
135.686 153.525 li
138.45 153.525 li
141.215 153.525 li
143.979 153.525 li
146.744 153.525 li
149.508 153.525 li
152.273 153.525 li
155.037 153.525 li
157.802 153.525 li
160.566 153.525 li
163.331 153.525 li
166.096 153.525 li
168.86 153.525 li
171.625 153.525 li
174.389 153.525 li
177.154 153.525 li
179.918 153.525 li
182.683 153.525 li
185.447 153.525 li
188.212 153.525 li
190.977 153.525 li
193.741 153.525 li
196.506 153.525 li
199.27 153.525 li
202.035 153.525 li
204.799 153.525 li
207.564 153.525 li
210.328 153.525 li
213.093 153.525 li
215.857 153.525 li
218.622 153.525 li
221.387 153.525 li
224.151 153.525 li
226.916 153.525 li
229.68 153.525 li
232.445 153.525 li
235.209 153.525 li
237.974 153.525 li
240.738 153.525 li
243.503 153.525 li
246.135 153.525 li
74.8748 150.674 mo
74.8553 150.674 li
73.0764 150.534 li
73.4848 150.308 li
74.8659 150.417 li
77.6065 150.219 li
80.3425 149.387 li
83.0827 147.768 li
85.8311 145.3 li
88.5862 142.027 li
91.3453 138.079 li
94.1069 133.618 li
96.8693 128.783 li
99.6326 123.658 li
102.397 118.303 li
102.396 118.304 li
105.161 112.819 li
105.161 112.819 li
107.925 107.391 li
107.927 107.388 li
110.691 102.262 li
110.694 102.257 li
113.459 97.6156 li
113.462 97.6106 li
116.226 93.4253 li
116.228 93.4236 li
118.991 89.3839 li
121.751 84.957 li
124.511 79.5722 li
127.271 72.8446 li
130.034 64.7332 li
132.798 55.5816 li
132.797 55.5816 li
135.562 46.0414 li
135.563 46.0399 li
138.327 36.9284 li
138.329 36.9232 li
139.062 34.83 li
139.232 35.123 li
138.572 37.0058 li
135.809 46.1135 li
133.045 55.6531 li
133.044 55.6545 li
130.28 64.8096 li
130.278 64.8139 li
127.514 72.9312 li
127.511 72.9386 li
124.746 79.675 li
124.742 79.6848 li
121.977 85.079 li
121.972 85.0885 li
119.207 89.5222 li
119.204 89.5267 li
116.44 93.5682 li
113.678 97.7498 li
110.917 102.387 li
108.154 107.509 li
105.39 112.935 li
105.39 112.935 li
102.626 118.42 li
102.625 118.421 li
99.8607 123.777 li
99.8596 123.779 li
97.095 128.906 li
97.0936 128.909 li
94.329 133.747 li
94.3267 133.751 li
91.5621 138.217 li
91.5582 138.223 li
88.7936 142.179 li
88.7866 142.188 li
86.0221 145.472 li
86.0096 145.485 li
83.2451 147.968 li
83.2246 147.983 li
80.46 149.616 li
80.432 149.629 li
77.6675 150.469 li
77.6394 150.474 li
74.8748 150.674 li
246.135 147.73 mo
243.471 147.037 li
240.708 146.366 li
240.707 146.366 li
237.942 145.659 li
237.937 145.657 li
235.172 144.825 li
235.164 144.822 li
232.4 143.789 li
232.391 143.785 li
229.626 142.508 li
229.618 142.504 li
226.854 140.979 li
226.848 140.975 li
224.083 139.25 li
224.08 139.248 li
221.316 137.428 li
218.556 135.665 li
217.046 134.815 li
217.535 134.796 li
218.685 135.442 li
218.691 135.446 li
221.456 137.211 li
221.457 137.212 li
224.221 139.033 li
226.981 140.755 li
229.738 142.276 li
232.494 143.55 li
235.25 144.58 li
238.008 145.41 li
240.77 146.116 li
240.77 146.116 li
243.533 146.788 li
243.535 146.788 li
245.529 147.306 li
245.619 147.359 li
245.621 147.36 li
246.135 147.646 li
246.135 147.73 li
f
27.7305 153.519 mo
28.8134 153.446 li
28.8181 153.445 li
28.8579 153.441 li
29.3149 153.432 li
31.5661 153.348 li
33.8164 153.209 li
36.065 152.992 li
38.313 152.675 li
40.5608 152.247 li
42.8097 151.712 li
45.0612 151.096 li
47.314 150.456 li
47.3167 150.456 li
49.5705 149.866 li
49.5774 149.864 li
50.1296 149.752 li
50.8061 149.77 li
51.1368 149.809 li
49.6321 150.116 li
47.3831 150.704 li
45.1305 151.344 li
45.1293 151.344 li
42.8755 151.96 li
42.8714 151.961 li
40.6176 152.498 li
40.6119 152.499 li
38.358 152.929 li
38.3519 152.93 li
36.0981 153.247 li
36.0925 153.248 li
33.8388 153.465 li
33.8344 153.466 li
33.4138 153.492 li
33.3955 153.492 li
33.3964 153.492 li
30.6319 153.511 li
30.6324 153.511 li
27.8679 153.519 li
27.868 153.519 li
27.7305 153.519 li
246.135 147.464 mo
245.529 147.306 li
243.365 146.045 li
243.365 146.045 li
241.113 144.74 li
238.862 143.496 li
236.611 142.334 li
234.36 141.247 li
232.108 140.212 li
229.854 139.2 li
227.6 138.18 li
227.599 138.179 li
225.345 137.121 li
225.342 137.119 li
223.088 135.994 li
223.084 135.992 li
220.831 134.77 li
220.826 134.768 li
220.473 134.559 li
220.931 134.531 li
220.955 134.545 li
223.205 135.764 li
225.455 136.889 li
227.707 137.946 li
229.96 138.966 li
232.213 139.978 li
232.215 139.978 li
234.468 141.013 li
234.471 141.014 li
236.724 142.103 li
236.727 142.104 li
238.981 143.268 li
238.984 143.27 li
241.238 144.516 li
241.24 144.517 li
243.494 145.822 li
243.495 145.822 li
245.747 147.136 li
246.135 147.352 li
246.135 147.464 li
87.931 131.999 mo
88.347 131.227 li
88.3474 131.226 li
90.5485 127.058 li
90.548 127.059 li
92.7479 122.99 li
92.9001 122.724 li
92.5413 123.478 li
92.5395 123.482 li
90.2857 127.857 li
90.2833 127.861 li
88.0295 131.842 li
88.0266 131.846 li
87.931 131.999 li
124.298 59.8899 mo
124.988 57.6745 li
126.114 55.1058 li
128.368 49.808 li
128.367 49.8087 li
130.621 44.4261 li
132.875 39.0956 li
132.876 39.0932 li
135.13 34.0411 li
135.133 34.0354 li
135.531 33.2481 li
135.893 33.1035 li
135.363 34.1489 li
133.112 39.1969 li
130.858 44.5257 li
128.605 49.9079 li
128.604 49.9086 li
126.351 55.2068 li
126.35 55.2081 li
124.298 59.8899 li
.189425 .216098 .2598 0 cmyk
f
197.252 124.845 mo
196.062 124.482 li
196.032 124.469 li
193.779 123.076 li
193.754 123.057 li
191.5 120.749 li
191.487 120.732 li
189.233 117.464 li
189.226 117.454 li
186.972 113.376 li
186.969 113.371 li
184.716 108.796 li
184.715 108.795 li
182.462 104.113 li
180.21 99.6857 li
177.96 95.7522 li
175.711 92.3785 li
173.461 89.456 li
171.209 86.7466 li
171.208 86.7449 li
168.954 83.9332 li
168.949 83.926 li
166.695 80.6746 li
166.689 80.6644 li
164.435 76.6614 li
164.43 76.6512 li
162.176 71.6659 li
162.172 71.6577 li
159.919 65.5988 li
159.917 65.5932 li
158.719 61.8583 li
158.756 61.8243 li
158.763 61.8173 li
158.921 61.646 li
160.161 65.512 li
162.412 71.5637 li
164.662 76.5401 li
166.91 80.5329 li
169.157 83.7759 li
171.408 86.5831 li
173.661 89.2936 li
173.664 89.2974 li
175.918 92.2248 li
175.923 92.232 li
178.177 95.6132 li
178.181 95.6207 li
180.435 99.5605 li
180.438 99.566 li
182.692 103.997 li
182.693 104 li
184.947 108.683 li
184.946 108.682 li
187.199 113.255 li
188.97 116.459 li
189.369 117.227 li
189.379 117.243 li
189.772 117.794 li
191.692 120.577 li
193.927 122.866 li
196.154 124.241 li
196.362 124.305 li
197.252 124.845 li
.303197 .282017 .288945 0 cmyk
f
246.135 153.525 mo
244.51 153.525 li
242.309 153.525 li
240.108 153.525 li
237.907 153.525 li
235.706 153.525 li
233.505 153.525 li
231.304 153.525 li
229.103 153.525 li
226.901 153.525 li
224.7 153.525 li
222.499 153.525 li
220.298 153.525 li
218.097 153.525 li
215.896 153.525 li
213.695 153.525 li
211.494 153.525 li
209.293 153.525 li
207.092 153.525 li
204.891 153.525 li
202.69 153.525 li
200.489 153.525 li
198.288 153.525 li
196.086 153.525 li
193.885 153.525 li
191.684 153.525 li
189.483 153.525 li
187.282 153.525 li
185.081 153.525 li
182.88 153.525 li
180.679 153.525 li
178.478 153.525 li
176.277 153.525 li
174.076 153.525 li
171.875 153.525 li
169.674 153.525 li
167.472 153.525 li
165.271 153.525 li
163.07 153.525 li
160.869 153.525 li
158.668 153.525 li
156.467 153.525 li
154.266 153.525 li
152.065 153.525 li
149.864 153.525 li
147.663 153.525 li
145.462 153.525 li
143.261 153.525 li
141.06 153.525 li
138.859 153.525 li
136.657 153.525 li
134.456 153.525 li
132.255 153.525 li
130.054 153.525 li
127.853 153.525 li
125.652 153.525 li
123.451 153.525 li
121.25 153.525 li
119.049 153.525 li
116.848 153.525 li
114.647 153.525 li
112.446 153.525 li
110.245 153.525 li
108.043 153.525 li
105.842 153.525 li
103.641 153.525 li
101.44 153.525 li
99.2391 153.525 li
97.038 153.525 li
94.837 153.525 li
92.636 153.525 li
90.4349 153.525 li
88.2338 153.525 li
86.0327 153.525 li
83.8316 153.525 li
81.6306 153.525 li
79.4295 153.525 li
77.2284 153.525 li
75.0273 153.525 li
72.8262 153.525 li
70.6251 153.525 li
68.4241 153.525 li
66.223 153.525 li
64.0219 153.525 li
61.8209 153.525 li
59.6198 153.525 li
57.4188 153.525 li
55.2177 153.525 li
53.0166 153.525 li
50.8155 153.525 li
48.6144 153.525 li
46.4134 153.525 li
44.2123 153.525 li
42.0112 153.525 li
39.8101 153.525 li
37.609 153.525 li
35.408 153.525 li
33.2069 153.525 li
31.0058 153.525 li
28.8047 153.525 li
27.6358 153.525 li
27.7305 153.519 li
27.868 153.519 li
27.8679 153.519 li
30.6324 153.511 li
30.6319 153.511 li
33.3964 153.492 li
33.3955 153.492 li
33.4138 153.492 li
32.8761 153.525 li
33.8264 153.525 li
36.0802 153.525 li
38.334 153.525 li
40.5878 153.525 li
42.8416 153.525 li
45.0954 153.525 li
47.3492 153.525 li
49.603 153.525 li
51.8568 153.525 li
54.1106 153.525 li
56.3644 153.525 li
58.6182 153.525 li
60.872 153.525 li
63.1258 153.525 li
65.3796 153.525 li
67.6334 153.525 li
69.8872 153.525 li
72.141 153.525 li
74.3948 153.525 li
76.6486 153.525 li
78.9024 153.525 li
81.1562 153.525 li
83.41 153.525 li
85.6638 153.525 li
87.9176 153.525 li
90.1714 153.525 li
92.4252 153.525 li
94.679 153.525 li
96.9328 153.525 li
99.1866 153.525 li
101.44 153.525 li
103.694 153.525 li
105.948 153.525 li
108.202 153.525 li
110.456 153.525 li
112.709 153.525 li
114.963 153.525 li
117.217 153.525 li
119.471 153.525 li
121.725 153.525 li
123.978 153.525 li
126.232 153.525 li
128.486 153.525 li
130.74 153.525 li
132.994 153.525 li
135.247 153.525 li
137.501 153.525 li
139.755 153.525 li
142.009 153.525 li
144.263 153.525 li
146.516 153.525 li
148.77 153.525 li
151.024 153.525 li
153.278 153.525 li
155.532 153.525 li
157.785 153.525 li
160.039 153.525 li
162.293 153.525 li
164.547 153.525 li
166.801 153.525 li
169.054 153.525 li
171.308 153.525 li
173.562 153.525 li
175.816 153.525 li
178.07 153.525 li
180.323 153.525 li
182.577 153.525 li
184.831 153.525 li
187.085 153.525 li
189.339 153.525 li
191.592 153.525 li
193.846 153.525 li
196.1 153.525 li
198.354 153.525 li
200.608 153.525 li
202.861 153.525 li
205.115 153.525 li
207.369 153.525 li
209.623 153.525 li
211.877 153.525 li
214.13 153.525 li
216.384 153.525 li
218.638 153.525 li
220.892 153.525 li
223.146 153.525 li
225.399 153.525 li
227.653 153.525 li
229.907 153.525 li
232.161 153.525 li
234.415 153.525 li
236.668 153.525 li
238.922 153.525 li
241.176 153.525 li
243.43 153.525 li
245.684 153.525 li
246.135 153.525 li
246.135 147.646 mo
245.621 147.36 li
245.619 147.359 li
245.529 147.306 li
246.135 147.464 li
246.135 147.646 li
f
27.0427 153.479 mo
27.0427 153.307 li
28.7937 153.189 li
30.9898 152.961 li
33.185 152.633 li
35.3804 152.2 li
37.5773 151.671 li
39.7769 151.084 li
41.978 150.496 li
41.982 150.495 li
44.1831 149.983 li
44.1913 149.981 li
46.3923 149.617 li
46.404 149.616 li
48.605 149.454 li
48.6179 149.454 li
50.819 149.513 li
50.8306 149.514 li
51.1259 149.549 li
50.1296 149.752 li
48.6174 149.711 li
46.4286 149.872 li
44.2373 150.234 li
42.0423 150.745 li
39.8433 151.332 li
37.6423 151.92 li
37.6391 151.921 li
35.438 152.45 li
35.4329 152.452 li
33.2318 152.886 li
33.2259 152.887 li
31.0248 153.215 li
31.0191 153.216 li
28.8579 153.441 li
27.0624 153.478 li
27.0636 153.478 li
27.0427 153.479 li
246.135 145.415 mo
244.452 144.559 li
244.444 144.555 li
242.243 143.235 li
242.239 143.233 li
240.038 141.807 li
240.037 141.807 li
237.837 140.358 li
235.638 138.951 li
233.442 137.643 li
231.248 136.49 li
229.058 135.55 li
226.872 134.881 li
224.687 134.513 li
222.501 134.435 li
220.931 134.531 li
220.536 134.298 li
222.492 134.178 li
222.504 134.178 li
224.705 134.257 li
224.722 134.258 li
226.923 134.628 li
226.939 134.632 li
229.14 135.307 li
229.153 135.311 li
231.354 136.256 li
231.363 136.26 li
233.565 137.417 li
233.57 137.421 li
235.772 138.731 li
235.775 138.733 li
237.976 140.141 li
237.978 140.142 li
240.179 141.592 li
240.178 141.592 li
242.377 143.016 li
244.572 144.332 li
246.135 145.126 li
246.135 145.415 li
87.7086 131.87 mo
88.1206 131.105 li
88.12 131.106 li
90.3211 126.938 li
90.3217 126.937 li
92.5228 122.866 li
92.5243 122.863 li
92.6718 122.605 li
92.31 123.366 li
90.0582 127.737 li
87.8071 131.712 li
87.7086 131.87 li
174.684 72.5023 mo
174.507 72.1409 li
173.044 68.563 li
171.756 65.0771 li
171.324 64.1947 li
170.585 62.1034 li
171.99 64.9699 li
171.995 64.9819 li
174.196 70.9422 li
174.198 70.9484 li
174.684 72.5023 li
124.057 59.8001 mo
125.529 55.0733 li
127.731 48.0838 li
127.732 48.0803 li
129.933 41.7362 li
129.936 41.727 li
132.137 36.6683 li
132.15 36.6464 li
134.351 33.4663 li
134.409 33.42 li
135.707 32.9008 li
135.531 33.2481 li
134.54 33.6444 li
132.368 36.7824 li
130.174 41.8251 li
127.975 48.1626 li
125.775 55.1502 li
124.988 57.6745 li
124.057 59.8001 li
.0393378 .186892 .0989395 0 cmyk
f
197.358 124.609 mo
196.362 124.305 li
196.02 124.097 li
196.012 124.091 li
193.81 122.514 li
193.795 122.501 li
191.594 120.34 li
191.58 120.323 li
189.772 117.794 li
189.448 117.324 li
188.97 116.459 li
187.168 112.989 li
187.163 112.978 li
184.962 107.507 li
184.959 107.5 li
182.758 100.917 li
182.757 100.912 li
180.556 93.5157 li
180.555 93.5141 li
178.354 85.7337 li
178.354 85.7341 li
176.154 78.0697 li
174.444 72.5976 li
175.186 74.1111 li
176.4 77.9943 li
176.4 77.9972 li
178.601 85.6633 li
178.602 85.6637 li
180.802 93.4428 li
183.003 100.837 li
185.202 107.415 li
187.399 112.876 li
189.593 117.101 li
191.782 120.165 li
193.968 122.311 li
196.157 123.88 li
197.358 124.609 li
170.348 62.203 mo
169.564 60.6042 li
167.392 57.8743 li
165.263 56.9412 li
163.133 57.5918 li
160.958 59.4419 li
158.921 61.646 li
158.831 61.3648 li
160.775 59.2617 li
160.786 59.251 li
162.987 57.3787 li
163.033 57.3536 li
165.234 56.6813 li
165.323 56.6866 li
167.524 57.6516 li
167.573 57.6893 li
169.696 60.3566 li
170.348 62.203 li
.188602 .27805 .125338 0 cmyk
f
175.186 74.1111 mo
174.444 72.5976 li
173.954 71.0281 li
173.044 68.563 li
174.507 72.1409 li
174.684 72.5023 li
175.186 74.1111 li
171.324 64.1947 mo
170.348 62.203 li
169.696 60.3566 li
169.774 60.455 li
169.789 60.4785 li
170.585 62.1034 li
171.324 64.1947 li
f
56.0989 150.631 mo
55.1925 150.435 li
52.9973 150.03 li
51.1368 149.809 li
51.8771 149.659 li
51.9652 149.649 li
53.0317 149.775 li
53.04 149.776 li
55.241 150.183 li
55.2448 150.184 li
56.6771 150.493 li
56.0989 150.631 li
73.4848 150.308 mo
73.0196 150.271 li
74.9563 149.201 li
77.1422 147.495 li
79.332 145.23 li
81.5256 142.387 li
83.722 139.005 li
85.7411 135.502 li
85.7697 135.46 li
85.7729 135.456 li
87.931 131.999 li
86.1459 135.314 li
86.1441 135.318 li
83.943 139.136 li
83.9395 139.142 li
81.7384 142.531 li
81.7324 142.539 li
79.5313 145.393 li
79.5219 145.404 li
77.3208 147.68 li
77.3075 147.692 li
75.1064 149.41 li
75.0895 149.421 li
73.4848 150.308 li
217.535 134.796 mo
217.109 134.555 li
218.089 134.516 li
220.088 134.331 li
220.473 134.559 li
220.308 134.569 li
218.109 134.772 li
218.102 134.773 li
217.535 134.796 li
92.9001 122.724 mo
94.3586 119.659 li
94.7254 119.018 li
94.7276 119.015 li
96.9287 115.447 li
96.9309 115.443 li
99.1319 112.115 li
99.1332 112.113 li
101.334 108.913 li
103.534 105.693 li
105.733 102.314 li
107.932 98.6707 li
110.131 94.7122 li
112.33 90.4167 li
114.529 85.7553 li
116.729 80.665 li
118.928 75.0581 li
121.128 68.8691 li
123.328 62.1378 li
123.427 61.8228 li
124.095 60.3524 li
124.096 60.3507 li
124.298 59.8899 li
123.574 62.215 li
123.573 62.2167 li
121.372 68.9507 li
121.371 68.9538 li
119.17 75.1459 li
119.169 75.1499 li
116.967 80.7611 li
116.966 80.7651 li
114.765 85.8591 li
114.763 85.8629 li
112.562 90.5283 li
112.56 90.532 li
110.359 94.8315 li
110.357 94.8353 li
108.156 98.7976 li
108.153 98.8016 li
105.952 102.449 li
105.95 102.452 li
103.749 105.835 li
103.747 105.838 li
101.546 109.058 li
99.3455 112.258 li
97.1465 115.583 li
94.9476 119.148 li
92.9001 122.724 li
139.062 34.83 mo
138.761 34.3104 li
136.64 32.8047 li
135.893 33.1035 li
136.069 32.7562 li
136.61 32.5399 li
136.732 32.5544 li
138.933 34.1169 li
138.97 34.1573 li
139.174 34.5104 li
139.062 34.83 li
.189425 .216098 .2598 0 cmyk
f
66.2195 152.065 mo
64.0184 152.006 li
64.0078 152.005 li
61.8067 151.761 li
61.7989 151.76 li
59.5978 151.377 li
59.5932 151.376 li
57.3921 150.911 li
57.3915 150.911 li
56.6801 150.757 li
57.2584 150.619 li
57.4459 150.659 li
57.4453 150.659 li
59.6441 151.124 li
61.839 151.506 li
64.0308 151.749 li
66.2198 151.808 li
68.4063 151.64 li
70.5903 151.195 li
72.5405 150.491 li
73.0764 150.534 li
72.8885 150.638 li
72.8699 150.646 li
70.6688 151.44 li
70.6509 151.445 li
68.4498 151.893 li
68.4339 151.896 li
66.2329 152.065 li
66.2195 152.065 li
215.901 134.862 mo
215.884 134.861 li
213.683 134.658 li
213.66 134.654 li
211.459 134.036 li
211.438 134.028 li
209.237 132.97 li
209.223 132.962 li
207.022 131.544 li
207.016 131.539 li
204.815 129.922 li
204.814 129.921 li
202.615 128.292 li
200.418 126.79 li
198.22 125.433 li
198.221 125.433 li
197.252 124.845 li
198.248 125.149 li
198.354 125.214 li
198.355 125.214 li
200.556 126.572 li
200.561 126.576 li
202.762 128.081 li
202.766 128.084 li
204.967 129.715 li
204.967 129.714 li
207.165 131.33 li
209.356 132.742 li
211.539 133.792 li
213.718 134.403 li
215.899 134.604 li
216.619 134.575 li
217.046 134.815 li
215.901 134.862 li
154.313 64.7428 mo
154.214 64.7407 li
152.013 63.7773 li
151.961 63.7351 li
149.76 60.708 li
149.747 60.6855 li
147.546 55.8227 li
147.542 55.8138 li
145.341 49.7801 li
145.34 49.7787 li
143.14 43.5261 li
140.944 38.0759 li
139.232 35.123 li
139.344 34.8034 li
141.171 37.9549 li
141.179 37.9714 li
143.38 43.4326 li
143.382 43.438 li
145.583 49.6934 li
145.583 49.6934 li
147.782 55.7213 li
149.976 60.5675 li
152.148 63.5556 li
154.269 64.4839 li
156.398 63.6579 li
158.577 61.6391 li
158.63 61.5817 li
158.719 61.8583 li
156.554 63.8632 li
156.514 63.8888 li
154.313 64.7428 li
.303197 .282017 .288945 0 cmyk
f
56.6801 150.757 mo
56.0989 150.631 li
56.6771 150.493 li
57.2584 150.619 li
56.6801 150.757 li
73.0764 150.534 mo
72.5405 150.491 li
72.773 150.408 li
73.0196 150.271 li
73.4848 150.308 li
73.0764 150.534 li
217.046 134.815 mo
216.619 134.575 li
217.109 134.555 li
217.535 134.796 li
217.046 134.815 li
139.232 35.123 mo
139.062 34.83 li
139.174 34.5104 li
139.344 34.8034 li
139.232 35.123 li
f
27.0427 153.519 mo
27.0427 153.479 li
27.0636 153.478 li
27.0624 153.478 li
28.8579 153.441 li
28.8181 153.445 li
28.8134 153.446 li
27.7305 153.519 li
27.0427 153.519 li
51.1368 149.809 mo
50.8061 149.77 li
50.1296 149.752 li
51.1259 149.549 li
51.9652 149.649 li
51.8771 149.659 li
51.1368 149.809 li
85.7411 135.502 mo
85.9204 135.191 li
87.7086 131.87 li
87.8071 131.712 li
90.0582 127.737 li
92.31 123.366 li
92.6718 122.605 li
94.3586 119.659 li
92.9001 122.724 li
92.7479 122.99 li
90.548 127.059 li
90.5485 127.058 li
88.3474 131.226 li
88.347 131.227 li
87.931 131.999 li
85.7729 135.456 li
85.7697 135.46 li
85.7411 135.502 li
220.473 134.559 mo
220.088 134.331 li
220.286 134.313 li
220.29 134.312 li
220.536 134.298 li
220.931 134.531 li
220.473 134.559 li
123.427 61.8228 mo
124.057 59.8001 li
124.988 57.6745 li
124.298 59.8899 li
124.096 60.3507 li
124.095 60.3524 li
123.427 61.8228 li
135.531 33.2481 mo
135.707 32.9008 li
136.069 32.7562 li
135.893 33.1035 li
135.531 33.2481 li
.189425 .216098 .2598 0 cmyk
f
198.248 125.149 mo
197.252 124.845 li
196.362 124.305 li
197.358 124.609 li
198.248 125.149 li
189.772 117.794 mo
189.379 117.243 li
189.369 117.227 li
188.97 116.459 li
189.448 117.324 li
189.772 117.794 li
158.719 61.8583 mo
158.63 61.5817 li
158.831 61.3648 li
158.921 61.646 li
158.763 61.8173 li
158.756 61.8243 li
158.719 61.8583 li
.303197 .282017 .288945 0 cmyk
f
246.135 153.654 mo
27.0427 153.654 li
27.0427 153.519 li
27.7305 153.519 li
27.6358 153.525 li
28.8047 153.525 li
31.0058 153.525 li
33.2069 153.525 li
35.408 153.525 li
37.609 153.525 li
39.8101 153.525 li
42.0112 153.525 li
44.2123 153.525 li
46.4134 153.525 li
48.6144 153.525 li
50.8155 153.525 li
53.0166 153.525 li
55.2177 153.525 li
57.4188 153.525 li
59.6198 153.525 li
61.8209 153.525 li
64.0219 153.525 li
66.223 153.525 li
68.4241 153.525 li
70.6251 153.525 li
72.8262 153.525 li
75.0273 153.525 li
77.2284 153.525 li
79.4295 153.525 li
81.6306 153.525 li
83.8316 153.525 li
86.0327 153.525 li
88.2338 153.525 li
90.4349 153.525 li
92.636 153.525 li
94.837 153.525 li
97.038 153.525 li
99.2391 153.525 li
101.44 153.525 li
103.641 153.525 li
105.842 153.525 li
108.043 153.525 li
110.245 153.525 li
112.446 153.525 li
114.647 153.525 li
116.848 153.525 li
119.049 153.525 li
121.25 153.525 li
123.451 153.525 li
125.652 153.525 li
127.853 153.525 li
130.054 153.525 li
132.255 153.525 li
134.456 153.525 li
136.657 153.525 li
138.859 153.525 li
141.06 153.525 li
143.261 153.525 li
145.462 153.525 li
147.663 153.525 li
149.864 153.525 li
152.065 153.525 li
154.266 153.525 li
156.467 153.525 li
158.668 153.525 li
160.869 153.525 li
163.07 153.525 li
165.271 153.525 li
167.472 153.525 li
169.674 153.525 li
171.875 153.525 li
174.076 153.525 li
176.277 153.525 li
178.478 153.525 li
180.679 153.525 li
182.88 153.525 li
185.081 153.525 li
187.282 153.525 li
189.483 153.525 li
191.684 153.525 li
193.885 153.525 li
196.086 153.525 li
198.288 153.525 li
200.489 153.525 li
202.69 153.525 li
204.891 153.525 li
207.092 153.525 li
209.293 153.525 li
211.494 153.525 li
213.695 153.525 li
215.896 153.525 li
218.097 153.525 li
220.298 153.525 li
222.499 153.525 li
224.7 153.525 li
226.901 153.525 li
229.103 153.525 li
231.304 153.525 li
233.505 153.525 li
235.706 153.525 li
237.907 153.525 li
240.108 153.525 li
242.309 153.525 li
244.51 153.525 li
246.135 153.525 li
246.135 153.654 li
f
grestore
gsave
27.0427 153.654 mo
246.135 153.654 li
246.135 14.3853 li
27.0427 14.3853 li
27.0427 153.654 li
clp
1.50004 lw
1 lc
25.1037 153.65 mo
27.8682 153.647 li
30.6328 153.639 li
33.3973 153.621 li
36.1618 153.581 li
38.9264 153.503 li
41.6909 153.361 li
44.4555 153.123 li
47.22 152.756 li
49.9846 152.246 li
52.7491 151.607 li
55.5137 150.903 li
58.2782 150.243 li
61.0428 149.754 li
63.8073 149.537 li
66.5719 149.623 li
69.3364 149.943 li
72.101 150.328 li
74.8655 150.546 li
77.6301 150.346 li
80.3946 149.506 li
83.1592 147.872 li
85.9237 145.39 li
88.6883 142.105 li
91.4528 138.15 li
94.2174 133.684 li
96.9819 128.845 li
99.7464 123.718 li
102.511 118.362 li
105.276 112.877 li
108.04 107.449 li
110.805 102.323 li
113.569 97.6814 li
116.334 93.4962 li
119.098 89.4541 li
121.863 85.0204 li
124.627 79.6262 li
127.392 72.8898 li
130.156 64.7724 li
132.921 55.6174 li
135.686 46.0772 li
138.45 36.9657 li
141.215 29.0777 li
143.979 23.0284 li
146.744 19.1676 li
149.508 17.6011 li
152.273 18.2879 li
155.037 21.1311 li
157.802 25.9889 li
160.566 32.6016 li
163.331 40.516 li
166.096 49.0897 li
168.86 57.604 li
171.625 65.4326 li
174.389 72.1935 li
177.154 77.8308 li
179.918 82.6119 li
182.683 87.0382 li
185.447 91.6795 li
188.212 96.9657 li
190.977 103.002 li
193.741 109.498 li
196.506 115.857 li
199.27 121.413 li
202.035 125.698 li
204.799 128.614 li
207.564 130.435 li
210.328 131.646 li
213.093 132.728 li
215.857 133.999 li
218.622 135.554 li
221.387 137.32 li
224.151 139.141 li
226.916 140.866 li
229.68 142.391 li
232.445 143.669 li
235.209 144.702 li
237.974 145.534 li
240.738 146.241 li
243.503 146.913 li
246.268 147.631 li
.80795 .582788 .0419623 .000549325 cmyk
@
grestore
gsave
27.0427 153.654 mo
246.135 153.654 li
246.135 14.3853 li
27.0427 14.3853 li
27.0427 153.654 li
clp
1.50004 lw
1 lc
24.8112 153.632 mo
27.065 153.607 li
29.3188 153.56 li
31.5726 153.477 li
33.8264 153.337 li
36.0802 153.12 li
38.334 152.802 li
40.5878 152.373 li
42.8416 151.836 li
45.0954 151.22 li
47.3492 150.58 li
49.603 149.99 li
51.8568 149.532 li
54.1106 149.271 li
56.3644 149.241 li
58.6182 149.426 li
60.872 149.761 li
63.1258 150.139 li
65.3796 150.426 li
67.6334 150.481 li
69.8872 150.181 li
72.141 149.432 li
74.3948 148.184 li
76.6486 146.436 li
78.9024 144.226 li
81.1562 141.617 li
83.41 138.663 li
85.6638 135.388 li
87.9176 131.778 li
90.1714 127.798 li
92.4252 123.423 li
94.679 118.687 li
96.9328 113.7 li
99.1866 108.641 li
101.44 103.707 li
103.694 99.0497 li
105.948 94.7254 li
108.202 90.6801 li
110.456 86.7794 li
112.709 82.8635 li
114.963 78.8017 li
117.217 74.5205 li
119.471 70.0006 li
121.725 65.2538 li
123.978 60.2991 li
126.232 55.1564 li
128.486 49.8583 li
130.74 44.4757 li
132.994 39.1456 li
135.247 34.0935 li
137.501 29.6419 li
139.755 26.1978 li
142.009 24.2056 li
144.263 24.0647 li
146.516 26.0236 li
148.77 30.0848 li
151.024 35.962 li
153.278 43.1162 li
155.532 50.8647 li
157.785 58.5265 li
160.039 65.554 li
162.293 71.6129 li
164.547 76.5983 li
166.801 80.6013 li
169.054 83.8528 li
171.308 86.6644 li
173.562 89.3759 li
175.816 92.3033 li
178.07 95.6846 li
180.323 99.6244 li
182.577 104.056 li
184.831 108.739 li
187.085 113.314 li
189.339 117.391 li
191.592 120.659 li
193.846 122.967 li
196.1 124.359 li
198.354 125.047 li
200.608 125.339 li
202.861 125.55 li
205.115 125.933 li
207.369 126.627 li
209.623 127.655 li
211.877 128.952 li
214.13 130.403 li
216.384 131.891 li
218.638 133.325 li
220.892 134.657 li
223.146 135.879 li
225.399 137.004 li
227.653 138.063 li
229.907 139.083 li
232.161 140.095 li
234.415 141.13 li
236.668 142.218 li
238.922 143.383 li
241.176 144.628 li
243.43 145.934 li
245.684 147.248 li
247.937 148.501 li
.728115 .114992 .822202 .00695811 cmyk
@
grestore
gsave
27.0427 153.654 mo
246.135 153.654 li
246.135 14.3853 li
27.0427 14.3853 li
27.0427 153.654 li
clp
1.50004 lw
1 lc
26.6037 153.466 mo
28.8048 153.317 li
31.0058 153.088 li
33.2069 152.76 li
35.408 152.325 li
37.6091 151.796 li
39.8101 151.208 li
42.0112 150.62 li
44.2123 150.108 li
46.4134 149.744 li
48.6144 149.582 li
50.8155 149.642 li
53.0166 149.903 li
55.2177 150.309 li
57.4187 150.785 li
59.6198 151.25 li
61.8209 151.633 li
64.0219 151.877 li
66.223 151.936 li
68.4241 151.768 li
70.6252 151.319 li
72.8262 150.525 li
75.0273 149.308 li
77.2284 147.591 li
79.4295 145.314 li
81.6305 142.461 li
83.8316 139.072 li
86.0327 135.254 li
88.2338 131.166 li
90.4349 126.998 li
92.6359 122.927 li
94.837 119.082 li
97.0381 115.514 li
99.2392 112.186 li
101.44 108.986 li
103.641 105.765 li
105.842 102.382 li
108.043 98.7352 li
110.245 94.7728 li
112.446 90.4734 li
114.647 85.8081 li
116.848 80.7141 li
119.049 75.1029 li
121.25 68.9107 li
123.451 62.1768 li
125.652 55.1115 li
127.853 48.1225 li
130.054 41.7783 li
132.255 36.7196 li
134.456 33.5394 li
136.657 32.6593 li
138.858 34.2218 li
141.06 38.0194 li
143.261 43.4807 li
145.462 49.7361 li
147.663 55.7697 li
149.864 60.6324 li
152.065 63.6595 li
154.266 64.6229 li
156.467 63.7689 li
158.668 61.73 li
160.869 59.349 li
163.07 57.4766 li
165.271 56.8043 li
167.472 57.7693 li
169.674 60.5351 li
171.875 65.0265 li
174.076 70.9868 li
176.277 78.0326 li
178.478 85.6987 li
180.679 93.4791 li
182.88 100.876 li
185.081 107.459 li
187.282 112.93 li
189.483 117.168 li
191.684 120.248 li
193.885 122.409 li
196.086 123.987 li
198.288 125.324 li
200.489 126.682 li
202.69 128.188 li
204.891 129.818 li
207.092 131.436 li
209.293 132.854 li
211.494 133.912 li
213.695 134.53 li
215.896 134.733 li
218.097 134.644 li
220.298 134.441 li
222.499 134.307 li
224.7 134.385 li
226.902 134.755 li
229.103 135.43 li
231.304 136.374 li
233.505 137.531 li
235.706 138.841 li
237.907 140.25 li
240.108 141.7 li
242.309 143.125 li
244.51 144.444 li
246.711 145.564 li
.173739 .875761 .714351 .0520333 cmyk
@
grestore
1.33932 lw
2 lc
0 lj
27.0427 14.3853 mo
246.135 14.3853 li
@
246.135 153.654 mo
246.135 14.3853 li
@
27.0427 153.654 mo
246.135 153.654 li
@
27.0427 153.654 mo
27.0427 14.3853 li
@
1.50004 lw
1 lc
1 lj
194.086 24.0285 mo
209.515 24.0285 li
.80795 .582788 .0419623 .000549325 cmyk
@
216.011 24.0053 mo
216.011 23.3573 216.072 22.8327 216.211 22.4315 cv
216.342 22.0304 216.543 21.7218 216.805 21.5058 cv
217.068 21.2898 217.407 21.1818 217.808 21.1818 cv
218.101 21.1818 218.364 21.2435 218.587 21.3669 cv
218.803 21.4904 218.988 21.6601 219.135 21.8838 cv
219.282 22.1075 219.397 22.3775 219.482 22.7016 cv
219.559 23.0256 219.606 23.4653 219.606 24.0053 cv
219.606 24.6533 219.536 25.1779 219.405 25.5791 cv
219.274 25.9802 219.073 26.2811 218.811 26.4971 cv
218.549 26.7131 218.209 26.8134 217.808 26.8134 cv
217.268 26.8134 216.852 26.6282 216.551 26.2502 cv
216.188 25.7951 216.011 25.0468 216.011 24.0053 cv
216.705 24.0053 mo
216.705 24.9156 216.805 25.5174 217.021 25.8182 cv
217.23 26.1191 217.492 26.2657 217.808 26.2657 cv
218.117 26.2657 218.371 26.1191 218.587 25.8182 cv
218.803 25.5174 218.911 24.9156 218.911 24.0053 cv
218.911 23.095 218.803 22.4933 218.587 22.1924 cv
218.371 21.8992 218.109 21.745 217.8 21.745 cv
217.484 21.745 217.237 21.8761 217.052 22.1384 cv
216.821 22.4778 216.705 23.1027 216.705 24.0053 cv
1 /0 /CSD get_res sepcs
.85 sep
f
220.223 25.0699 mo
220.223 24.391 li
222.306 24.391 li
222.306 25.0699 li
220.223 25.0699 li
f
222.869 25.2705 mo
223.548 25.1779 li
223.625 25.5636 223.756 25.8414 223.941 26.0111 cv
224.126 26.1808 224.358 26.2657 224.628 26.2657 cv
224.944 26.2657 225.214 26.1577 225.43 25.9339 cv
225.646 25.7179 225.762 25.4402 225.762 25.1162 cv
225.762 24.8076 225.654 24.5453 225.453 24.3447 cv
225.253 24.1442 224.99 24.0362 224.682 24.0362 cv
224.551 24.0362 224.389 24.067 224.203 24.1133 cv
224.281 23.5193 li
224.389 23.527 li
224.674 23.527 224.936 23.4576 225.168 23.3033 cv
225.399 23.149 225.515 22.9176 225.515 22.6013 cv
225.515 22.3544 225.43 22.1538 225.26 21.9918 cv
225.091 21.8298 224.875 21.745 224.612 21.745 cv
224.35 21.745 224.126 21.8298 223.949 21.9918 cv
223.771 22.1615 223.663 22.4084 223.617 22.7324 cv
222.938 22.6167 li
223.015 22.1615 223.208 21.8067 223.501 21.5598 cv
223.795 21.3129 224.157 21.1818 224.597 21.1818 cv
224.898 21.1818 225.175 21.2512 225.43 21.3824 cv
225.677 21.5135 225.87 21.691 226.009 21.907 cv
226.147 22.1307 226.217 22.3698 226.217 22.6167 cv
226.217 22.8636 226.147 23.0796 226.024 23.2724 cv
225.893 23.473 225.7 23.6273 225.453 23.7353 cv
225.777 23.8124 226.024 23.9744 226.209 24.2059 cv
226.394 24.445 226.487 24.7459 226.487 25.1008 cv
226.487 25.5791 226.309 25.9879 225.955 26.3197 cv
225.6 26.6591 225.16 26.8211 224.628 26.8211 cv
224.134 26.8211 223.733 26.6822 223.417 26.3891 cv
223.093 26.1037 222.915 25.7334 222.869 25.2705 cv
f
227.158 25.2782 mo
227.868 25.2242 li
227.914 25.5714 228.038 25.8336 228.23 26.0034 cv
228.423 26.1808 228.655 26.2657 228.925 26.2657 cv
229.249 26.2657 229.526 26.1422 229.758 25.8954 cv
229.982 25.6485 230.097 25.3245 230.097 24.9156 cv
230.097 24.5299 229.982 24.229 229.766 24.0053 cv
229.55 23.7816 229.264 23.6659 228.917 23.6659 cv
228.701 23.6659 228.5 23.7199 228.323 23.8202 cv
228.146 23.9204 228.007 24.0439 227.914 24.1982 cv
227.274 24.121 li
227.806 21.2821 li
230.552 21.2821 li
230.552 21.9301 li
228.354 21.9301 li
228.053 23.4113 li
228.385 23.1799 228.732 23.0641 229.094 23.0641 cv
229.573 23.0641 229.982 23.2339 230.313 23.5656 cv
230.645 23.905 230.815 24.3293 230.815 24.8539 cv
230.815 25.3553 230.668 25.7874 230.375 26.1499 cv
230.02 26.5974 229.542 26.8134 228.925 26.8134 cv
228.423 26.8134 228.014 26.6745 227.698 26.3968 cv
227.374 26.1191 227.197 25.7488 227.158 25.2782 cv
f
194.086 34.7759 mo
209.515 34.7759 li
.728115 .114992 .822202 .00695811 cmyk
@
216.011 36.0179 mo
216.69 35.9253 li
216.767 36.3111 216.898 36.5888 217.083 36.7585 cv
217.268 36.9282 217.5 37.0131 217.77 37.0131 cv
218.086 37.0131 218.356 36.9051 218.572 36.6814 cv
218.788 36.4654 218.904 36.1876 218.904 35.8636 cv
218.904 35.555 218.796 35.2927 218.595 35.0922 cv
218.394 34.8916 218.132 34.7836 217.824 34.7836 cv
217.692 34.7836 217.53 34.8144 217.345 34.8607 cv
217.422 34.2667 li
217.53 34.2744 li
217.816 34.2744 218.078 34.205 218.31 34.0507 cv
218.541 33.8964 218.657 33.665 218.657 33.3487 cv
218.657 33.1018 218.572 32.9012 218.402 32.7392 cv
218.232 32.5772 218.016 32.4924 217.754 32.4924 cv
217.492 32.4924 217.268 32.5772 217.091 32.7392 cv
216.913 32.909 216.805 33.1558 216.759 33.4798 cv
216.08 33.3641 li
216.157 32.909 216.35 32.5541 216.643 32.3072 cv
216.936 32.0604 217.299 31.9292 217.739 31.9292 cv
218.04 31.9292 218.317 31.9986 218.572 32.1298 cv
218.819 32.2609 219.012 32.4384 219.15 32.6544 cv
219.289 32.8781 219.359 33.1173 219.359 33.3641 cv
219.359 33.611 219.289 33.827 219.166 34.0199 cv
219.035 34.2204 218.842 34.3747 218.595 34.4827 cv
218.919 34.5599 219.166 34.7219 219.351 34.9533 cv
219.536 35.1925 219.629 35.4933 219.629 35.8482 cv
219.629 36.3265 219.451 36.7354 219.096 37.0671 cv
218.742 37.4065 218.302 37.5685 217.77 37.5685 cv
217.276 37.5685 216.875 37.4297 216.558 37.1365 cv
216.234 36.8511 216.057 36.4808 216.011 36.0179 cv
1 /0 /CSD get_res sepcs
.85 sep
f
220.3 36.0256 mo
221.01 35.9716 li
221.056 36.3188 221.179 36.5811 221.372 36.7508 cv
221.565 36.9282 221.797 37.0131 222.067 37.0131 cv
222.391 37.0131 222.668 36.8896 222.9 36.6428 cv
223.123 36.3959 223.239 36.0719 223.239 35.663 cv
223.239 35.2773 223.123 34.9765 222.907 34.7527 cv
222.691 34.529 222.406 34.4133 222.059 34.4133 cv
221.843 34.4133 221.642 34.4673 221.465 34.5676 cv
221.287 34.6679 221.149 34.7913 221.056 34.9456 cv
220.416 34.8684 li
220.948 32.0295 li
223.694 32.0295 li
223.694 32.6775 li
221.496 32.6775 li
221.195 34.1587 li
221.527 33.9273 221.874 33.8116 222.236 33.8116 cv
222.715 33.8116 223.123 33.9813 223.455 34.313 cv
223.787 34.6524 223.957 35.0767 223.957 35.6013 cv
223.957 36.1028 223.81 36.5348 223.517 36.8974 cv
223.162 37.3448 222.684 37.5608 222.067 37.5608 cv
221.565 37.5608 221.156 37.422 220.84 37.1442 cv
220.516 36.8665 220.339 36.4962 220.3 36.0256 cv
f
224.512 35.8173 mo
224.512 35.1385 li
226.595 35.1385 li
226.595 35.8173 li
224.512 35.8173 li
f
227.158 36.0256 mo
227.868 35.9716 li
227.914 36.3188 228.038 36.5811 228.23 36.7508 cv
228.423 36.9282 228.655 37.0131 228.925 37.0131 cv
229.249 37.0131 229.526 36.8896 229.758 36.6428 cv
229.982 36.3959 230.097 36.0719 230.097 35.663 cv
230.097 35.2773 229.982 34.9765 229.766 34.7527 cv
229.55 34.529 229.264 34.4133 228.917 34.4133 cv
228.701 34.4133 228.5 34.4673 228.323 34.5676 cv
228.146 34.6679 228.007 34.7913 227.914 34.9456 cv
227.274 34.8684 li
227.806 32.0295 li
230.552 32.0295 li
230.552 32.6775 li
228.354 32.6775 li
228.053 34.1587 li
228.385 33.9273 228.732 33.8116 229.094 33.8116 cv
229.573 33.8116 229.982 33.9813 230.313 34.313 cv
230.645 34.6524 230.815 35.0767 230.815 35.6013 cv
230.815 36.1028 230.668 36.5348 230.375 36.8974 cv
230.02 37.3448 229.542 37.5608 228.925 37.5608 cv
228.423 37.5608 228.014 37.422 227.698 37.1442 cv
227.374 36.8665 227.197 36.4962 227.158 36.0256 cv
f
231.447 36.0256 mo
232.157 35.9716 li
232.203 36.3188 232.327 36.5811 232.52 36.7508 cv
232.713 36.9282 232.944 37.0131 233.214 37.0131 cv
233.538 37.0131 233.816 36.8896 234.047 36.6428 cv
234.271 36.3959 234.387 36.0719 234.387 35.663 cv
234.387 35.2773 234.271 34.9765 234.055 34.7527 cv
233.839 34.529 233.553 34.4133 233.206 34.4133 cv
232.99 34.4133 232.79 34.4673 232.612 34.5676 cv
232.435 34.6679 232.296 34.7913 232.203 34.9456 cv
231.563 34.8684 li
232.095 32.0295 li
234.842 32.0295 li
234.842 32.6775 li
232.643 32.6775 li
232.342 34.1587 li
232.674 33.9273 233.021 33.8116 233.384 33.8116 cv
233.862 33.8116 234.271 33.9813 234.603 34.313 cv
234.934 34.6524 235.104 35.0767 235.104 35.6013 cv
235.104 36.1028 234.957 36.5348 234.664 36.8974 cv
234.309 37.3448 233.831 37.5608 233.214 37.5608 cv
232.713 37.5608 232.304 37.422 231.987 37.1442 cv
231.663 36.8665 231.486 36.4962 231.447 36.0256 cv
f
194.086 45.5233 mo
209.515 45.5233 li
.173739 .875761 .714351 .0520333 cmyk
@
216.011 46.773 mo
216.72 46.719 li
216.767 47.0662 216.89 47.3285 217.083 47.4982 cv
217.276 47.6756 217.507 47.7605 217.777 47.7605 cv
218.101 47.7605 218.379 47.6371 218.61 47.3902 cv
218.834 47.1433 218.95 46.8193 218.95 46.4104 cv
218.95 46.0247 218.834 45.7239 218.618 45.5001 cv
218.402 45.2764 218.117 45.1607 217.77 45.1607 cv
217.554 45.1607 217.353 45.2147 217.176 45.315 cv
216.998 45.4153 216.859 45.5387 216.767 45.693 cv
216.126 45.6159 li
216.659 42.7769 li
219.405 42.7769 li
219.405 43.4249 li
217.206 43.4249 li
216.906 44.9061 li
217.237 44.6747 217.584 44.559 217.947 44.559 cv
218.425 44.559 218.834 44.7287 219.166 45.0604 cv
219.498 45.3998 219.667 45.8241 219.667 46.3487 cv
219.667 46.8502 219.521 47.2822 219.228 47.6448 cv
218.873 48.0922 218.394 48.3082 217.777 48.3082 cv
217.276 48.3082 216.867 48.1694 216.551 47.8916 cv
216.227 47.6139 216.049 47.2436 216.011 46.773 cv
1 /0 /CSD get_res sepcs
.85 sep
f
220.3 46.773 mo
221.01 46.719 li
221.056 47.0662 221.179 47.3285 221.372 47.4982 cv
221.565 47.6756 221.797 47.7605 222.067 47.7605 cv
222.391 47.7605 222.668 47.6371 222.9 47.3902 cv
223.123 47.1433 223.239 46.8193 223.239 46.4104 cv
223.239 46.0247 223.123 45.7239 222.907 45.5001 cv
222.691 45.2764 222.406 45.1607 222.059 45.1607 cv
221.843 45.1607 221.642 45.2147 221.465 45.315 cv
221.287 45.4153 221.149 45.5387 221.056 45.693 cv
220.416 45.6159 li
220.948 42.7769 li
223.694 42.7769 li
223.694 43.4249 li
221.496 43.4249 li
221.195 44.9061 li
221.527 44.6747 221.874 44.559 222.236 44.559 cv
222.715 44.559 223.123 44.7287 223.455 45.0604 cv
223.787 45.3998 223.957 45.8241 223.957 46.3487 cv
223.957 46.8502 223.81 47.2822 223.517 47.6448 cv
223.162 48.0922 222.684 48.3082 222.067 48.3082 cv
221.565 48.3082 221.156 48.1694 220.84 47.8916 cv
220.516 47.6139 220.339 47.2436 220.3 46.773 cv
f
224.512 46.5647 mo
224.512 45.8859 li
226.595 45.8859 li
226.595 46.5647 li
224.512 46.5647 li
f
229.712 48.2234 mo
229.033 48.2234 li
229.033 43.9032 li
228.863 44.0575 228.647 44.2195 228.385 44.3738 cv
228.122 44.5281 227.883 44.6438 227.675 44.721 cv
227.675 44.0652 li
228.053 43.8878 228.385 43.6718 228.67 43.4172 cv
228.948 43.1704 229.148 42.9235 229.272 42.6766 cv
229.712 42.6766 li
229.712 48.2234 li
f
231.447 45.5001 mo
231.447 44.8521 231.509 44.3275 231.648 43.9264 cv
231.779 43.5252 231.98 43.2166 232.242 43.0006 cv
232.504 42.7846 232.844 42.6766 233.245 42.6766 cv
233.538 42.6766 233.8 42.7383 234.024 42.8618 cv
234.24 42.9852 234.425 43.1549 234.572 43.3786 cv
234.718 43.6024 234.834 43.8724 234.919 44.1964 cv
234.996 44.5204 235.042 44.9601 235.042 45.5001 cv
235.042 46.1482 234.973 46.6727 234.842 47.0739 cv
234.711 47.4751 234.51 47.7759 234.248 47.9919 cv
233.985 48.2079 233.646 48.3082 233.245 48.3082 cv
232.705 48.3082 232.288 48.1231 231.987 47.7451 cv
231.625 47.2899 231.447 46.5416 231.447 45.5001 cv
232.142 45.5001 mo
232.142 46.4104 232.242 47.0122 232.458 47.313 cv
232.666 47.6139 232.929 47.7605 233.245 47.7605 cv
233.553 47.7605 233.808 47.6139 234.024 47.313 cv
234.24 47.0122 234.348 46.4104 234.348 45.5001 cv
234.348 44.5898 234.24 43.9881 234.024 43.6872 cv
233.808 43.3941 233.546 43.2398 233.237 43.2398 cv
232.921 43.2398 232.674 43.3709 232.489 43.6332 cv
232.257 43.9727 232.142 44.5975 232.142 45.5001 cv
f
235.737 45.5001 mo
235.737 44.8521 235.798 44.3275 235.937 43.9264 cv
236.068 43.5252 236.269 43.2166 236.531 43.0006 cv
236.794 42.7846 237.133 42.6766 237.534 42.6766 cv
237.827 42.6766 238.09 42.7383 238.313 42.8618 cv
238.529 42.9852 238.714 43.1549 238.861 43.3786 cv
239.008 43.6024 239.123 43.8724 239.208 44.1964 cv
239.285 44.5204 239.332 44.9601 239.332 45.5001 cv
239.332 46.1482 239.262 46.6727 239.131 47.0739 cv
239 47.4751 238.799 47.7759 238.537 47.9919 cv
238.275 48.2079 237.935 48.3082 237.534 48.3082 cv
236.994 48.3082 236.577 48.1231 236.277 47.7451 cv
235.914 47.2899 235.737 46.5416 235.737 45.5001 cv
236.431 45.5001 mo
236.431 46.4104 236.531 47.0122 236.747 47.313 cv
236.956 47.6139 237.218 47.7605 237.534 47.7605 cv
237.843 47.7605 238.097 47.6139 238.313 47.313 cv
238.529 47.0122 238.637 46.4104 238.637 45.5001 cv
238.637 44.5898 238.529 43.9881 238.313 43.6872 cv
238.097 43.3941 237.835 43.2398 237.526 43.2398 cv
237.21 43.2398 236.963 43.3709 236.778 43.6332 cv
236.547 43.9727 236.431 44.5975 236.431 45.5001 cv
f
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
